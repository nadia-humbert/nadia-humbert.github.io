<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2017-07-24T11:05:22+02:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ATDD et TDD double boucle]]></title>
    <link href="https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle/"/>
    <updated>2016-05-22T22:27:01+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle</id>
    <content type="html"><![CDATA[<p>L'<em>Acceptance Test Driven Development</em> est une pratique qui consiste à écrire un test d'acceptation dès la définition de la fonctionnalité à implémenter. Ce test permet ensuite de valider que l'implémentation de la fonctionnalité est terminée. En général, plusieurs composants unitaires sont nécessaires pour implémenter une fonctionnalité. Ces composants peuvent être développés en TDD dans une deuxième boucle de <em>feedback</em>.</p>

<p>L'objectif de cet article est de présenter l'ATDD et comment le mettre en pratique grâce à du TDD double boucle.</p>

<!-- more -->


<h2>ATDD</h2>

<p>L'ATDD encourage fortement la collaboration entre les développeurs et le métier afin d'écrire des tests d'acceptation précis et pertinents. Pour optimiser l'échange, ces tests peuvent être écrits avec un vocabulaire partagé et bien défini. Ils peuvent également suivre le pattern <em>Given</em> / <em>When</em> / <em>Then</em> comme dans l'exemple suivant :</p>

<pre><code># Given
Un client dépose 1000 euros sur son compte le 17/12/2015
Et il dépose 500 euros sur son compte le 18/12/2015
Et il retire 1500 euros de son compte le 19/12/2015

# When
Le client demande à imprimer son relevé de compte

# Then
Le relevé imprimé doit être égal à
   date | credit | debit | balance
   19/12/2015 | | 1500.00 | 0.00
   18/12/2015 | 500.00 | | 1500.00
   17/12/2015 | 1000.00 | | 1000.00
</code></pre>

<p>Pour implémenter la fonctionnalité, le développeur se sert de ce test d'acceptation et le traduit sous forme de code pour le rendre exécutable. Le test d'acceptation précédent peut être écrit en Java de la manière qui suit :</p>

<pre><code class="java">@Test
public void should_print_statement() {
    // given
    Account account = new Account();
    account.deposit(new BigDecimal("1000"), LocalDate.of(2015, Month.DECEMBER, 17));
    account.deposit(new BigDecimal("500"), LocalDate.of(2015, Month.DECEMBER, 18));
    account.withdraw(new BigDecimal("1500"), LocalDate.of(2015, Month.DECEMBER, 19));

    // when
    String statement = account.printStatement();

    // then
    assertThat(statement).isEqualTo(
            "date | credit | debit | balance\n" +
            "19/12/2015 | | 1500.00 | 0.00\n" +
            "18/12/2015 | 500.00 | | 1500.00\n" +
            "17/12/2015 | 1000.00 | | 1000.00"
    );
}
</code></pre>

<p>Ce test sera rouge tant que la fonctionnalité ne sera pas implémentée entièrement. Il servira de fil conducteur lors des développements.</p>

<h2>TDD double boucle</h2>

<p>La classe <code>Account</code> sert de point d'entrée à la fonctionnalité. Cependant, elle ne sera pas suffisante pour l'implémenter complètement. Le TDD double boucle consiste à développer la classe <code>Account</code> ainsi que ses dépendances en TDD, formant ainsi une boucle de <em>feedback</em> à l'intérieur de celle déjà formée par le test d'acceptation.</p>

<p><img class="center" src="/images/double_loop_tdd.png"></p>

<p>Dans l'exemple présenté ci-dessus, il est possible de déléguer l'impression d'un relevé à une classe <code>Statement</code> qui est une dépendance de <code>Account</code>. Lors de l'écriture du test de <code>Account</code>, cette classe sera mockée.</p>

<pre><code class="java">@Test
public void should_print_statement() {
    // given
    Statement statement = mock(Statement.class);
    when(statement.print()).thenReturn("printed statement");
    Account account = new Account(statement);

    // when
    String printedStatement = account.printStatement();

    // then
    assertThat(printedStatement).isEqualTo("printed statement");
}
</code></pre>

<p>De la même manière, la classe <code>Statement</code> sera développée en TDD en mockant sa dépendance vers <code>Transaction</code>, qui sera chargée d'imprimer une ligne du relevé. Finalement, cette classe <code>Transaction</code> sera implémentée en TDD.
Ainsi, le test d'acceptation passera au vert, ce qui indique que la fonctionnalité correspondante est terminée.</p>

<h2>Conclusion</h2>

<p>L'ATDD encourage la collaboration métier / développeur à travers la définition précise de tests d'acceptation qui permettent de valider les fonctionnalités. Ces dernières peuvent être implémentées en utilisant du TDD double boucle.</p>

<p>Vous trouverez une mise en pratique du TDD double boucle dans la vidéo <a href="https://www.youtube.com/watch?v=Qe84jbwyZ3U">Crafties #7</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Once upon a time TDD... and me]]></title>
    <link href="https://nphumbert.github.io/blog/2016/04/13/once-upon-a-time-tdd-and-me/"/>
    <updated>2016-04-13T23:56:11+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/04/13/once-upon-a-time-tdd-and-me</id>
    <content type="html"><![CDATA[<p>Once upon a time, there was a young woman that had plenty of projects and passions and was a bit hyperactive. She doesn&rsquo;t really enjoy talking about her life and asks herself very seriously how is she going to write this post.
Among her early age dreams were learning many things about science, especially biosciences, and about software engineering. She started with biosciences (by the way, they are extremely fascinating, nothing is more complex and well crafted than the human body) and then she decided to continue with software engineering. However, the software engineering program that she completed only lasted one year (6 months of classes and 6 months of internship). Of course, this was only a door to access the world that she wanted to discover so much.</p>

<!-- more -->


<p>Not having much knowledge nor experience in IT, she was (and she still is) looking for methods, tools and good practices that would allow her to progress and produce clean code. Among these tools there is TDD.</p>

<p>TDD is a development tool that preconizes to write the tests before the production code. It was invented by Kent Beck. And you know what ? It is truly deeply deligthful ;-) (this sentence was a lot better in French, by the way). In this article, I am going to talk about my personal experience with TDD: the beginnings, the pros and cons and some ideas to set it up.</p>

<h2>The beginnings</h2>

<p>At the beginning, I saw the theoretical interest of this tool and I was fascinated by the concept (I find it very clever). On the other hand, I thought that it made me work a bit slower and that it was a little complicated.
I tried it for the first time towards the end of my first year as a software developer and within a fairly complex project in terms of business, technologies and challenges. Needless to say that TDD was not the only thing that my small head had to process! As a consequence, I tried to use it when I was not overworked and as often as possible. Moreover, the large majority of developers of this big project did not use this tool. Thus, it was sometimes complicated to use TDD in this context but it was definitely out of the question to quit, I saw the potential of this tool and I knew that I had to persevere.</p>

<p>After this first year of experience in software development, during which I learned a lot, and a little experience in TDD, I decided to take time for some of my personal projects. And then, everything changed. Working on a project from scratch, with full latitude, I could use TDD more easily.</p>

<p>After a good night of sleep, I therefore started my own project with a test. It was so beautiful. At this very point, I understood a number of benefits that TDD can provide.</p>

<h2>Pros</h2>

<h3>Express the business rather than doing an implementation</h3>

<p>We focus on the business rather than on an implementation.</p>

<h3>Work unitarily and be more efficient</h3>

<p>We only do one thing at a time and thus are more efficient. Contrary to what I thought at the beginning, I quickly realized that TDD allows to go faster. Indeed, we don&rsquo;t ask ourselves twenty questions at a time, even existential ones to create the best design. I am not saying that we shouldn&rsquo;t think anymore. By the way, I think we should and that it has to always be part of our job as software developers. On the other hand, TDD allows to ask ourselves even more relevant and targeted questions, a feature at a time.</p>

<h3>Have a test harness</h3>

<p>By starting with tests, not only we are sure that we are going to have tests but also we know that they are going to be more relevant. Indeed, they cover real business needs.
This test harness permits to ensure that our code is protected and that, during refactoring or addition of new features, we are going to be able to detect regressions easily and quickly, unit testing being the least expensive in terms of implementation and allowing to have an extremely short feedback loop.</p>

<h3>Gain of confidence</h3>

<p>By using TDD, I know I develop exactly what I need to, which is not negligible! This allowed me to gain confidence in my developments.</p>

<h3>Avoid bad design</h3>

<p>TDD lets us know when our design is bad. Indeed, if we can&rsquo;t test our code base, it means that our design is no longer adapted or has never been. It is an alarm to encourage us to render it simpler and adapted to our needs of the current time. For example, if we have to mock and fix a behaviour to test another that depends on it but we can&rsquo;t, this probably means that our classes are strongly coupled. This can happen when we invoke a static method in a class, for instance. In this case, classes are strongly linked because we can&rsquo;t easily change the implementation of what is being used. However, classes should be strongly decoupled in order to make the system more maintainable (changeable and extensible by changing implementations easily).</p>

<p>Moreover, I could notice that the design that emerges by using TDD is rather simple. I think this is the result obtained by the overall benefits of TDD: focus on the business, perform one thing at a time and have more self-confidence result in the construction of a clean design.</p>

<h2>Cons</h2>

<p>Currently, I don&rsquo;t see any and I have trouble trying to imagine some. By the way, I am very surprised to see that TDD is regularly misunderstood. It is often seen as a waste of time but I confirmed that this is only a false impression. There is obviously an adjustment period and it may vary depending on the developer. Nevertheless, I think that TDD is a good investment and deserves to be implemented. But how can we set it up ?</p>

<h2>Set up</h2>

<p>It is never easy to try something new, but if we never challenged ourselves and if we never pushed our limits, we would miss many extraordinary things and we would get bored a lot too. I think that the way to set it up in a given project depends on its context, like for everything else in life, and we have to always adapt to it as good as possible. However, I will try to share some ideas on the subject here.</p>

<h3>Start with small goals</h3>

<p>To be ambitious is great but it is hard to climb to the top of the mount Everest, the first time, without stopping. In the same way, during the set up of TDD our goals should be measured and well defined from the beginning. It could be as simple as encouraging all the team members to use TDD sometimes in the week. This way, they can progressively get familiar with the tool.</p>

<h3>Do not rush or be discouraged</h3>

<p>From my personal experience, it is useless to want to assimilate the tool in two minutes and then judge whether it is suitable or not. Indeed, if everybody judged us in two minutes, they would have a perception of us not necessarily relevant nor complete. It is important to take the required time to know the tool, understand it and properly use it.</p>

<h3>Do not consider it as something outside developements</h3>

<p>Like refactoring, TDD should, in my opinion, be a part of our developments. So it should not be something that we should ask the permission for but an integral part of our developments. As a consequence, we must take into account the adjustment period in our potential estimations, hence the importance of having small goals at first. After the adaptation period, it is quite possible that the estimations lower : I think TDD makes you go faster, for the reasons mentioned above, and we will no longer have to take into account the adaptation time.</p>

<h3>Make it a team effort</h3>

<p>I do not think that designating some team members to test the tool is a good idea. The whole team should be equally involved in the process from the start. Otherwise, I think the chances to succeed diminish greatly. Indeed, if only a few members of the team are actually concerned by the tool, the others may lose interest on it. Furthermore, if the communication about the experience is not ideally done, the allocated time to it will be misused (the results may be null, some team members may be discouraged and those who had the &ldquo;official permission&rdquo; to test it may be disappointed). Finally, we risk to miss out on a good collaboration between coworkers and thus better results.</p>

<h3>Have good communication within the team</h3>

<p>Don&rsquo;t hesitate to often talk about it. Different perspectives will enrich the experience. Nevertheless, do not forget my advice n°2 : do not be discouraged!</p>

<h2>Conclusion</h2>

<p>TDD is a development tool that has a lot of advantages. It is not necessarily obvious to see them at first sight but you should not abandon the ship because the journey is really worth it! I hope you enjoyed this story and that it will be helpful to you. See you soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Il était une fois le TDD... et moi]]></title>
    <link href="https://nphumbert.github.io/blog/2016/04/13/il-etait-une-fois-le-tdd-et-moi/"/>
    <updated>2016-04-13T17:27:36+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/04/13/il-etait-une-fois-le-tdd-et-moi</id>
    <content type="html"><![CDATA[<p>Il était une fois une jeune fille pleine de projets, de passions et un chouilla hyperactive.<br/>
Elle n'aime pas particulièrement raconter sa vie et se demande donc fortement comment elle va réussir à faire cet article.<br/>
Parmi ses rêves de gosse se trouvaient d'apprendre plein de choses sur les sciences, notamment les biosciences, et sur l'informatique. Elle a donc démarré avec les biosciences (d'ailleurs c'est méga passionant, rien de plus complexe et de mieux architecturé que le corps humain) puis a décidé d'enchaîner avec l'informatique. Cependant, le cursus suivi en informatique n'a duré qu'un an (moitié cours, moitié stage). Evidemment, il ne s'agissait que d'une porte d'accès au monde qu'elle souhaitait tant découvrir.</p>

<!-- more -->


<p>N'ayant pas beaucoup de connaissances ni d'expériences en informatique, elle était (et elle est toujours) à la recherche de méthodes, d'outils et de bonnes pratiques qui lui permettraient de progresser et de produire du code propre. Parmi ces outils se trouve le TDD.</p>

<p>Le TDD est un outil de développement qui préconise l'écriture des tests avant le code de production. Il a été inventé par Kent Beck. Et vous savez quoi ? C'est un truc de dingue ;-)
Dans cet article, je vais vous parler de mon expérience personnelle concernant le TDD : les débuts, les avantages et inconvénients et quelques idées pour le mettre en place.</p>

<h2>Les débuts</h2>

<p>Au départ, je voyais l'intérêt théorique de cet outil et le concept me passionnait particulièrement (je trouve ça malin). Par contre, en pratique, je trouvais que ça me ralentissait un peu et que c'était un peu compliqué.<br/>
Je l'ai expérimenté pour la première fois vers la fin de ma première année de développement et au sein d'un projet assez complexe en termes de métier, de technologies et d'enjeux. Autant dire que je n'avais pas que le TDD à intégrer dans ma petite tête ! Du coup, j'essayais de le faire quand je n'étais pas débordée et le plus souvent possible. Par ailleurs, la grande majorité des développeurs de ce gros projet n'utilisaient pas cet outil. Il était donc parfois un peu dur de faire du TDD dans ce contexte mais il était hors de question d'abandonner, je voyais le potentiel de cet outil et je savais qu'il fallait persévéver.</p>

<p>Après cette première année d'expérience dans le développement, où j'ai énormément appris, et une petite expérience en TDD, j'ai décidé de dédier du temps à des projets personnels. Et là, tout a changé. Partant d'un projet de zéro, avec toutes les libertés possibles, je pouvais expérimenter encore plus facilement le TDD.</p>

<p>Après une bonne nuit de sommeil, j'ai donc commencé mon projet avec un test. C'était trop beau. A ce moment précis, j'ai compris un certain nombre d'avantages que le TDD peut nous apporter.</p>

<h2>Les avantages</h2>

<h3>Exprimer le besoin plutôt que de réaliser une implémentation</h3>

<p>On se concentre sur le besoin plutôt que sur une implémentation.</p>

<h3>Travailler unitairement et être plus efficace</h3>

<p>On ne fait qu'une chose à la fois donc on est plus efficace.
Contrairement à ce que je pensais au tout début, j'ai rapidement compris que le TDD permettait d'aller plus vite. En effet, on ne se pose pas vingt questions à la fois, voire des questions existentielles pour savoir comment construire le meilleur design. Je ne dis pas qu'il ne faut plus se poser de question. D'ailleurs, je pense qu'il le faut et que cela doit faire partie de notre métier de développeur. Par contre, le TDD permet de se poser des questions encore plus pertinentes et ciblées, sur une fonctionnalité à la fois.</p>

<h3>Disposer d'un harnais de test</h3>

<p>En commençant par les tests, non seulement on est certain d'en avoir mais on est sûr d'avoir des tests pertinents. En effet, ils couvrent de vrais besoins métiers.<br/>
Ce harnais de test permet d'assurer que notre code est protégé et que, lors de refactorings ou ajout de nouvelles fonctionnalités, on pourra facilement et rapidement détecter des régressions, les tests unitaires étant les moins coûteux en terme de réalisation et permettant d'avoir un feedback extrêmement rapide.</p>

<h3>Gagner en confiance</h3>

<p>En faisant du TDD, je sais que je développe ce qu'il faut exactement développer, ce qui n'est pas négligeable ! Ceci m'a permis de gagner en confiance dans mes développements.</p>

<h3>Faire émerger un design propre</h3>

<p>Le TDD permet de se rendre compte quand le design n'est pas correct. En effet, si on n'arrive pas à tester notre code, cela veut dire que notre design n'est plus adapté ou ne l'a jamais été. Il s'agit ainsi d'une alerte pour nous encourager à le rendre plus simple et adapté à notre besoin à un instant T. Par exemple, si on a besoin de mocker et de fixer un comportement pour en tester un autre qui en dépend et qu'on n'y arrive pas, cela veut peut-être dire que nos classes sont trop couplées. Ceci peut arriver quand on fait un appel statique dans une classe. Dans ce cas, les classes sont fortement liées car on ne peut pas changer l'implémentation de ce qui est utilisé. Or, les classes doivent être fortement découplées pour que le système soit plus maintenable (évolutif et extensible en changeant les implémentations facilement).</p>

<p>De plus, j'ai pu constater que le design qui émerge en utilisant du TDD est plutôt simple. Je pense qu'il s'agit du résultat obtenu par l'ensemble des avantages du TDD : se concentrer sur le besoin, réaliser une seule chose à la fois et avoir plus confiance en soi résultent en la construction d'un design propre.</p>

<h2>Les inconvénients</h2>

<p>Actuellement, j'en vois aucun et j'ai du mal à en imaginer.
D'ailleurs, je suis surprise de voir que le TDD est parfois mal perçu dans le monde du travail. Il est souvent vu comme étant une perte de temps mais j'ai pu confirmer qu'il s'agit d'une fausse impression. Il faut évidemment un temps d'adaptation et celui-ci peut varier en fonction des développeurs. Néanmoins, je pense que le TDD serait un bon investissement et mérite d'être mis en place. Oui, mais comment ?</p>

<h2>Mise en place</h2>

<p>Ce n'est jamais facile d'essayer quelque chose de nouveau, mais si on ne se remettait jamais en question et si on ne repoussait jamais nos limites, on passerait à côté de choses extraordinaires et on s'ennuierait beaucoup aussi.<br/>
Mais comment mettre en place cet outil dans une structure ? Je pense que, comme tout, cela dépend du contexte et il faut toujours s'adapter au mieux à celui-ci. Je vais néanmoins essayer de partager quelques idées à ce sujet.</p>

<h3>Commencer avec des petits objectifs</h3>

<p>Etre ambitieux c'est génial mais il est difficile d'arriver au sommet du Mont Blanc, dès la première fois, d'une traite. De la même manière, il faut que nos objectifs, lors de la mise en place du TDD, soient mesurés et bien définis dès le départ. Il pourrait s'agir, par exemple, d'encourager simplement tous les membres de l'équipe à faire du TDD quelques fois dans la semaine. Ainsi, ils peuvent se familiariser petit à petit avec l'outil.</p>

<h3>Ne pas se précipiter, ni se décourager</h3>

<p>D'après mon expérience personnelle, il ne sert à rien de vouloir intégrer l'outil en deux minutes et juger ensuite s'il est adapté ou pas. D'ailleurs, si tout le monde nous jugeait en deux minutes, on aurait certainement toujours une perception pas forcément pertinente ou incomplète de nous. Il est important de prendre le temps nécessaire pour connaître l'outil, le comprendre et bien l'utiliser.</p>

<h3>Ne pas le considérer comme quelque chose en dehors des développements</h3>

<p>Tout comme le refactoring, le TDD doit, selon moi, faire partie de nos développements. Il ne doit donc pas s'agir de quelque chose dont on doit demander la permission mais plus d'une étape intégrante de nos développements. Par conséquent, il faut prendre en compte le temps d'adaptation dans nos éventuels chiffrages, d'où l'importance d'avoir de petits objectifs au début. Une fois le temps d'adaptation passé, il est bien possible que les chiffrages baissent : je pense que le TDD permet d'aller plus vite, pour les raisons évoquées précédémment, et en plus on aura le temps d'adaptation en moins.</p>

<h3>En faire une affaire d'équipe</h3>

<p>Je ne pense pas qu'allouer seulement quelques membres d'une équipe pour tester l'outil soit une bonne idée. Il faut que tous soient concernés au même titre dès le départ. Sinon, je pense que les chances de réussite diminuent considérablement. En effet, si uniquement quelques personnes sont réellement concernées par l'outil, les autres risquent de s'y désintérésser. De plus, si la communication sur l'expérience ne se fait pas idéalement, le temps alloué à celle-ci sera mal utilisé (les résultats peuvent être nuls, certains membres de l'équipe peuvent être découragés et ceux qui ont testé peuvent être déçus). Finalement, on risque de passer à côté d'une belle collaboration entre collègues et donc de meilleurs résultats.</p>

<h3>Avoir une bonne communication au sein de l'équipe</h3>

<p>Il ne faut pas hésiter à en parler entre vous. Les différents points de vue vont enrichir l'expérience. Néanmoins, n'oubliez pas le conseil n°2 : ne vous découragez pas !</p>

<h1>Conclusion</h1>

<p>Le TDD est un outil de développement qui comporte énormément d'avantages. Il n'est pas forcément évident de les voir du premier coup mais il ne faut pas abandonner le navire car le voyage est vraiment superbe ! J'espère que vous avez apprécié cette histoire et qu'elle vous sera utile. A bientôt !</p>
]]></content>
  </entry>
  
</feed>
