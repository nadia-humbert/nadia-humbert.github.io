<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: spring | Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/blog/categories/spring/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2017-04-22T11:27:08+02:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ecrire des tests avec Spring Boot 1.4]]></title>
    <link href="https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/"/>
    <updated>2016-08-08T07:11:29+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4</id>
    <content type="html"><![CDATA[<p>La version 1.4 de Spring Boot est sortie le 28 juillet 2016. Elle contient notamment des évolutions importantes au niveau de l'écriture des tests.<br/>
L'objectif de cet article est de voir comment migrer les tests d'un <em>controller</em> Spring MVC en utilisant les nouvelles fonctionnalités apportées par cette version.</p>

<!-- more -->


<h2>Modification du pom.xml</h2>

<p>Le starter de test de Spring Boot 1.4 embarque désormais les dépendances vers <a href="http://joel-costigliola.github.io/assertj">AssertJ</a>, <a href="https://github.com/skyscreamer/JSONassert">JSONassert</a> et <a href="https://github.com/jayway/JsonPath">JsonPath</a>. Il est donc possible de supprimer l'appel explicite vers ces dépendances dans notre pom, il suffit d'importer le starter :</p>

<pre><code class="xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>

<h2>Configuration du test</h2>

<p>Dans Spring Boot 1.3, il est possible d'écrire un test d'intégration d'un <em>controller</em> avec Spring de la manière suivante :</p>

<pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = DemoApplication.class)
@WebAppConfiguration
public class DemoControllerTest {
    // ...
}
</code></pre>

<p>Le test ci-dessus va charger la classe de configuration Spring Boot <code>DemoApplication</code> à l'intérieur d'un contexte d'application de type <code>WebApplicationContext</code>. Il sera donc possible de <a href="https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers">tester le <em>controller</em> avec MockMvc</a>.</p>

<p>Depuis Spring Boot 1.4, l'annotation <code>@SpringBootTest</code>remplace toutes les annotations existantes pour faire des tests d'intégration avec Spring. De plus, le runner JUnit peut être remplacé par <code>SpringRunner</code> qui a été introduit dans la version 4.3 de Spring. Finalement, il n'est plus nécessaire de fournir explicitement la classe de configuration Spring Boot. En effet, la classe annotée avec <code>@SpringBootApplication</code> sera automatiquement utilisée. Le test devient donc :</p>

<pre><code class="java">@RunWith(SpringRunner.class)
@SpringBootTest
public class DemoControllerTest {
    // ...
}
</code></pre>

<h2>Gestion des mocks</h2>

<p>Pour tester un <em>controller</em> en isolation, il faut l'instancier en mockant ses dépendances (avec <a href="http://mockito.org">Mockito</a> par exemple) et le fournir au builder de <code>MockMvc</code>.</p>

<p>Avec Spring Boot 1.3, il est possible d'écrire ceci :</p>

<pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = DemoApplication.class)
@WebAppConfiguration
public class DemoControllerTest {

    private MockMvc mockMvc;

    @Mock
    private DemoService demoService;

    @InjectMocks
    private DemoController demoController;

    @Before
    public void setUp() {
        Mockito.initMocks(this);
        this.mockMvc = MockMvcBuilders.standaloneSetup(demoController).build();
        Mockito.when(demoService.call()).thenReturn(42);
    }
}
</code></pre>

<p>Spring Boot 1.4 permet de mocker les beans Spring avec Mockito grâce à une annotation spécifique. Ainsi, le bean de l'<code>ApplicationContext</code> est remplacé par un <em>mock</em> et Spring se charge donc de l'injecter dans le <em>controller</em>. Le test devient donc le suivant :</p>

<pre><code class="java">@RunWith(SpringRunner.class)
@SpringBootTest
public class DemoControllerTest {

    private MockMvc mockMvc;

    @MockBean
    private DemoService demoService;

    @Autowired
    private DemoController demoController;

    @Before
    public void setUp() {
        this.mockMvc = MockMvcBuilders.standaloneSetup(demoController).build();
        Mockito.when(demoService.call()).thenReturn(42);
    }
}
</code></pre>

<p>Dans ce test, le contexte d'application est chargé dans son intégralité avec le bean <code>DemoService</code> remplacé par un <em>mock</em>. Le <code>DemoController</code> injecté utilisera donc ce <em>mock</em>.</p>

<h2>Limitation de la configuration chargée</h2>

<p>Dans ce contexte, il n'est pas forcément nécessaire de charger tout le contexte d'application pour tester uniquement le <em>controller</em>.</p>

<p>Spring Boot 1.4 introduit l'annotation <code>@WebMvcTest</code> qui permet de tester spécifiquement des <em>controllers</em> Spring MVC avec <code>MockMvc</code>. Ainsi, seule la configuration Spring MVC sera chargée. Le test précédent peut donc s'écrire de la manière suivante :</p>

<pre><code class="java">@RunWith(SpringRunner.class)
@WebMvcTest(DemoController.class)
public class DemoControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private DemoService demoService;

    @Before
    public void setUp() {
        Mockito.when(demoService.call()).thenReturn(42);
    }
}
</code></pre>

<p><code>MockMvc</code> n'a plus besoin d'être instancié explicitement dans le <em>setup</em>. Grâce à l'annotation <code>@WebMvcTest</code>, l'instance peut être directement injectée dans le test.</p>

<h2>Conclusion</h2>

<p>Les évolutions apportées par Spring Boot 1.4 au niveau des tests permettent de simplifier l'écriture des tests d'intégration. En effet, il n'y a plus qu'une seule annotation à utiliser (<code>@SpringBootTest</code>). De plus, l'intégration de Mockito dans Spring Boot permet de remplacer directement des beans du contexte d'application par des <em>mocks</em>. Finalement, dans le cadre du test d'un <em>controller</em> Spring MVC avec <code>MockMvc</code>, l'annotation <code>@WebMvcTest</code> permet de ne charger que les beans nécessaires à l'exécution des tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Spring MVC Controllers]]></title>
    <link href="https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/"/>
    <updated>2015-10-31T12:54:08+01:00</updated>
    <id>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers</id>
    <content type="html"><![CDATA[<p>Since Spring 3.2 (January, 2013), it is possible to test Spring MVC controllers without an external framework.
The goal of this article is to show how to test Spring MVC controllers using only Spring testing capabilities.</p>

<!-- more -->


<p>To do so, a very simple Spring Boot project will be used as a support. You can find it on <a href="https://github.com/nphumbert/demo-test-spring-mvc">GitHub</a>. The controller to test will first be introduced. Then, explanations will be given on how to test it.</p>

<h2>Controller</h2>

<p>The controller that will be tested is showed below. It permits to do a search in a fruit list.</p>

<pre><code class="java">@Controller
public class ApplicationController {

    @RequestMapping(value = "/fruits", method = RequestMethod.GET)
    public String getFruits(@RequestParam(value = "search", required = false) String search, final Model model) {
        model.addAttribute("fruitBowl", search(search));
        return "fruits";
    }

    private List&lt;String&gt; search(String search) {
        if (StringUtils.isEmpty(search)) {
            return fruitBowl();
        }

        return fruitBowl().stream()
                .filter(fruit -&gt; fruit.startsWith(search))
                .collect(toList());
    }

    private List&lt;String&gt; fruitBowl() {
        return asList("banana", "orange");
    }
}
</code></pre>

<h2>Test</h2>

<p>The test class must be annotated with the following annotations:</p>

<ul>
<li><code>@RunWith(SpringJUnit4ClassRunner.class)</code> to benefit from Spring features in JUnit tests.</li>
<li><code>@SpringApplicationConfiguration(classes = DemoTestSpringMvcApplication.class)</code> to specify the configuration class that will be used during the test.</li>
<li><code>@WebAppConfiguration</code> to indicate that the Spring application context that must be loaded is a <code>WebApplicationContext</code>.</li>
</ul>


<p>The entry point used to perform the tests is the class <code>MockMvc</code>. Thereafter, the usage of this class will be explained.</p>

<h3>Set up</h3>

<p>The set up of the <code>MockMvc</code> class can be done as follows:</p>

<pre><code class="java">@Before
public void setUp() {
    ApplicationController controller = new ApplicationController(); // 1
    this.mockMvc = MockMvcBuilders.standaloneSetup(controller).build(); // 2
}
</code></pre>

<p>First, the controller must be instantiated (<code>1</code>). Then, the mock is initialized using the static method <code>MockMvcBuilders.standaloneSetup()</code> (<code>2</code>). At this point, the mock is ready to test the controller.</p>

<h3>Perform</h3>

<p>The method <code>MockMvc.perform()</code> allows to simulate HTTP requests to the controller. For instance, a GET request is done as follows:</p>

<pre><code class="java">mockMvc.perform(
    get("/fruits") // 1
        .param("search", "ban") // 2
);
</code></pre>

<p>The class <code>MockMvcRequestBuilders</code> provides static methods, such as <code>get</code> or <code>post</code>, to simulate HTTP requests on a particular endpoint of the controller (<code>1</code>). HTTP parameters can be added fluently to the request (<code>2</code>).</p>

<p>Furthermore, other static methods are provided by the <code>MockMvcRequestBuilders</code> class:</p>

<ul>
<li>HTTP verbs like <code>delete</code>, <code>put</code> or <code>patch</code>.</li>
<li><code>fileUpload</code> to upload binary files.</li>
<li>Others (<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html">documentation</a>).</li>
</ul>


<h3>Assert</h3>

<p>MockMvc permits to add assertions to the controller&rsquo;s response.</p>

<pre><code class="java">mockMvc.perform(get("/fruits")
    .param("search", "ban"))
    .andExpect(status().isOk()) // 1
    .andExpect(view().name("fruits")) // 2
    .andExpect(model().attribute("fruitBowl", contains("banana"))); // 3
</code></pre>

<p>Assertions are done with the <code>andExpect()</code> method. The class <code>MockMvcResultMatchers</code> provides static methods to do assertions on the HTTP status (<code>1</code>), the view asked by the controller (<code>2</code>) and on the model completed by the controller (<code>3</code>).</p>

<h2>Conclusion</h2>

<p>The Spring test framework is a very powerful, complete and simple way to test Spring MVC controllers. Its fluent API allows to write elegant and yet precise tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exposer des ressources statiques avec Spring MVC]]></title>
    <link href="https://nphumbert.github.io/blog/2015/09/18/exposer-des-ressources-statiques-avec-spring-mvc/"/>
    <updated>2015-09-18T13:59:06+02:00</updated>
    <id>https://nphumbert.github.io/blog/2015/09/18/exposer-des-ressources-statiques-avec-spring-mvc</id>
    <content type="html"><![CDATA[<p>Il est souvent nécessaire d'exposer des ressources statiques telles que des images, des fichiers pdf, des vidéos, etc. dans une application web.
Ces fichiers sont stockés sur le serveur et ne sont donc pas accessibles à l'utilisateur via une URL.</p>

<p>L'objectif de cet article est d'exposer des fichiers stockés sur le serveur via une URL dans une application Spring MVC.</p>

<!-- more -->


<h2>Surcharge de la configuration web</h2>

<p>Pour exposer des ressources statiques, il faut surcharger la configuration web de Spring MVC.
Pour ce faire, une classe de configuration qui hérite de <code>WebMvcConfigurerAdapter</code> doit être implémentée.
Plus précisément, il est nécessaire de surcharger la méthode <code>addResourceHandlers()</code>.</p>

<pre><code class="java">@Configuration
public class WebConfig extends WebMvcConfigurerAdapter {

    private static final String DIRECTORY = "/path/to/server/disk/resources";

    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/resources/**") // 1
                .addResourceLocations("file:///" + DIRECTORY + "/"); // 2
    }
}
</code></pre>

<p>La méthode de configuration fournit un objet de type <code>ResourceHandlerRegistry</code> qui permet d'associer une URL (<code>1</code>) à un dossier (<code>2</code>). Ainsi, l'URL <code>http://example.com/resources/file.pdf</code> sera associée au fichier <code>/path/to/server/disk/resources/file.pdf</code>.</p>

<h2>Conclusion</h2>

<p>Pour conclure, Spring permet d'exposer des ressources statiques via des URL de manière simple et rapide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transférer des paramètres à travers un redirect avec Spring MVC]]></title>
    <link href="https://nphumbert.github.io/blog/2015/07/25/transferer-des-parametres-a-travers-un-redirect-avec-spring-mvc/"/>
    <updated>2015-07-25T12:06:04+02:00</updated>
    <id>https://nphumbert.github.io/blog/2015/07/25/transferer-des-parametres-a-travers-un-redirect-avec-spring-mvc</id>
    <content type="html"><![CDATA[<p>Dans une application web, il est courant d'effectuer une redirection après la soumission d'un formulaire. Cette redirection permet notamment de rendre l'url <em>bookmarkable</em> et d'empêcher l'utilisateur de resoumettre le formulaire par erreur (suite à un <em>refresh</em>, par exemple).</p>

<p>Il peut être intéressant de passer des paramètres à travers ce redirect. Par exemple, pour indiquer à l'utilisateur que son formulaire a bien été soumis. Pour ce faire, il est possible d'ajouter des paramètres directement dans l'url : <code>redirect:/path/to/endpoint?formSubmitted=true</code>.
Cette solution n'est pas toujours adpatée pour des raisons de confidentialité, de taille d'url ou simplement d'esthétique.</p>

<p>L'objectif de cet article est de démontrer comment transférer des paramètres à travers une redirection avec Spring MVC en utilisant des <em>flash attributes</em>. L'exemple utilisé consistera en un formulaire qui permet d'envoyer un nom. Ce nom s'affichera ensuite une fois le formulaire soumis.</p>

<!-- more -->


<h2>Traitement du formulaire</h2>

<p>Le code suivant décrit la gestion de la soumission du formulaire par un <em>controller</em> Spring MVC :</p>

<pre><code class="java">@RequestMapping(value = "/", method = RequestMethod.POST)
public ModelAndView post(@RequestParam("name") String name, RedirectAttributes redirectAttributes) {
   redirectAttributes.addFlashAttribute("name", name); // 1
   return new ModelAndView("redirect:/"); // 2
}
</code></pre>

<p>Afin d'ajouter un <em>flash attribute</em> à la redirection, il faut utiliser une instance de la classe <code>RedirectAttributes</code> (<code>1</code>). Cette instance est automatiquement injectée par Spring lorsqu'elle est déclarée dans la méthode du <em>controller</em>.</p>

<p>Une fois le <em>flash attribute</em> ajouté, il est possible de faire la redirection (<code>2</code>).</p>

<h2>Traitement de l'affichage</h2>

<p>Le code suivant décrit le traitement de la requête <code>GET</code> par un <em>controller</em> Spring MVC :</p>

<pre><code class="java">@RequestMapping(value = "/", method = RequestMethod.GET)
public ModelAndView get(HttpServletRequest request) {

   ModelAndView modelAndView = new ModelAndView("default");

   Map&lt;String, ?&gt; flashMap = RequestContextUtils.getInputFlashMap(request); // 1
   if (!CollectionUtils.isEmpty(flashMap)) {
      modelAndView.addObject("name", flashMap.get("name")); // 2
   }

   return modelAndView;
}
</code></pre>

<p>Pour récupérer la <em>map</em> contenant les <em>flash attributes</em>, il faut utiliser la méthode <code>RequestContextUtils.getInputFlashMap</code> sur la requête <code>HttpServletRequest</code> (<code>1</code>). Cette requête est également injectée par Spring lorsqu'elle est déclarée dans la méthode du <em>controller</em>.</p>

<p>La valeur de l'attribut peut alors être récupérée depuis la <em>map</em> pour être utilisée, ici dans le <code>ModelAndView</code> (<code>2</code>).</p>

<p>Ci-dessous un exemple est donné pour afficher conditionnellement cet attribut dans un template <a href="http://www.thymeleaf.org/">Thymeleaf</a> :</p>

<p>```java</p>

<div class="alert alert-success" role="alert" th:if="${not #strings.isEmpty(name)}">
   Hello, <span th:text="${name}">John Doe</span>!
</div>


<p>```</p>

<h2>Conclusion</h2>

<p>Les <em>flash attributes</em> de Spring MVC peuvent être utilisés pour transférer des paramètres à travers une redirection. Ce mécanisme permet notamment d'implémenter très facilement une confirmation de soumission de formulaire à l'utilisateur.</p>

<p>Le code source du projet de démonstration peut être trouvé sur <a href="https://github.com/nphumbert/demo-flash-attributes">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Security et Spring Boot]]></title>
    <link href="https://nphumbert.github.io/blog/2015/06/21/spring-security-et-spring-boot/"/>
    <updated>2015-06-21T11:51:37+02:00</updated>
    <id>https://nphumbert.github.io/blog/2015/06/21/spring-security-et-spring-boot</id>
    <content type="html"><![CDATA[<p>Depuis Spring 3.1, il est possible de configurer Spring en Java.
La configuration Java de Spring Security est supportée depuis sa version 3.2 (<a href="http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc">source</a>).</p>

<p>L'objectif de cet article est de montrer comment configurer Spring Security en Java config, dans une application Spring Boot, avec une base de données qui contient les utilisateurs et leur mot de passe hashé. De plus, une authentification HTTP basic sera mise en place.</p>

<!-- more -->


<h2>Créer la classe de configuration</h2>

<p>La classe Java qui doit gérer la configuration doit être munie de l'annotation <code>@Configuration</code> définie par Spring. De plus, elle doit étendre la classe <code>WebSecurityConfigurerAdapter</code>. Spring Boot mettant en place une configuration par défaut, il faut donc finalement utiliser l'annotation <code>@Order</code> afin d'indiquer que la nouvelle configuration doit être utilisée.</p>

<pre><code class="java">@Configuration
@Order(SecurityProperties.ACCESS_OVERRIDE_ORDER)
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

}
</code></pre>

<h2>Configurer Spring Security pour utiliser une base de données</h2>

<p>Pour indiquer à Spring la méthode d'authentification, il faut redéfinir la méthode <code>configure(AuthenticationManagerBuilder)</code>. Spring Security offre une API <em>fluent</em> pour configurer une authentification à partir de l'objet <code>AuthenticationManagerBuilder</code>.</p>

<p>Le code ci-dessous permet de configurer l'authentification en utilisant une base de données.</p>

<pre><code class="java">@Configuration
@Order(SecurityProperties.ACCESS_OVERRIDE_ORDER)
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {

    @Autowired
    private DataSource dataSource; // 3

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.jdbcAuthentication() // 1
                .passwordEncoder(new ShaPasswordEncoder(256)) // 6
                .dataSource(dataSource) // 2
                .usersByUsernameQuery("SELECT login, password, active FROM user WHERE login=?") // 4
                .authoritiesByUsernameQuery("SELECT login, role FROM user WHERE login=?"); // 5
    }
}
</code></pre>

<p>Dans le cadre de cet article, il s'agit d'une authentification JDBC (<code>1</code>). La base de données à laquelle Spring doit accéder est accessible via une <code>dataSource</code> (<code>2</code>). Elle a été configurée dans l'application (typiquement dans <code>application.properties</code>) et peut donc être directement injectée par Spring grâce à l'annotation <code>@Autowired</code> (<code>3</code>).</p>

<p>La requête pour récupérer un utilisateur à partir de son login est fournie via la méthode <code>usersByUsernameQuery</code> (<code>4</code>) et celle pour récupérer les rôles d'un utilisateur à partir de son login via la méthode <code>authoritiesByUsernameQuery</code> (<code>5</code>). Un utilisateur est caractérisé par un login, un mot de passe et un booléen indiquant s'il est actif. Un rôle est une chaîne de caractères qui correspondra à un profil ayant un ensemble de droits.</p>

<p>Finalement, il est indiqué que les mots de passe dans la base sont hashés à l'aide de l'agorithme SHA-256 (<code>6</code>).</p>

<h2>Configuration de l'authentification HTTP basic</h2>

<p>La méthode d'authentification <a href="https://fr.wikipedia.org/wiki/Authentification_HTTP#M.C3.A9thode_.C2.AB_Basic_.C2.BB">HTTP basic</a> est une méthode d'authentification simple en HTTP et sera utilisée dans cet article.
Cette méthode est indiquée en surchargeant la méthode <code>configure(HTTPSecurity)</code>. De même que dans la section précédente, Spring Security offre une API <em>fluent</em> pour configurer une authentification HTTP à partir de l'objet <code>HTTPSecurity</code>.</p>

<p>Le code ci-dessous permet de configurer l'authentification HTTP basic.</p>

<pre><code class="java">@Override
protected void configure(HttpSecurity http) throws Exception {
    http.httpBasic() // 1
            .and()
                .authorizeRequests()
                    .antMatchers("/", "/css/**", "/js/**").permitAll() // 2
                    .anyRequest().authenticated() // 3
            .and()
                .formLogin()
                   .loginPage("/login").permitAll() // 4
            .and()
               .logout()
                   .logoutUrl("/logout") // 5
                   .logoutSuccessUrl("/"); // 6
}
</code></pre>

<p>La méthode d'authentification HTTP est précisée avec la méthode <code>httpBasic</code> (<code>1</code>). La racine, les fichiers CSS et javascript sont accessibles à tout le monde (<code>2</code>) tandis que toutes les autres requêtes nécessitent d'être authentifié (<code>3</code>).</p>

<p>L'URL de login est spécifiée via la méthode <code>loginPage</code> (<code>4</code>) et celle de logout via la méthode <code>logoutUrl</code> (<code>5</code>). Après la déconnexion, l'utilisateur est redirigé vers la racine (<code>6</code>).</p>

<p>Le code suivant illustre un formulaire de login et un formulaire de logout.</p>

<p>```html</p>

<!-- Formulaire de login -->


<p><form action="/login" method="post">
    <input type="text" name="username" />
    <input type="password" name="password" />
    <button type="submit">Login</button>
</form></p>

<!-- Formulaire de logout -->


<p><form action="/logout" method="post">
    <button type="submit">Logout</button>
</form>
```</p>

<h2>Conclusion</h2>

<p>La configuration de Spring Security en Java config est relativement simple et directe. Elle permet de contrôler et de centraliser les accès à toutes les URL de l'application. De plus, il est possible de définir très simplement les URL de login et de logout, Spring Security se chargeant des traitements des requêtes.</p>
]]></content>
  </entry>
  
</feed>
