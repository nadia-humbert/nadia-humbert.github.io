<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2017-07-24T08:43:32+02:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot]]></title>
    <link href="https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix/"/>
    <updated>2017-07-23T13:33:38+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix</id>
    <content type="html"><![CDATA[<p>In a microservices architecture, several things can go wrong. A middleware, the network or the service you want to contact can be down. In this world of uncertainty, you have to anticipate problems in order not to break the entire chain and throw an error to the end user when you could offer a partially degraded service instead.</p>

<p>The goal of this article is to show how to implement the circuit breaker pattern using Hystrix, Feign Client and Spring Boot.</p>

<!-- more -->


<h2>Feign Client Crash Course</h2>

<p><a href="https://github.com/OpenFeign/feign">Feign</a> is an HTTP client created by Netflix to make HTTP communications easier. It is integrated to Spring Boot with the <code>spring-cloud-starter-feign</code> starter.</p>

<p>To create a client to consume an HTTP service, an interface annotated with <code>@FeignClient</code> must be created. Endpoints can be declared in this interface using an API that is very close to the Spring MVC API. The <code>@EnableFeignClients</code> annotation must also be added to a Spring Configuration class.</p>

<pre><code class="java">@Configuration
@EnableFeignClients
public class FeignConfiguration {

}
</code></pre>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos")
public interface VideoClient {

    @PostMapping(value = "/api/videos/suggest")
    List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<p>An instance of <code>VideoClient</code> is automagically injected into the Spring application context and can be autowired and used throughout the application. Moreover, if the <code>videos</code> microservice is registred to the same discovery service as the current microservice, there is no need for an URL as it will be retrieved for you based on the <code>name</code>.</p>

<p>If the <code>videos</code> service, a middleware or the network happens to be down or overloaded, the <code>suggest</code> method will throw a <code>FeignException</code> that will be propagated throughout the stack if not caught.</p>

<h2>Create a Fallback Implementation</h2>

<p>Fortunately, Spring Cloud comes with a solution to this problem: a circuit breaker. In this article, we will use <a href="https://github.com/Netflix/Hystrix">Hystrix</a>. It is also created by Netflix and also integrated to Spring Boot using the <code>spring-cloud-starter-hystrix</code> starter.</p>

<p>The idea is to create an implementation of the <code>VideoClient</code> and mark it as the default behaviour if <code>videos</code> is unreachable or overloaded. Like a lot of other Spring features, it is enabled using an annotation: <code>@EnableCircuitBreaker</code>.</p>

<pre><code class="java">@Configuration
@EnableFeignClients
@EnableCircuitBreaker
public class FeignConfiguration {

}
</code></pre>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos", fallback = VideoClientFallback.class)
public interface VideoClient {

    @PostMapping(value = "/api/videos/suggest")
    List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<pre><code class="java">@Component
public class VideoClientFallback implements VideoClient {

    @Override
    public List&lt;Suggestion&gt; suggest(ViewingHistory history) {
      // Degraded service: no suggestion to offer
      return new ArrayList&lt;&gt;();
    }

}
</code></pre>

<p>A configuration property has to be added to the <code>application.yml</code> file of the Spring Boot application to tell Feign to enable Hystrix.</p>

<pre><code class="yml">feign:
    hystrix:
        enabled: true
</code></pre>

<p>Voila! Every time the remote service will be unavailable, the <code>suggest</code> method of the <code>VideoClientFallback</code> will be called and the end user will not get an error violently thrown at her.</p>

<h2>Keep Track of the Source Error</h2>

<p>With this setup, the fallback will be called regardless of the initial error that will be swallowed. If you want to retrieve this error and do something with it, you can use a <code>FallbackFactory</code>.</p>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos", fallbackFactory = VideoClientFallbackFactory.class)
public interface VideoClient {

  @PostMapping(value = "/api/videos/suggest")
  List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<pre><code class="java">@Component
public class VideoClientFallbackFactory implements FallbackFactory&lt;VideoClient&gt; {

    @Override
    public VideoClient create(Throwable throwable) {
        return new VideoClientFallback(throwable);
    }

}
</code></pre>

<pre><code class="java">public class VideoClientFallback implements VideoClient {

    private final Throwable cause;

    public VideoClientFallback(Throwable cause) {
      this.cause = cause;
    }

    @Override
    public List&lt;Suggestion&gt; suggest(ViewingHistory history) {
        if (cause instanceof FeignException &amp;&amp; ((FeignException) cause).status() == 404) {
            // Treat the HTTP 404 status
        }

        return new ArrayList&lt;&gt;();
    }

}
</code></pre>

<h2>Conclusion</h2>

<p>Microservices foster low coupling between components and resiliency. Hence, it would be sad to throw an error every time a service or a middleware is down. The circuit breaker pattern explained in this article allows you to ensure the continuity of service, even if it has to be offered in a degraded manner. As always, Spring Boot is a great help to setup this mechanism very easily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Conditional Structures with Map]]></title>
    <link href="https://nphumbert.github.io/blog/2017/07/20/refactoring-conditional-with-map/"/>
    <updated>2017-07-20T16:32:15+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/07/20/refactoring-conditional-with-map</id>
    <content type="html"><![CDATA[<p>When working on already existing codebases, I often encounter pieces of code that look like this:</p>

<pre><code class="java">public class Day {
  public void start(Weather weather) {
    switch(weather) {
      case RAINY:
          takeAnUmbrella();
          break;
      case SUNNY:
          takeAHat();
          break;
      case STORMY:
          stayHome();
          break;
      default:
          doNothing();
          break;
    }
  }
}
</code></pre>

<p>Basically, depending on the weather, an action has to be taken. This kind of code is pretty hard to test and to maintain. The goal of this article is to refactor it using a <code>Map</code>.</p>

<!-- more -->


<h2>What is the Problem?</h2>

<p>Using conditional structures like this might be a sign of bad design. Indeed, this code tends to grow indefinitely as new cases have to be handled and the same code has to be modified over and over. A time will come when the code will be so bloated that it will be very hard to add new behaviour. This is a violation of the <em>Open Closed Principle</em> which stipulates that the code should be open for extension but closed for modification: you should be able to add new behaviour to your code without modifying it.</p>

<h2>Transform the Imperative Algorithm into Data</h2>

<p>By analyzing this code, it becomes clear that this algorithm is no more than a <code>Map</code>: for a certain weather (the key), a piece of code has to be executed (the value). A first refactoring can be done to make this conceptual <code>Map</code> concrete:</p>

<pre><code class="java">public class Day {

  private final Map&lt;Weather, Runnable&gt; startOfTheDayActions = new HashMap&lt;&gt;();

  public Day() {
    startOfTheDayActions.put(Weather.RAINY, this::takeAnUmbrella);
    startOfTheDayActions.put(Weather.SUNNY, this::takeAHat);
    startOfTheDayActions.put(Weather.STORMY, this::stayHome);
  }

  public void start(Weather weather) {
    startOfTheDayActions.getOrDefault(weather, this::doNothing).run();
  }
}
</code></pre>

<p>This is a first step and the code is already much clearer. Now, the mapping between the weather and the action to perform is explicit and the <code>start</code> method will not have to be modified very often. When a new case must be handled, it&rsquo;s just a new entry in the <code>Map</code>.</p>

<p>Nonetheless, this do not solve all problems. The class still has to be modified to add a new entry. To go further, the <code>Map</code> can be passed as a parameter of the constructor.</p>

<pre><code class="java">public class Day {

  private final Map&lt;Weather, Runnable&gt; startOfTheDayActions = new HashMap&lt;&gt;();

  public Day(Map&lt;Weather, Runnable&gt; startOfTheDayActions) {
    this.startOfTheDayActions = startOfTheDayActions;
  }

  public void start(Weather weather) {
    startOfTheDayActions.getOrDefault(weather, this::doNothing).run();
  }
}
</code></pre>

<p>Now the only responsibility of the class is to use the mapping to perform the correct action. This mapping is now the responsibility of another class.</p>

<h2>Note about Spring Framework</h2>

<p>If you are using Spring Framework and the <code>Day</code> class is a <code>@Component</code>, you can simply inject the <code>Map</code> as any other dependency.</p>

<pre><code class="java">@Component
public class Day {

  private final Map&lt;Weather, Runnable&gt; startOfTheDayActions = new HashMap&lt;&gt;();

  public Day(@Qualifier("startOfTheDayActions") Map&lt;Weather, Runnable&gt; startOfTheDayActions) {
    this.startOfTheDayActions = startOfTheDayActions;
  }

  public void start(Weather weather) {
    startOfTheDayActions.getOrDefault(weather, this::doNothing).run();
  }
}
</code></pre>

<pre><code class="java">@Configuration
public class ActionConfig {

  @Bean("startOfTheDayActions")
  public Map&lt;Weather, Runnable&gt; startOfTheDayActions() {
    Map&lt;Weather, Runnable&gt; actions = new HashMap&lt;&gt;();
    // Create mapping
    return actions;
  }
}
</code></pre>

<h2>Conclusion</h2>

<p>This refactoring is very easy to do but it can reduce the complexity of a method in a very efficient way. I think that the code should reveal intention and should not be bloated with conditional structures when it is not necessary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gérer les dépendances circulaires]]></title>
    <link href="https://nphumbert.github.io/blog/2016/12/17/gerer-les-dependances-circulaires/"/>
    <updated>2016-12-17T18:31:18+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/12/17/gerer-les-dependances-circulaires</id>
    <content type="html"><![CDATA[<p>Durant mon travail, j'ai rencontré des dépendances circulaires dans une application sur laquelle je suis intervenue. Dans sa plus simple forme, il s'agit de deux classes qui dépendent l'une de l'autre.
Ceci est, selon moi, un problème pour plusieurs raisons. L'objectif de cet article est de montrer ce qu'est une dépendance circulaire, en quoi cela peut poser problème, et comment les éliminer.</p>

<!-- more -->


<h2>Cas d'étude</h2>

<p>Le code ci-dessous présente un cas simple de dépendance circulaire.</p>

<pre><code class="java">class A {
  private final B b;

  A(B b) {
    this.b = b;
  }

  void doSomething() {
    b.doSomethingGreat();
  }

  void doSomethingAwesome() {
    System.out.println("Doing something awesome!");
  }
}

class B {
  private A a;

  void setA(A a) {
    this.a = a;
  }

  void doSomething() {
      a.doSomethingAwesome();
  }

  void doSomethingGreat() {
    System.out.println("Doing something great!");
  }
}
</code></pre>

<h2>Problèmes associés</h2>

<h3>Instanciation de b</h3>

<p>Le code suivant illustre l'utilisation de <code>B</code> :</p>

<pre><code class="java">B b = new B(); // 1
A a = new A(b);
b.setA(a); // 2
b.doSomething(); // 3
</code></pre>

<p>Nous pouvons observer que la classe <code>B</code> ne peut pas être utilisée directement après son instanciation (<code>1</code>). Elle est dans un état incohérent car il est impératif de setter l'instance de <code>A</code> (<code>2</code>) afin de pouvoir l'utiliser. Sinon, une exception de type <code>NullPointerException</code> sera remontée lors de l'appel de la méthode <code>doSomething</code> (<code>3</code>). Cette opération (<code>2</code>) peut facilement être oubliée. De plus, si l'appel de la méthode (<code>3</code>) intervient bien plus tard, cet oubli peut ne pas être détecté immédiatemment.</p>

<h3>Immuabilité de B</h3>

<p>Un autre inconvénient est que <code>B</code> n'est pas immuable. En effet, une fois instancié, il est possible de modifier son état en appelant autant de fois que l'on veut la méthode <code>setA</code>.
Pour rendre <code>B</code> immuable, il faudrait supprimer le setter, rendre l'attribut <code>a</code> <code>final</code> et le passer en paramètre du constructeur. Ceci est impossible actuellement à cause de la dépendance circulaire.</p>

<h3>Fort couplage</h3>

<p>Le fort couplage introduit entre les deux classes peut être un signe qu'il y a un problème de séparation des responsabilités. Il est, par exemple, possible que les deux classes partagent la même responsabilité et qu'elles puissent donc être fusionnées. Une autre possibilité est qu'une troisième responsabilité soit présente et qu'elle doive être extraite dans une classe séparée.</p>

<h2>Solutions envisageables</h2>

<p>Dans le contexte de mon travail, les solutions que j'ai dû adopter étaient relativement simples. Ces solutions seront décrites par la suite.</p>

<h3>Déplacer le comportement dans une des deux classes</h3>

<p>Il est possible que le comportement de <code>doSomethingAwesome</code> soit lié uniquement à la classe <code>B</code>. Dans ce cas, il est possible de déplacer cette méthode dans <code>B</code> :</p>

<pre><code class="java">class A {
  private final B b;

  A(B b) {
    this.b = b;
  }

  void doSomething() {
    b.doSomethingGreat();
  }

  void doSomethingAwesome() {
    b.doSomethingAwesome();
  }
}

class B {
  void doSomething() {
      doSomethingAwesome();
  }

  void doSomethingGreat() {
    System.out.println("Doing something great!");
  }

  void doSomethingAwesome() {
    System.out.println("Doing something awesome!");
  }
}
</code></pre>

<p>Il n'y a donc plus de dépendance circulaire car <code>B</code> ne dépend plus de <code>A</code>. Le code est ainsi plus SOLID car la classe <code>A</code> n'a plus de responsabilités qui ne lui appartiennent pas.</p>

<p>Le code ci-dessus a été écrit de manière à conserver l'API de <code>A</code>. La méthode <code>doSomethingAwesome</code> de <code>A</code> pourrait donc être supprimée si elle n'est désormais plus appelée.</p>

<h3>Créer une nouvelle classe</h3>

<p>Si la méthode <code>doSomethingAwesome</code> n'est une responsabilité ni de <code>A</code> ni de <code>B</code>, elle doit être extraite dans une classe séparée :</p>

<pre><code class="java">class Awesome {
  void doSomethingAwesome() {
    System.out.println("Doing something awesome!");
  }
}

class A {
  private final B b;
  private final Awesome awesome;

  A(B b, Awesome awesome) {
    this.b = b;
    this.awesome = awesome;
  }

  void doSomething() {
    b.doSomethingGreat();
  }

  void doSomethingAwesome() {
    awesome.doSomethingAwesome();
  }
}

class B {
  private final Awesome awesome;

  B(Awesome awesome) {
    this.awesome = awesome;
  }

  void doSomething() {
    awesome.doSomethingAwesome();
  }

  void doSomethingGreat() {
    System.out.println("Doing something great!");
  }
}
</code></pre>

<h2>Conclusion</h2>

<p>Les dépendances circulaires peuvent être un signe de mauvais design. En effet, elles introduisent un fort couplage, provoquent l'instanciation d'objets incohérents et empêchent l'immuabilité de ceux-ci. Il est donc nécessaire de les analyser afin de bien comprendre leur origine et de les corriger si besoin. Dans cet article, deux manières de faire ont été présentées.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pourquoi ne pas utiliser l'héritage pour éviter la duplication de code ?]]></title>
    <link href="https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code/"/>
    <updated>2016-01-24T11:38:41+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code</id>
    <content type="html"><![CDATA[<p>L'héritage est une composante très importante des langages orientés objet tels que Java. Cependant, il doit être utilisé à bon escient afin de respecter les bonnes pratiques de programmation.</p>

<p>Il m'est arrivé de rencontrer des cas où l'héritage était utilisé afin de ne pas dupliquer du code. Le but de cet article est d'illustrer une telle utilisation, d'analyser ses inconvénients et de montrer une manière possible de la corriger.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Un projet d'illustration a été créé afin de servir de support pour cet article. Il est disponible sur <a href="https://github.com/nphumbert/demo-inappropriate-inheritance">GitHub</a>. Ce projet contient deux branches :</p>

<ul>
<li><code>inappropriate-inheritance</code> : contient l'utilisation inappropriée de l'héritage.</li>
<li><code>dependency</code> : contient une proposition de correction en utilisant une dépendance.</li>
</ul>


<p>Il s'agit de deux <em>controllers</em> Spring MVC qui doivent hasher un texte. Dans le cas de l'utilisation inappropriée de l'héritage, le code d'un des <em>controllers</em> est le suivant :</p>

<pre><code class="java">@RestController
public class ProfileController extends BaseController {

    @RequestMapping(value = "/profile", method = RequestMethod.GET)
    public String profile() {
        return "profile: " + hash("profile");
    }
}
</code></pre>

<p>Ce <em>controller</em> hérite d'une classe commune qui contient la méthode <code>hash</code> :</p>

<pre><code class="java">public abstract class BaseController {
    protected String hash(String value) {
        // ...
    }
}
</code></pre>

<h2>Pourquoi n'est-il pas correct d'utiliser l'héritage ici ?</h2>

<h3>Non respect de la programmation orientée objet (POO)</h3>

<p>Dans ce code, la mécanique de la POO est respectée mais pas sa sémantique. En effet, la classe <code>BaseController</code> n'a pas de raison d'être. Elle ne correspond à aucun concept et ne sert qu'à contenir du code partagé entre les <em>controllers</em>. Ce genre de classe possède souvent un nom flou et générique, ce qui est un signe que le concept associé est mal défini, voire inexistant.</p>

<h3>Difficulté à tester</h3>

<p>La capacité du code à être testé n'est pas une fin en soi. Cependant, un code difficile à tester est un <em>smell</em> qui indique le plus souvent un problème de conception.</p>

<p>Ici, il est obligatoire de passer par un <em>set up</em> assez lourd pour tester en isolation le <em>controller</em>. Une classe privée héritant du <em>controller</em> est créée afin de surcharger la méthode <code>hash</code> et de fixer la valeur de retour. Les tests portent donc sur cette classe au lieu de porter sur le <em>controller</em> initial.</p>

<pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = InappropriateInheritanceApplication.class)
@WebAppConfiguration
public class ProfileControllerTest {

    public static final String HASH = "hash";

    private class TestableProfileController extends ProfileController {

        @Override
        protected String hash(String value) {
            return HASH;
        }
    }

    private MockMvc mockMvc;

    @Before
    public void setUp() {
        ProfileController controller = new TestableProfileController();
        this.mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
    }

    @Test
    public void should_get_hash_when_get_profile() throws Exception {
        // when
        String contentAsString = mockMvc.perform(get("/profile"))
                .andExpect(status().isOk())
                .andReturn().getResponse().getContentAsString();

        // then
        assertThat(contentAsString, is("profile: " + HASH));
    }
}
</code></pre>

<p>La complexité du <em>set up</em> est bien trop importante par rapport au code à tester qui est relativement simple.</p>

<h3>Fort couplage</h3>

<p>L'héritage introduit un fort couplage entre les classes. En effet, tous les <em>controllers</em> doivent hériter de <code>BaseController</code> pour bénéficier de la méthode <code>hash</code>. Ceci implique qu'ils doivent avoir accès à cette classe (soit être dans le même projet, soit avoir une dépendance vers sa librairie).</p>

<p>De plus, l'héritage multiple étant interdit en Java, les <em>controllers</em> ne peuvent pas hériter d'une autre classe qui serait appropriée.</p>

<p>Finalement, si une autre classe avait besoin de la méthode <code>hash</code>, elle devrait forcément hériter de <code>BaseController</code> (ce qui n'a pas de sens s'il ne s'agit pas d'un <em>controller</em>) ou alors dupliquer le code. Ce problème met en évidence le fait que la notion de hashage n'a aucun rapport avec la notion de <em>controller</em>.</p>

<h3>Difficulté à maintenir</h3>

<p>Le couplage fort décrit précédemment rend le code difficile à maintenir. Un changement du besoin entraînerait une modification du code à un endroit où on ne s'y attend pas. Par ailleurs, il pourrait y avoir des effets de bord inattendus sur le reste du code.</p>

<h2>Comment peut-on corriger ce code ?</h2>

<p>La solution proposée pour corriger ce code est d'extraire la méthode de <code>hash</code> dans une dépendance qui sera injectée dans les <em>controllers</em>.</p>

<p>Tout d'abord, une interface <code>HashProvider</code> est créée et implémentée.</p>

<pre><code class="java">public interface HashProvider {
    String hash(String text);
}
</code></pre>

<pre><code class="java">@Component
public class Sha256HashProvider implements HashProvider {

    @Override
    public String hash(String value) {
        // ...
    }
}
</code></pre>

<p>Cette implémentation peut alors être injectée dans le <em>controller</em> afin d'être utilisée.</p>

<pre><code class="java">@RestController
public class ProfileController {

    private final HashProvider hashProvider;

    @Autowired
    public ProfileController(HashProvider hashProvider) {
        this.hashProvider = hashProvider;
    }

    @RequestMapping(value = "/profile", method = RequestMethod.GET)
    public String profile() {
        return "profile: " + hashProvider.hash("profile");
    }
}
</code></pre>

<p>Le <em>set up</em> de test de ce <em>controller</em> s'en trouve simplifié car il n'y a plus qu'à <em>mocker</em> l'interface.</p>

<pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = InappropriateInheritanceApplication.class)
@WebAppConfiguration
public class ProfileControllerTest {

    private MockMvc mockMvc;
    private HashProvider hashProvider;

    @Before
    public void setUp() {
        hashProvider = mock(HashProvider.class);
        ProfileController controller = new ProfileController(hashProvider);
        this.mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
    }

    @Test
    public void should_get_hash_when_get_profile() throws Exception {
        // given
        when(hashProvider.hash("profile")).thenReturn("hash");

        // when
        String contentAsString = mockMvc.perform(get("/profile"))
                .andExpect(status().isOk())
                .andReturn().getResponse().getContentAsString();

        // then
        assertThat(contentAsString, is("profile: hash"));
    }
}
</code></pre>

<p>Finalement, la logique de hashage est totalement découplée de celle du <em>controller</em>. Ceci rend le code plus simple à maintenir car si le besoin change, il suffit de modifier l'implémentation de <code>HashProvider</code> ou d'en ajouter une nouvelle. Ainsi, le comportement du <em>controller</em> est modifié sans que son code ne change.</p>

<h2>Conclusion</h2>

<p>Il est nécessaire de faire attention à ne pas abuser de l'héritage. Dans cet article, il a été montré qu'il n'est pas approprié pour éviter la duplication de code. Dans ce cas, il est préférable d'utiliser une interface dont une implémentation sera injectée. Ceci a pour principal avantage de rendre le code plus simple et facile à maintenir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Spring MVC Controllers]]></title>
    <link href="https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/"/>
    <updated>2015-10-31T12:54:08+01:00</updated>
    <id>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers</id>
    <content type="html"><![CDATA[<p>Since Spring 3.2 (January, 2013), it is possible to test Spring MVC controllers without an external framework.
The goal of this article is to show how to test Spring MVC controllers using only Spring testing capabilities.</p>

<!-- more -->


<p>To do so, a very simple Spring Boot project will be used as a support. You can find it on <a href="https://github.com/nphumbert/demo-test-spring-mvc">GitHub</a>. The controller to test will first be introduced. Then, explanations will be given on how to test it.</p>

<h2>Controller</h2>

<p>The controller that will be tested is showed below. It permits to do a search in a fruit list.</p>

<pre><code class="java">@Controller
public class ApplicationController {

    @RequestMapping(value = "/fruits", method = RequestMethod.GET)
    public String getFruits(@RequestParam(value = "search", required = false) String search, final Model model) {
        model.addAttribute("fruitBowl", search(search));
        return "fruits";
    }

    private List&lt;String&gt; search(String search) {
        if (StringUtils.isEmpty(search)) {
            return fruitBowl();
        }

        return fruitBowl().stream()
                .filter(fruit -&gt; fruit.startsWith(search))
                .collect(toList());
    }

    private List&lt;String&gt; fruitBowl() {
        return asList("banana", "orange");
    }
}
</code></pre>

<h2>Test</h2>

<p>The test class must be annotated with the following annotations:</p>

<ul>
<li><code>@RunWith(SpringJUnit4ClassRunner.class)</code> to benefit from Spring features in JUnit tests.</li>
<li><code>@SpringApplicationConfiguration(classes = DemoTestSpringMvcApplication.class)</code> to specify the configuration class that will be used during the test.</li>
<li><code>@WebAppConfiguration</code> to indicate that the Spring application context that must be loaded is a <code>WebApplicationContext</code>.</li>
</ul>


<p>The entry point used to perform the tests is the class <code>MockMvc</code>. Thereafter, the usage of this class will be explained.</p>

<h3>Set up</h3>

<p>The set up of the <code>MockMvc</code> class can be done as follows:</p>

<pre><code class="java">@Before
public void setUp() {
    ApplicationController controller = new ApplicationController(); // 1
    this.mockMvc = MockMvcBuilders.standaloneSetup(controller).build(); // 2
}
</code></pre>

<p>First, the controller must be instantiated (<code>1</code>). Then, the mock is initialized using the static method <code>MockMvcBuilders.standaloneSetup()</code> (<code>2</code>). At this point, the mock is ready to test the controller.</p>

<h3>Perform</h3>

<p>The method <code>MockMvc.perform()</code> allows to simulate HTTP requests to the controller. For instance, a GET request is done as follows:</p>

<pre><code class="java">mockMvc.perform(
    get("/fruits") // 1
        .param("search", "ban") // 2
);
</code></pre>

<p>The class <code>MockMvcRequestBuilders</code> provides static methods, such as <code>get</code> or <code>post</code>, to simulate HTTP requests on a particular endpoint of the controller (<code>1</code>). HTTP parameters can be added fluently to the request (<code>2</code>).</p>

<p>Furthermore, other static methods are provided by the <code>MockMvcRequestBuilders</code> class:</p>

<ul>
<li>HTTP verbs like <code>delete</code>, <code>put</code> or <code>patch</code>.</li>
<li><code>fileUpload</code> to upload binary files.</li>
<li>Others (<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html">documentation</a>).</li>
</ul>


<h3>Assert</h3>

<p>MockMvc permits to add assertions to the controller&rsquo;s response.</p>

<pre><code class="java">mockMvc.perform(get("/fruits")
    .param("search", "ban"))
    .andExpect(status().isOk()) // 1
    .andExpect(view().name("fruits")) // 2
    .andExpect(model().attribute("fruitBowl", contains("banana"))); // 3
</code></pre>

<p>Assertions are done with the <code>andExpect()</code> method. The class <code>MockMvcResultMatchers</code> provides static methods to do assertions on the HTTP status (<code>1</code>), the view asked by the controller (<code>2</code>) and on the model completed by the controller (<code>3</code>).</p>

<h2>Conclusion</h2>

<p>The Spring test framework is a very powerful, complete and simple way to test Spring MVC controllers. Its fluent API allows to write elegant and yet precise tests.</p>
]]></content>
  </entry>
  
</feed>
