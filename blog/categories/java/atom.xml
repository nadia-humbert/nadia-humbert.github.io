<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2018-03-31T21:08:04+02:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Write Robust Component Tests]]></title>
    <link href="https://nphumbert.github.io/blog/2017/09/16/how-to-write-robust-component-tests/"/>
    <updated>2017-09-16T13:37:12+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/09/16/how-to-write-robust-component-tests</id>
    <content type="html"><![CDATA[<p>Component tests allow to test complete use cases from end to end. They are often expensive especially in terms of setup and execution time. Thus, thought needs to be given to define their scope. Nevertheless, they are required in order to check and document the overall behaviour of the application or the microservice.</p>

<p>I have noticed that, in the context of microservices, these tests are very cost-effective. Indeed, they can be quite easy to setup because the already existing external API of the microservice can often be used directly without the need to setup additional things (like a fake server for instance). Moreover, the scope of a microservice is generally limited and can be tested exhaustively in isolation.</p>

<p>The goal of this article is to show how to make these tests robust. The main idea is to make them independent of the implementation.</p>

<!-- more -->


<p>The following example shows a Gherkin specification, for a booking HTTP API, that is very coupled to the technical implementation:
<code>gherkin
Scenario: Get an error when trying to book a hotel with no vacancy
    Given Get to hotel service "/api/hotel/1234" returns a response with the status code 200 and the body:
        """
        {
          "id": "1234",
          "name": "Ritz",
          "availableRooms": 0
        }
        """
    Given Get to user service "/api/user/456" returns a response with the status code 200 and the body:
        """
        {
          "id": "456",
          "firstName": "John",
          "lastName": "Doe"
        }
        """
    When I post "http://my.app.fr:8080/booking/api/" on the "booking" application with the following body:
        """
        {
          "userId": "456",
          "hotelId": "1234",
          "from": "2017-09-16",
          "to": "2017-09-24"
        }
        """
    Then I get a response with the status code 200
    And I get a JSON response with the body:
        """
        {
          "errors" : [ {
            "code" : 12,
            "message" : "There is no room available for this booking request"
          } ]
        }
        """
</code></p>

<p>This is the associated Java code to the first step (the framework used is Cucumber):
<code>java
@Given("^Get to hotel service \"([^\"]*)\" returns a response with the status code (\\d+) and the body:$$")
public void getToHotelServiceReturnsAResponseWithTheStatusCodeAndTheBody(String uri, int statusCode, String body) {
    hotelWireMockServer.stubFor(get(urlEqualTo(uri))
        .willReturn(aResponse()
            .withStatus(statusCode)
            .withHeader("Content-Type", MediaType.APPLICATION_JSON_VALUE)
            .withBody(body)
        )
    );
}
</code></p>

<p>It is possible to make the test more explicit and functional. For instance, instead of describing HTTP calls and responses in the steps, it is possible to write them in plain English. The first steps in the Gherkin file can be replaced by:</p>

<pre><code class="gherkin">Given There is no vacancy for the hotel "Ritz" of id 1234
Given The following users exist:
    | id   | firstName | lastName |
    | 456  | John      | Doe      |
</code></pre>

<p>The associated Java code is now the following:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Given</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;^</span><span class="n">There</span> <span class="n">is</span> <span class="n">no</span> <span class="n">vacancy</span> <span class="k">for</span> <span class="n">the</span> <span class="n">hotel</span> <span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;([^</span><span class="err">\</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;]*)</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">of</span> <span class="nf">id</span> <span class="o">(</span><span class="err">\</span><span class="n">d</span><span class="o">+)</span><span class="n">$</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">thereIsNoVacancyForTheHotelOfId</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">hotelWireMockServer</span><span class="o">.</span><span class="na">stubFor</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">urlEqualTo</span><span class="o">(&amp;</span><span class="n">rdquo</span><span class="o">;/</span><span class="n">api</span><span class="o">/</span><span class="n">hotel</span><span class="o">/&amp;</span><span class="n">ldquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">id</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">willReturn</span><span class="o">(</span><span class="n">aResponse</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withStatus</span><span class="o">(</span><span class="n">statusCode</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withHeader</span><span class="o">(</span><span class="s">&quot;Content-Type&amp;rdquo;, MediaType.APPLICATION_JSON_VALUE)</span>
</span><span class='line'><span class="s">            .withBody(&amp;ldquo;{ \&quot;</span><span class="n">id</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;:</span> <span class="err">\</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="err">\</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">name</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;:</span> <span class="err">\</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="err">\</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">availableRooms</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;:</span> <span class="mi">0</span> <span class="o">}&amp;</span><span class="n">ldquo</span><span class="o">;)</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Given</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;^</span><span class="n">The</span> <span class="n">following</span> <span class="n">users</span> <span class="nl">exist:</span><span class="n">$</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">theFollowingUsersExist</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">UserDTO</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">users</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span>
</span><span class='line'>        <span class="n">user</span> <span class="o">-&gt;</span> <span class="n">userWireMockServer</span><span class="o">.</span><span class="na">stubFor</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">urlEqualTo</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;/</span><span class="n">api</span><span class="o">/</span><span class="n">user</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">id</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">willReturn</span><span class="o">(</span><span class="n">aResponse</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withStatus</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withHeader</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withBody</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">asJson</span><span class="o">())</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We notice that the purely technical details like the URL, the JSON response and the HTTP status are now specified in the Java code. This allows to make the Gherkin specification more focused on the behaviour, clearer and more concise. The maintainability and robustness of this test are hence increased.</p>

<p>The initial test is now the following:
<code>gherkin
Scenario: Get an error when trying to book a hotel with no vacancy
    Given There is no vacancy for the hotel "Ritz" of id 1234
    Given The following users exist:
        | id   | firstName | lastName |
        | 456  | John      | Doe      |
    When I post "http://my.app.fr:8080/booking/api/" on the "booking" application with the following body:
        """
        {
          "userId": "456",
          "hotelId": "1234",
          "from": "2017-09-16",
          "to": "2017-09-24"
        }
        """
    Then I get a response with the status code 200
    And I get a JSON response with the body:
        """
        {
          "errors" : [ {
            "code" : 12,
            "message" : "There is no room available for this booking request"
          } ]
        }
        """
</code></p>

<p>Since this microservice is an HTTP API, it can be relevant to keep the <code>When</code> and <code>Then</code> in a technical form. Indeed, one can argue that the HTTP status and the format of the exchanged messages are part of its behaviour.</p>

<h2>Conclusion</h2>

<p>A component test must explicitely describe a real use case. In order to do that, it is important to make it as independent as possible of the implementation. This article shows a way to go from a test highly coupled to the implementation to a test more functional and concise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot]]></title>
    <link href="https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix/"/>
    <updated>2017-07-23T13:33:38+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix</id>
    <content type="html"><![CDATA[<p>In a microservices architecture, several things can go wrong. A middleware, the network or the service you want to contact can be down. In this world of uncertainty, you have to anticipate problems in order not to break the entire chain and throw an error to the end user when you could offer a partially degraded service instead.</p>

<p>The goal of this article is to show how to implement the circuit breaker pattern using Hystrix, Feign Client and Spring Boot.</p>

<!-- more -->


<h2>Feign Client Crash Course</h2>

<p><a href="https://github.com/OpenFeign/feign">Feign</a> is an HTTP client created by Netflix to make HTTP communications easier. It is integrated to Spring Boot with the <code>spring-cloud-starter-feign</code> starter.</p>

<p>To create a client to consume an HTTP service, an interface annotated with <code>@FeignClient</code> must be created. Endpoints can be declared in this interface using an API that is very close to the Spring MVC API. The <code>@EnableFeignClients</code> annotation must also be added to a Spring Configuration class.</p>

<pre><code class="java">@Configuration
@EnableFeignClients
public class FeignConfiguration {

}
</code></pre>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos")
public interface VideoClient {

    @PostMapping(value = "/api/videos/suggest")
    List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<p>An instance of <code>VideoClient</code> is automagically injected into the Spring application context and can be autowired and used throughout the application. Moreover, if the <code>videos</code> microservice is registred to the same discovery service as the current microservice, there is no need for an URL as it will be retrieved for you based on the <code>name</code>.</p>

<p>If the <code>videos</code> service, a middleware or the network happens to be down or overloaded, the <code>suggest</code> method will throw a <code>FeignException</code> that will be propagated throughout the stack if not caught.</p>

<h2>Create a Fallback Implementation</h2>

<p>Fortunately, Spring Cloud comes with a solution to this problem: a circuit breaker. In this article, we will use <a href="https://github.com/Netflix/Hystrix">Hystrix</a>. It is also created by Netflix and also integrated to Spring Boot using the <code>spring-cloud-starter-hystrix</code> starter.</p>

<p>The idea is to create an implementation of the <code>VideoClient</code> and mark it as the default behaviour if <code>videos</code> is unreachable or overloaded. Like a lot of other Spring features, it is enabled using an annotation: <code>@EnableCircuitBreaker</code>.</p>

<pre><code class="java">@Configuration
@EnableFeignClients
@EnableCircuitBreaker
public class FeignConfiguration {

}
</code></pre>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos", fallback = VideoClientFallback.class)
public interface VideoClient {

    @PostMapping(value = "/api/videos/suggest")
    List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<pre><code class="java">@Component
public class VideoClientFallback implements VideoClient {

    @Override
    public List&lt;Suggestion&gt; suggest(ViewingHistory history) {
      // Degraded service: no suggestion to offer
      return new ArrayList&lt;&gt;();
    }

}
</code></pre>

<p>A configuration property has to be added to the <code>application.yml</code> file of the Spring Boot application to tell Feign to enable Hystrix.</p>

<pre><code class="yml">feign:
    hystrix:
        enabled: true
</code></pre>

<p>Voila! Every time the remote service will be unavailable, the <code>suggest</code> method of the <code>VideoClientFallback</code> will be called and the end user will not get an error violently thrown at her.</p>

<h2>Keep Track of the Source Error</h2>

<p>With this setup, the fallback will be called regardless of the initial error that will be swallowed. If you want to retrieve this error and do something with it, you can use a <code>FallbackFactory</code>.</p>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos", fallbackFactory = VideoClientFallbackFactory.class)
public interface VideoClient {

  @PostMapping(value = "/api/videos/suggest")
  List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<pre><code class="java">@Component
public class VideoClientFallbackFactory implements FallbackFactory&lt;VideoClient&gt; {

    @Override
    public VideoClient create(Throwable throwable) {
        return new VideoClientFallback(throwable);
    }

}
</code></pre>

<pre><code class="java">public class VideoClientFallback implements VideoClient {

    private final Throwable cause;

    public VideoClientFallback(Throwable cause) {
      this.cause = cause;
    }

    @Override
    public List&lt;Suggestion&gt; suggest(ViewingHistory history) {
        if (cause instanceof FeignException &amp;&amp; ((FeignException) cause).status() == 404) {
            // Treat the HTTP 404 status
        }

        return new ArrayList&lt;&gt;();
    }

}
</code></pre>

<h2>Conclusion</h2>

<p>Microservices foster low coupling between components and resiliency. Hence, it would be sad to throw an error every time a service or a middleware is down. The circuit breaker pattern explained in this article allows you to ensure the continuity of service, even if it has to be offered in a degraded manner. As always, Spring Boot is a great help to setup this mechanism very easily.</p>

<hr />

<p><em>This article has been written in collaboration with Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Conditional Structures with Map]]></title>
    <link href="https://nphumbert.github.io/blog/2017/07/20/refactoring-conditional-with-map/"/>
    <updated>2017-07-20T16:32:15+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/07/20/refactoring-conditional-with-map</id>
    <content type="html"><![CDATA[<p>When working on already existing codebases, I often encounter pieces of code that look like this:</p>

<pre><code class="java">public class Day {
  public void start(Weather weather) {
    switch(weather) {
      case RAINY:
          takeAnUmbrella();
          break;
      case SUNNY:
          takeAHat();
          break;
      case STORMY:
          stayHome();
          break;
      default:
          doNothing();
          break;
    }
  }
}
</code></pre>

<p>Basically, depending on the weather, an action has to be taken. This kind of code is pretty hard to test and to maintain. The goal of this article is to refactor it using a <code>Map</code>.</p>

<!-- more -->


<h2>What is the Problem?</h2>

<p>Using conditional structures like this might be a sign of bad design. Indeed, this code tends to grow indefinitely as new cases have to be handled and the same code has to be modified over and over. A time will come when the code will be so bloated that it will be very hard to add new behaviour. This is a violation of the <em>Open Closed Principle</em> which stipulates that the code should be open for extension but closed for modification: you should be able to add new behaviour to your code without modifying it.</p>

<h2>Transform the Imperative Algorithm into Data</h2>

<p>By analyzing this code, it becomes clear that this algorithm is no more than a <code>Map</code>: for a certain weather (the key), a piece of code has to be executed (the value). A first refactoring can be done to make this conceptual <code>Map</code> concrete:</p>

<pre><code class="java">public class Day {

  private final Map&lt;Weather, Runnable&gt; startOfTheDayActions = new HashMap&lt;&gt;();

  public Day() {
    startOfTheDayActions.put(Weather.RAINY, this::takeAnUmbrella);
    startOfTheDayActions.put(Weather.SUNNY, this::takeAHat);
    startOfTheDayActions.put(Weather.STORMY, this::stayHome);
  }

  public void start(Weather weather) {
    startOfTheDayActions.getOrDefault(weather, this::doNothing).run();
  }
}
</code></pre>

<p>This is a first step and the code is already much clearer. Now, the mapping between the weather and the action to perform is explicit and the <code>start</code> method will not have to be modified very often. When a new case must be handled, it&rsquo;s just a new entry in the <code>Map</code>.</p>

<p>Nonetheless, this do not solve all problems. The class still has to be modified to add a new entry. To go further, the <code>Map</code> can be passed as a parameter of the constructor.</p>

<pre><code class="java">public class Day {

  private final Map&lt;Weather, Runnable&gt; startOfTheDayActions = new HashMap&lt;&gt;();

  public Day(Map&lt;Weather, Runnable&gt; startOfTheDayActions) {
    this.startOfTheDayActions = startOfTheDayActions;
  }

  public void start(Weather weather) {
    startOfTheDayActions.getOrDefault(weather, this::doNothing).run();
  }
}
</code></pre>

<p>Now the only responsibility of the class is to use the mapping to perform the correct action. This mapping is now the responsibility of another class.</p>

<h2>Note about Spring Framework</h2>

<p>If you are using Spring Framework and the <code>Day</code> class is a <code>@Component</code>, you can simply inject the <code>Map</code> as any other dependency.</p>

<pre><code class="java">@Component
public class Day {

  private final Map&lt;Weather, Runnable&gt; startOfTheDayActions = new HashMap&lt;&gt;();

  public Day(@Qualifier("startOfTheDayActions") Map&lt;Weather, Runnable&gt; startOfTheDayActions) {
    this.startOfTheDayActions = startOfTheDayActions;
  }

  public void start(Weather weather) {
    startOfTheDayActions.getOrDefault(weather, this::doNothing).run();
  }
}
</code></pre>

<pre><code class="java">@Configuration
public class ActionConfig {

  @Bean("startOfTheDayActions")
  public Map&lt;Weather, Runnable&gt; startOfTheDayActions() {
    Map&lt;Weather, Runnable&gt; actions = new HashMap&lt;&gt;();
    // Create mapping
    return actions;
  }
}
</code></pre>

<h2>Conclusion</h2>

<p>This refactoring is very easy to do but it can reduce the complexity of a method in a very efficient way. I think that the code should reveal intention and should not be bloated with conditional structures when it is not necessary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gérer les dépendances circulaires]]></title>
    <link href="https://nphumbert.github.io/blog/2016/12/17/gerer-les-dependances-circulaires/"/>
    <updated>2016-12-17T18:31:18+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/12/17/gerer-les-dependances-circulaires</id>
    <content type="html"><![CDATA[<p>Durant mon travail, j'ai rencontré des dépendances circulaires dans une application sur laquelle je suis intervenue. Dans sa plus simple forme, il s'agit de deux classes qui dépendent l'une de l'autre.
Ceci est, selon moi, un problème pour plusieurs raisons. L'objectif de cet article est de montrer ce qu'est une dépendance circulaire, en quoi cela peut poser problème, et comment les éliminer.</p>

<!-- more -->


<h2>Cas d'étude</h2>

<p>Le code ci-dessous présente un cas simple de dépendance circulaire.</p>

<pre><code class="java">class A {
  private final B b;

  A(B b) {
    this.b = b;
  }

  void doSomething() {
    b.doSomethingGreat();
  }

  void doSomethingAwesome() {
    System.out.println("Doing something awesome!");
  }
}

class B {
  private A a;

  void setA(A a) {
    this.a = a;
  }

  void doSomething() {
      a.doSomethingAwesome();
  }

  void doSomethingGreat() {
    System.out.println("Doing something great!");
  }
}
</code></pre>

<h2>Problèmes associés</h2>

<h3>Instanciation de b</h3>

<p>Le code suivant illustre l'utilisation de <code>B</code> :</p>

<pre><code class="java">B b = new B(); // 1
A a = new A(b);
b.setA(a); // 2
b.doSomething(); // 3
</code></pre>

<p>Nous pouvons observer que la classe <code>B</code> ne peut pas être utilisée directement après son instanciation (<code>1</code>). Elle est dans un état incohérent car il est impératif de setter l'instance de <code>A</code> (<code>2</code>) afin de pouvoir l'utiliser. Sinon, une exception de type <code>NullPointerException</code> sera remontée lors de l'appel de la méthode <code>doSomething</code> (<code>3</code>). Cette opération (<code>2</code>) peut facilement être oubliée. De plus, si l'appel de la méthode (<code>3</code>) intervient bien plus tard, cet oubli peut ne pas être détecté immédiatemment.</p>

<h3>Immuabilité de B</h3>

<p>Un autre inconvénient est que <code>B</code> n'est pas immuable. En effet, une fois instancié, il est possible de modifier son état en appelant autant de fois que l'on veut la méthode <code>setA</code>.
Pour rendre <code>B</code> immuable, il faudrait supprimer le setter, rendre l'attribut <code>a</code> <code>final</code> et le passer en paramètre du constructeur. Ceci est impossible actuellement à cause de la dépendance circulaire.</p>

<h3>Fort couplage</h3>

<p>Le fort couplage introduit entre les deux classes peut être un signe qu'il y a un problème de séparation des responsabilités. Il est, par exemple, possible que les deux classes partagent la même responsabilité et qu'elles puissent donc être fusionnées. Une autre possibilité est qu'une troisième responsabilité soit présente et qu'elle doive être extraite dans une classe séparée.</p>

<h2>Solutions envisageables</h2>

<p>Dans le contexte de mon travail, les solutions que j'ai dû adopter étaient relativement simples. Ces solutions seront décrites par la suite.</p>

<h3>Déplacer le comportement dans une des deux classes</h3>

<p>Il est possible que le comportement de <code>doSomethingAwesome</code> soit lié uniquement à la classe <code>B</code>. Dans ce cas, il est possible de déplacer cette méthode dans <code>B</code> :</p>

<pre><code class="java">class A {
  private final B b;

  A(B b) {
    this.b = b;
  }

  void doSomething() {
    b.doSomethingGreat();
  }

  void doSomethingAwesome() {
    b.doSomethingAwesome();
  }
}

class B {
  void doSomething() {
      doSomethingAwesome();
  }

  void doSomethingGreat() {
    System.out.println("Doing something great!");
  }

  void doSomethingAwesome() {
    System.out.println("Doing something awesome!");
  }
}
</code></pre>

<p>Il n'y a donc plus de dépendance circulaire car <code>B</code> ne dépend plus de <code>A</code>. Le code est ainsi plus SOLID car la classe <code>A</code> n'a plus de responsabilités qui ne lui appartiennent pas.</p>

<p>Le code ci-dessus a été écrit de manière à conserver l'API de <code>A</code>. La méthode <code>doSomethingAwesome</code> de <code>A</code> pourrait donc être supprimée si elle n'est désormais plus appelée.</p>

<h3>Créer une nouvelle classe</h3>

<p>Si la méthode <code>doSomethingAwesome</code> n'est une responsabilité ni de <code>A</code> ni de <code>B</code>, elle doit être extraite dans une classe séparée :</p>

<pre><code class="java">class Awesome {
  void doSomethingAwesome() {
    System.out.println("Doing something awesome!");
  }
}

class A {
  private final B b;
  private final Awesome awesome;

  A(B b, Awesome awesome) {
    this.b = b;
    this.awesome = awesome;
  }

  void doSomething() {
    b.doSomethingGreat();
  }

  void doSomethingAwesome() {
    awesome.doSomethingAwesome();
  }
}

class B {
  private final Awesome awesome;

  B(Awesome awesome) {
    this.awesome = awesome;
  }

  void doSomething() {
    awesome.doSomethingAwesome();
  }

  void doSomethingGreat() {
    System.out.println("Doing something great!");
  }
}
</code></pre>

<h2>Conclusion</h2>

<p>Les dépendances circulaires peuvent être un signe de mauvais design. En effet, elles introduisent un fort couplage, provoquent l'instanciation d'objets incohérents et empêchent l'immuabilité de ceux-ci. Il est donc nécessaire de les analyser afin de bien comprendre leur origine et de les corriger si besoin. Dans cet article, deux manières de faire ont été présentées.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pourquoi ne pas utiliser l'héritage pour éviter la duplication de code ?]]></title>
    <link href="https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code/"/>
    <updated>2016-01-24T11:38:41+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code</id>
    <content type="html"><![CDATA[<p>L'héritage est une composante très importante des langages orientés objet tels que Java. Cependant, il doit être utilisé à bon escient afin de respecter les bonnes pratiques de programmation.</p>

<p>Il m'est arrivé de rencontrer des cas où l'héritage était utilisé afin de ne pas dupliquer du code. Le but de cet article est d'illustrer une telle utilisation, d'analyser ses inconvénients et de montrer une manière possible de la corriger.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Un projet d'illustration a été créé afin de servir de support pour cet article. Il est disponible sur <a href="https://github.com/nphumbert/demo-inappropriate-inheritance">GitHub</a>. Ce projet contient deux branches :</p>

<ul>
<li><code>inappropriate-inheritance</code> : contient l'utilisation inappropriée de l'héritage.</li>
<li><code>dependency</code> : contient une proposition de correction en utilisant une dépendance.</li>
</ul>


<p>Il s'agit de deux <em>controllers</em> Spring MVC qui doivent hasher un texte. Dans le cas de l'utilisation inappropriée de l'héritage, le code d'un des <em>controllers</em> est le suivant :</p>

<pre><code class="java">@RestController
public class ProfileController extends BaseController {

    @RequestMapping(value = "/profile", method = RequestMethod.GET)
    public String profile() {
        return "profile: " + hash("profile");
    }
}
</code></pre>

<p>Ce <em>controller</em> hérite d'une classe commune qui contient la méthode <code>hash</code> :</p>

<pre><code class="java">public abstract class BaseController {
    protected String hash(String value) {
        // ...
    }
}
</code></pre>

<h2>Pourquoi n'est-il pas correct d'utiliser l'héritage ici ?</h2>

<h3>Non respect de la programmation orientée objet (POO)</h3>

<p>Dans ce code, la mécanique de la POO est respectée mais pas sa sémantique. En effet, la classe <code>BaseController</code> n'a pas de raison d'être. Elle ne correspond à aucun concept et ne sert qu'à contenir du code partagé entre les <em>controllers</em>. Ce genre de classe possède souvent un nom flou et générique, ce qui est un signe que le concept associé est mal défini, voire inexistant.</p>

<h3>Difficulté à tester</h3>

<p>La capacité du code à être testé n'est pas une fin en soi. Cependant, un code difficile à tester est un <em>smell</em> qui indique le plus souvent un problème de conception.</p>

<p>Ici, il est obligatoire de passer par un <em>set up</em> assez lourd pour tester en isolation le <em>controller</em>. Une classe privée héritant du <em>controller</em> est créée afin de surcharger la méthode <code>hash</code> et de fixer la valeur de retour. Les tests portent donc sur cette classe au lieu de porter sur le <em>controller</em> initial.</p>

<pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = InappropriateInheritanceApplication.class)
@WebAppConfiguration
public class ProfileControllerTest {

    public static final String HASH = "hash";

    private class TestableProfileController extends ProfileController {

        @Override
        protected String hash(String value) {
            return HASH;
        }
    }

    private MockMvc mockMvc;

    @Before
    public void setUp() {
        ProfileController controller = new TestableProfileController();
        this.mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
    }

    @Test
    public void should_get_hash_when_get_profile() throws Exception {
        // when
        String contentAsString = mockMvc.perform(get("/profile"))
                .andExpect(status().isOk())
                .andReturn().getResponse().getContentAsString();

        // then
        assertThat(contentAsString, is("profile: " + HASH));
    }
}
</code></pre>

<p>La complexité du <em>set up</em> est bien trop importante par rapport au code à tester qui est relativement simple.</p>

<h3>Fort couplage</h3>

<p>L'héritage introduit un fort couplage entre les classes. En effet, tous les <em>controllers</em> doivent hériter de <code>BaseController</code> pour bénéficier de la méthode <code>hash</code>. Ceci implique qu'ils doivent avoir accès à cette classe (soit être dans le même projet, soit avoir une dépendance vers sa librairie).</p>

<p>De plus, l'héritage multiple étant interdit en Java, les <em>controllers</em> ne peuvent pas hériter d'une autre classe qui serait appropriée.</p>

<p>Finalement, si une autre classe avait besoin de la méthode <code>hash</code>, elle devrait forcément hériter de <code>BaseController</code> (ce qui n'a pas de sens s'il ne s'agit pas d'un <em>controller</em>) ou alors dupliquer le code. Ce problème met en évidence le fait que la notion de hashage n'a aucun rapport avec la notion de <em>controller</em>.</p>

<h3>Difficulté à maintenir</h3>

<p>Le couplage fort décrit précédemment rend le code difficile à maintenir. Un changement du besoin entraînerait une modification du code à un endroit où on ne s'y attend pas. Par ailleurs, il pourrait y avoir des effets de bord inattendus sur le reste du code.</p>

<h2>Comment peut-on corriger ce code ?</h2>

<p>La solution proposée pour corriger ce code est d'extraire la méthode de <code>hash</code> dans une dépendance qui sera injectée dans les <em>controllers</em>.</p>

<p>Tout d'abord, une interface <code>HashProvider</code> est créée et implémentée.</p>

<pre><code class="java">public interface HashProvider {
    String hash(String text);
}
</code></pre>

<pre><code class="java">@Component
public class Sha256HashProvider implements HashProvider {

    @Override
    public String hash(String value) {
        // ...
    }
}
</code></pre>

<p>Cette implémentation peut alors être injectée dans le <em>controller</em> afin d'être utilisée.</p>

<pre><code class="java">@RestController
public class ProfileController {

    private final HashProvider hashProvider;

    @Autowired
    public ProfileController(HashProvider hashProvider) {
        this.hashProvider = hashProvider;
    }

    @RequestMapping(value = "/profile", method = RequestMethod.GET)
    public String profile() {
        return "profile: " + hashProvider.hash("profile");
    }
}
</code></pre>

<p>Le <em>set up</em> de test de ce <em>controller</em> s'en trouve simplifié car il n'y a plus qu'à <em>mocker</em> l'interface.</p>

<pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = InappropriateInheritanceApplication.class)
@WebAppConfiguration
public class ProfileControllerTest {

    private MockMvc mockMvc;
    private HashProvider hashProvider;

    @Before
    public void setUp() {
        hashProvider = mock(HashProvider.class);
        ProfileController controller = new ProfileController(hashProvider);
        this.mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
    }

    @Test
    public void should_get_hash_when_get_profile() throws Exception {
        // given
        when(hashProvider.hash("profile")).thenReturn("hash");

        // when
        String contentAsString = mockMvc.perform(get("/profile"))
                .andExpect(status().isOk())
                .andReturn().getResponse().getContentAsString();

        // then
        assertThat(contentAsString, is("profile: hash"));
    }
}
</code></pre>

<p>Finalement, la logique de hashage est totalement découplée de celle du <em>controller</em>. Ceci rend le code plus simple à maintenir car si le besoin change, il suffit de modifier l'implémentation de <code>HashProvider</code> ou d'en ajouter une nouvelle. Ainsi, le comportement du <em>controller</em> est modifié sans que son code ne change.</p>

<h2>Conclusion</h2>

<p>Il est nécessaire de faire attention à ne pas abuser de l'héritage. Dans cet article, il a été montré qu'il n'est pas approprié pour éviter la duplication de code. Dans ce cas, il est préférable d'utiliser une interface dont une implémentation sera injectée. Ceci a pour principal avantage de rendre le code plus simple et facile à maintenir.</p>
]]></content>
  </entry>
  
</feed>
