<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kata | Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/blog/categories/kata/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2016-05-24T23:29:49+02:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Découverte de Kotlin par la pratique]]></title>
    <link href="https://nphumbert.github.io/blog/2016/05/08/decouverte-de-kotlin-par-la-pratique/"/>
    <updated>2016-05-08T14:58:45+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/05/08/decouverte-de-kotlin-par-la-pratique</id>
    <content type="html"><![CDATA[<p>Kotlin est un langage de programmation créé par JetBrains. Il est exécuté sur la JVM et est 100% interopérable avec Java 1.6+.
J'ai découvert récemment ce langage et j'ai réalisé un ensemble de katas pour le pratiquer.
Le code source de ces katas est disponible sur GitHub :</p>

<ul>
<li><a href="https://github.com/nphumbert/kata-prime-factors">Prime factors</a></li>
<li><a href="https://github.com/nphumbert/kata-string-calculator">String calculator</a></li>
<li><a href="https://github.com/nphumbert/kata-game-of-life">Game of life</a></li>
<li><a href="https://github.com/nphumbert/kata-mars-rover">Mars rover</a></li>
</ul>


<p>Dans cet article, je vais présenter des particularités de Kotlin que j'ai pu rencontrer.</p>

<!-- more -->


<h2>Généralités</h2>

<p>En Kotlin, un fichier peut contenir plusieurs classes et des fonctions. Ces fonctions peuvent exister en dehors d'une classe.
Un exemple de classe est donné ci-dessous :</p>

<pre><code class="kotlin">data class Dimension(val width: Int, val height: Int)
</code></pre>

<p>Le constructeur est défini dans la déclaration de la classe. Le mot clé <code>val</code> signifie que le champ est en lecture seule. Il faudrait utiliser <code>var</code> pour indiquer qu'il est modifiable. De plus, des getters sont implicitement générés pour tous les champs qui ne sont pas <code>private</code> ainsi que des setters pour les champs qui ne sont pas en lecture seule. Par ailleurs, le mot clé <code>data</code> permet de créer automatiquement les méthodes <code>toString</code>, <code>equals</code>, <code>hashCode</code> et <code>clone</code>.</p>

<h2>Gestion des null</h2>

<p>Par défaut, les variables ne peuvent pas être nulles. Pour indiquer qu'une variable peut être nulle, il faut ajouter un <code>?</code> à la fin du type. Par exemple, <code>val position: Position?</code>. Le fait d'appeler une méthode sur une variable qui peut être nulle génère une erreur de compilation si ce n'est pas géré explicitement.</p>

<p>Dans le code suivant, <code>moves</code> est une <code>Map</code> dont une valeur est récupérée à partir d'une clé. Ceci peut retourner une valeur nulle si elle ne contient pas cette clé. S'il est certain que la clé existe dans la <code>Map</code>, il faut forcer l'appel avec <code>!!</code>.</p>

<pre><code class="kotlin">override fun apply(position: Position): Position {
    return moves[position.orientation]!!.invoke(position)
}
</code></pre>

<p>S'il n'est pas certain que la clé existe dans la <code>Map</code>, il est possible d'utiliser <code>?</code> pour appeler la méthode <code>invoke</code> sans risque d'exception. En effet, si la valeur est nulle, la méthode ne sera pas appelée et le résultat sera <code>null</code>. Le code deviendrait donc le suivant :</p>

<pre><code class="kotlin">override fun apply(position: Position): Position? {
    return moves[position.orientation]?.invoke(position)
}
</code></pre>

<p>Cette gestion des <code>null</code> permet d'éviter les contrôles de nullité dispersés dans tout le code. De plus, elle permet de rendre très explicite les endroits où une variable peut être nulle. Finalement, tout ceci est vérifié par le compilateur, ce qui permet d'éviter les oublis.</p>

<h2>Valeurs par défaut</h2>

<p>Kotlin permet de donner aux paramètres des fonctions une valeur par défaut. Cette valeur est celle utilisée si le paramètre n'est pas fourni lors de l'appel de la fonction. La syntaxe pour mettre une valeur par défaut est décrite ci-après :</p>

<pre><code class="kotlin">fun add(numbers: String, separator: Char = ','): Int {
    return numbers.split(separator).map { it.toInt() }.sum()
}
</code></pre>

<p>Cette fonction peut donc être appelée de deux manières différentes :</p>

<pre><code class="kotlin">add(numbers.joinToString(","))
add(numbers.joinToString(","), ',')
</code></pre>

<p>Ce mécanisme permet de modifier du code existant, pour le rendre paramétrable par exemple, sans devoir changer le code client déjà existant ni devoir créer une nouvelle fonction qui se fera déléguer son traitement.</p>

<h2>Streams</h2>

<p>L'équivalent des <code>Streams</code> Java 8 sont gérés nativement par les classes Kotlin (même avec un JDK 1.6 !). Il est donc directement possible d'appeler des méthodes comme <code>filter</code>, <code>map</code> ou <code>reduce</code> sur des collections. Par exemple, dans le jeu de la vie, pour compter toutes les cellules vivantes parmi les cellules voisines, il est possible de faire ceci :</p>

<pre><code class="kotlin">fun numberOfLiveNeighbours(position: Position): Int =
                      position.neighbours().filter { get(it).alive }.count()
</code></pre>

<p>Par ailleurs, d'autres méthodes plus spécifiques sont disponibles selon le type de collection. Par exemple, sur une
<code>Map</code>, il est possible d'appliquer des filtres seulement sur les valeurs grâce à la méthode <code>filterValues</code> :</p>

<pre><code class="kotlin">fun toString(orientation: Orientation): String =
                      orientations.filterValues { it.equals(orientation) }.keys.first().toString()
</code></pre>

<p>Le grand nombre de méthodes de ce genre facilite la programmation fonctionnelle et rend le code plus clair et expressif. De plus, le fait que Kotlin soit intéropérable avec Java permet d'introduire des morceaux de code fonctionnel dans une base de code Java 6 ou 7.</p>

<h2>Fonctions d'extension</h2>

<p>Soit le code Kotlin suivant extrait du kata des facteurs premiers :</p>

<pre><code class="kotlin">primes.forEach {
    while (remains % it == 0) {
        factors.add(it)
        remains /= it
    }
}
</code></pre>

<p>La boucle ci-dessus continue tant que <code>remains</code> est un multiple du nombre premier courant. Il serait possible de rendre le code plus expressif de la manière suivante :</p>

<pre><code class="kotlin">primes.forEach {
    while (remains.isMultipleOf(it)) {
        factors.add(it)
        remains /= it
    }
}
</code></pre>

<p>Le problème est que <code>remains</code> est un <code>Int</code> et que cette classe ne contient pas la méthode <code>isMultipleOf</code> par défaut. Cependant, il est possible de l'ajouter grâce à une fonction d'extension. il s'agit de créer une fonction et de l'ajouter à une classe de manière externe :</p>

<pre><code class="kotlin">fun Int.isMultipleOf(number: Int): Boolean = this.mod(number) == 0
</code></pre>

<p>Les fonctions d'extension sont très pratiques pour enrichir des objets, sans devoir modifier leur classe. De plus, ces extensions peuvent être restreintes à un certain contexte (une classe, un package, etc.).</p>

<h2>La déstructuration</h2>

<p>Lorsque l'on souhaite extraire des objets depuis un tableau ou une liste, il est possible de s'affranchir de l'utilisation explicite des index en utilisant la déstructuration :</p>

<pre><code class="kotlin">val (gridDimensionInput, initialPositionInput, pathInput) = input.split("\n")
</code></pre>

<p>Dans l'exemple ci-dessus, l'input va être découpée par ligne. La première ligne sera stockée dans <code>gridDimensionInput</code>, la seconde dans <code>initialPositionInput</code> et la troisième dans <code>pathInput</code>.</p>

<p>Ceci est également possible avec une <code>data class</code> de la façon suivante :</p>

<pre><code class="kotlin">val position = Position(1, 2, Orientation.NORTH)
val (x, y, orientation) = position
</code></pre>

<p>La déstructuration permet de simplifier l'extraction de données depuis un objet qui la supporte sans devoir créer des variables intermédiaires qui ne serviront plus ensuite.</p>

<h2>Création de type implicite</h2>

<p>Quand un champ, un paramètre ou une variable doit être une fonction, sa signature peut être spécifiée lors de sa déclaration. Dans le kata Mars rover, une <code>Map</code> est utilisée pour associer à une orientation particulière du rover, une fonction qui va le faire avancer. Cette fonction doit prendre en paramètre une position et doit retourner la nouvelle position :</p>

<pre><code class="kotlin">val moves = HashMap&lt;Orientation, (Position) -&gt; Position&gt;()
moves.put(Orientation.NORTH, { Position(it.x, it.y.plus(1), it.orientation) })
</code></pre>

<p>Cette manière de déclarer les types donne une très grande liberté sur la forme souhaitée pour le type. En effet, il n'est pas nécessaire de créer un type explicitement pour l'utiliser.</p>

<h2>Conclusion</h2>

<p>Kotlin est un langage avec des opinions fortes. Je trouve que ceci le rend clair et très agréable à utiliser. Il force à se poser les bonnes questions au bon moment, pour la gestion des null par exemple. Ces questions étant résolues au moment approprié, il y a moins de soucis à se faire le reste du temps. De plus, ce langage est simple à écrire et à lire car il est peu verbeux et offre une grande expressivité. Par ailleurs, son intéropérabilité avec Java permet de l'introduire dans des bases de code existantes sans devoir les modifier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polymorphisme avec le kata parrot refactoring]]></title>
    <link href="https://nphumbert.github.io/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring/"/>
    <updated>2016-04-20T16:26:03+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring</id>
    <content type="html"><![CDATA[<p>Ce kata est tiré d'un exemple du livre &ldquo;Refactoring, Improving the Design of Existing Code&rdquo; de Martin Fowler, et a été créé par Emilie Bache.
L'exemple contient des signes de mauvais design et permet notamment de pratiquer le polymorphisme.<br/>
Dans cet article, une solution à ce kata sera développée. Le projet qui a servi de support se trouve sur <a href="https://github.com/nphumbert/kata-parrot-refactoring">GitHub</a> avec la solution respective.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Il s'agit d'un projet où l'on calcule la vitesse d'un perroquet en fonction de son origine. La classe <code>Parrot</code> initiale est la suivante :</p>

<pre><code class="java">public class Parrot {

    private ParrotTypeEnum type;
    private int numberOfCoconuts = 0;
    private double voltage;
    private boolean isNailed;

    public Parrot(ParrotTypeEnum _type, int numberOfCoconuts, double voltage, boolean isNailed) {
        this.type = _type;
        this.numberOfCoconuts = numberOfCoconuts;
        this.voltage = voltage;
        this.isNailed = isNailed;
    }

    public double getSpeed() {
        switch (type) {
            case EUROPEAN:
                return getBaseSpeed();
            case AFRICAN:
                return Math.max(0, getBaseSpeed() - getLoadFactor() * numberOfCoconuts);
            case NORWEGIAN_BLUE:
                return (isNailed) ? 0 : getBaseSpeed(voltage);
        }
        throw new RuntimeException("Should be unreachable");
    }

    private double getBaseSpeed(double voltage) {
        return Math.min(24.0, voltage * getBaseSpeed());
    }

    private double getLoadFactor() {
        return 9.0;
    }

    private double getBaseSpeed() {
        return 12.0;
    }
}
</code></pre>

<p>Cette classe utilise une structure conditionnelle dans la méthode <code>getSpeed</code> permettant de calculer la vitesse du perroquet. Ceci n'est pas convenable car il faudrait ajouter une nouvelle structure de ce type à chaque fois qu'un comportement dépend du type de perroquet. De plus, il faudrait ajouter une clause à chacune de ces structures dès qu'un nouveau type de perroquet est ajouté. Finalement, si la manière de calculer la vitesse d'un des types de perroquet changeait, il faudrait modifier cette classe. Cela implique que cette classe a plusieurs raisons de changer : elle ne respecte donc pas le <a href="https://www.youtube.com/watch?v=-mroBlWUBBM">Single Responsibility Principle</a>.</p>

<h2>Lecture des tests et début du refactoring</h2>

<p>Je commence par lire les tests existants. Je remarque qu'il y a des tests associés à chaque type de perroquet.
Je décide de commencer par traiter les cas concernant le perroquet européen. Il y a un seul test associé à ce perroquet :</p>

<pre><code class="java">@Test
public void getSpeedOfEuropeanParrot() {
    Parrot parrot = new Parrot(ParrotTypeEnum.EUROPEAN, 0, 0, false);
    assertEquals(parrot.getSpeed(), 12.0);
}
</code></pre>

<p>Je lance le harnais de test pour m'assurer que tous les tests sont verts et que je pars donc d'une bonne base.</p>

<p>Je remplace dans ce test la classe <code>Parrot</code> par la classe fille <code>EuropeanParrot</code>. Le constructeur de cette nouvelle classe n'a aucun paramètre. En effet, les valeurs passées au constructeur de la classe mère sont toutes à des valeurs par défaut.<br/>
Comme il n'y a qu'un seul test associé à ce perroquet, il est déduit que la vitesse de ce perroquet n'est affectée par aucun paramètre externe. L'implémentation vient confirmer cette affirmation et qu'il ne s'agit pas d'un oubli de test.</p>

<p>Dans la nouvelle classe, j'appelle le contructeur de la classe mère et je surcharge la méthode <code>getSpeed</code> :
```java
public class EuropeanParrot extends Parrot {</p>

<pre><code>public EuropeanParrot() {
    super(ParrotTypeEnum.EUROPEAN, 0, 0, false);
}

@Override
public double getSpeed() {
    return getBaseSpeed();
}
</code></pre>

<p>}
<code>``
La méthode</code>getBaseSpeed()<code>est toujours celle de la classe mère avec une nouvelle visibilité :</code>protected`. En effet, cette méthode est utilisée lors du calcul de la vitesse de tous les types de perroquet.</p>

<p>De plus, je remplace l'implémentation dans la classe mère par un déclenchement de l'exception <code>IllegalStateException</code>. Ainsi, je peux être certaine qu'il s'agit de la nouvelle implémentation qui est utilisée.</p>

<p>Je lance le harnais de test pour vérifier que mon refactoring n'a pas engendré de régression.</p>

<p>Finalement, je déplace mon test dans une nouvelle classe de test, associée à la nouvelle classe <code>EuropeanParrot</code>. J'en profite pour renommer le test avec un nom qui explicite le métier. Le nouveau test est le suivant :</p>

<pre><code class="java">@Test
public void should_have_speed_equal_to_base_speed() {
    // given
    Parrot parrot = new EuropeanParrot();

    // when
    double speed = parrot.getSpeed();

    // then
    assertEquals(speed, 12.0);
}
</code></pre>

<p>Je relance les tests pour m'assurer qu'ils sont toujours verts.</p>

<h2>Extraction des perroquets dans des sous-classes</h2>

<p>Comme pour le perroquet européen, j'extrait les deux autres perroquets (africain et norvégien) dans des sous-classes. J'itère les mêmes opérations que précédemment.</p>

<p>J'ai pu constater que le facteur externe affectant la vitesse du perroquet africain est le nombre de noix de coco qu'il porte. Ce facteur n'affectant que ce type de perroquet, il est supprimé de la classe mère et déplacé dans cette classe spécifique.
La classe <code>AfricanParrot</code> est la suivante :</p>

<pre><code class="java">public class AfricanParrot extends Parrot {

    private final int numberOfCoconuts;

    public AfricanParrot(int numberOfCoconuts) {
        super(ParrotTypeEnum.AFRICAN, 0, false);
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    public double getSpeed() {
        return Math.max(0, getBaseSpeed() - getLoadFactor() * numberOfCoconuts);
    }

    private double getLoadFactor() {
        return 9.0;
    }
}
</code></pre>

<p>De même, les facteurs affectant la vitesse du perroquet norvégien sont le voltage et le fait d'avoir été abbatu. Ces facteurs n'affectant que ce type de perroquet, ils sont supprimés de la classe mère et utilisés dans cette classe fille. La classe <code>NorwegianParrot</code> est la suivante :</p>

<pre><code class="java">public class NorwegianParrot extends Parrot {

    private final boolean isNailed;
    private final double voltage;

    public NorwegianParrot(double voltage, boolean isNailed) {
        super(ParrotTypeEnum.NORWEGIAN_BLUE);
        this.voltage = voltage;
        this.isNailed = isNailed;
    }

    @Override
    public double getSpeed() {
        return (isNailed) ? 0 : getBaseSpeed(voltage);
    }

    private double getBaseSpeed(double voltage) {
        return Math.min(24.0, voltage * getBaseSpeed());
    }
}
</code></pre>

<h2>Abstraction de la classe mère</h2>

<p>Après ces étapes d'extraction, la classe <code>Parrot</code> est comme suit :</p>

<pre><code class="java">public class Parrot {

    private ParrotTypeEnum type;

    public Parrot(ParrotTypeEnum _type) {
        this.type = _type;
    }

    public double getSpeed() {
        switch (type) {
            case EUROPEAN:
                throw new IllegalStateException("Should be overridden");
            case AFRICAN:
                throw new IllegalStateException("Should be overridden");
            case NORWEGIAN_BLUE:
                throw new IllegalStateException("Should be overridden");
        }
        throw new RuntimeException("Should be unreachable");
    }

    protected double getBaseSpeed() {
        return 12.0;
    }

}
</code></pre>

<p>La méthode <code>getSpeed</code> n'étant plus utilisée, je la rends abstraite, ainsi que la classe.<br/>
Je relance le harnais de test pour vérifier qu'il n'y a pas eu de régression.</p>

<p>De plus, je supprime l'énumération <code>ParrotTypeEnum</code> portant sur le type de perroquet car elle n'a plus lieu d'être. Par conséquent, les appels du constructeur de la super classe dans les classes filles disparaissent également. Je relance les tests pour vérifier qu'ils passent encore.<br/>
La classe <code>Parrot</code> devient :</p>

<pre><code class="java">public abstract class Parrot {

    public abstract double computeSpeed();

    protected double getBaseSpeed() {
        return 12.0;
    }

}
</code></pre>

<h2>Conclusion</h2>

<p>Ce kata permet de remplacer une structure conditionnelle par du polymorphisme. Chacune des classes n'a plus qu'une seule raison de changer. De plus, pour ajouter un nouveau type de perroquet, il suffit de créer une nouvelle classe qui hérite de la classe <code>Parrot</code>, sans avoir à modifier quoi que ce soit par ailleurs. Le code est donc plus SOLID.
Un autre exemple de ce type de refactoring a été développé sur une des vidéos de ma chaîne YouTube <a href="https://www.youtube.com/watch?v=sxQAULX96P0">Crafties</a>.</p>
]]></content>
  </entry>
  
</feed>
