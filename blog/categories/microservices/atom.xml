<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: microservices | Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/blog/categories/microservices/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2018-07-25T17:07:45+02:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Write Robust Component Tests]]></title>
    <link href="https://nphumbert.github.io/blog/2017/09/16/how-to-write-robust-component-tests/"/>
    <updated>2017-09-16T13:37:12+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/09/16/how-to-write-robust-component-tests</id>
    <content type="html"><![CDATA[<p>Component tests allow to test complete use cases from end to end. They are often expensive especially in terms of setup and execution time. Thus, thought needs to be given to define their scope. Nevertheless, they are required in order to check and document the overall behaviour of the application or the microservice.</p>

<p>I have noticed that, in the context of microservices, these tests are very cost-effective. Indeed, they can be quite easy to setup because the already existing external API of the microservice can often be used directly without the need to setup additional things (like a fake server for instance). Moreover, the scope of a microservice is generally limited and can be tested exhaustively in isolation.</p>

<p>The goal of this article is to show how to make these tests robust. The main idea is to make them independent of the implementation.</p>

<!-- more -->


<p>The following example shows a Gherkin specification, for a booking HTTP API, that is very coupled to the technical implementation:
<code>gherkin
Scenario: Get an error when trying to book a hotel with no vacancy
    Given Get to hotel service "/api/hotel/1234" returns a response with the status code 200 and the body:
        """
        {
          "id": "1234",
          "name": "Ritz",
          "availableRooms": 0
        }
        """
    Given Get to user service "/api/user/456" returns a response with the status code 200 and the body:
        """
        {
          "id": "456",
          "firstName": "John",
          "lastName": "Doe"
        }
        """
    When I post "http://my.app.fr:8080/booking/api/" on the "booking" application with the following body:
        """
        {
          "userId": "456",
          "hotelId": "1234",
          "from": "2017-09-16",
          "to": "2017-09-24"
        }
        """
    Then I get a response with the status code 200
    And I get a JSON response with the body:
        """
        {
          "errors" : [ {
            "code" : 12,
            "message" : "There is no room available for this booking request"
          } ]
        }
        """
</code></p>

<p>This is the associated Java code to the first step (the framework used is Cucumber):
<code>java
@Given("^Get to hotel service \"([^\"]*)\" returns a response with the status code (\\d+) and the body:$$")
public void getToHotelServiceReturnsAResponseWithTheStatusCodeAndTheBody(String uri, int statusCode, String body) {
    hotelWireMockServer.stubFor(get(urlEqualTo(uri))
        .willReturn(aResponse()
            .withStatus(statusCode)
            .withHeader("Content-Type", MediaType.APPLICATION_JSON_VALUE)
            .withBody(body)
        )
    );
}
</code></p>

<p>It is possible to make the test more explicit and functional. For instance, instead of describing HTTP calls and responses in the steps, it is possible to write them in plain English. The first steps in the Gherkin file can be replaced by:</p>

<pre><code class="gherkin">Given There is no vacancy for the hotel "Ritz" of id 1234
Given The following users exist:
    | id   | firstName | lastName |
    | 456  | John      | Doe      |
</code></pre>

<p>The associated Java code is now the following:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Given</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;^</span><span class="n">There</span> <span class="n">is</span> <span class="n">no</span> <span class="n">vacancy</span> <span class="k">for</span> <span class="n">the</span> <span class="n">hotel</span> <span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;([^</span><span class="err">\</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;]*)</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="n">of</span> <span class="nf">id</span> <span class="o">(</span><span class="err">\</span><span class="n">d</span><span class="o">+)</span><span class="n">$</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">thereIsNoVacancyForTheHotelOfId</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">hotelWireMockServer</span><span class="o">.</span><span class="na">stubFor</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">urlEqualTo</span><span class="o">(&amp;</span><span class="n">rdquo</span><span class="o">;/</span><span class="n">api</span><span class="o">/</span><span class="n">hotel</span><span class="o">/&amp;</span><span class="n">ldquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">id</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">willReturn</span><span class="o">(</span><span class="n">aResponse</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withStatus</span><span class="o">(</span><span class="n">statusCode</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withHeader</span><span class="o">(</span><span class="s">&quot;Content-Type&amp;rdquo;, MediaType.APPLICATION_JSON_VALUE)</span>
</span><span class='line'><span class="s">            .withBody(&amp;ldquo;{ \&quot;</span><span class="n">id</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;:</span> <span class="err">\</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="err">\</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">name</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;:</span> <span class="err">\</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="err">\</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">availableRooms</span><span class="err">\</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;:</span> <span class="mi">0</span> <span class="o">}&amp;</span><span class="n">ldquo</span><span class="o">;)</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nd">@Given</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;^</span><span class="n">The</span> <span class="n">following</span> <span class="n">users</span> <span class="nl">exist:</span><span class="n">$</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">theFollowingUsersExist</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">UserDTO</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">users</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span>
</span><span class='line'>        <span class="n">user</span> <span class="o">-&gt;</span> <span class="n">userWireMockServer</span><span class="o">.</span><span class="na">stubFor</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">urlEqualTo</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;/</span><span class="n">api</span><span class="o">/</span><span class="n">user</span><span class="o">/&amp;</span><span class="n">rdquo</span><span class="o">;</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">id</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">willReturn</span><span class="o">(</span><span class="n">aResponse</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withStatus</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withHeader</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">Content</span><span class="o">-</span><span class="n">Type</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;,</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withBody</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">asJson</span><span class="o">())</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We notice that the purely technical details like the URL, the JSON response and the HTTP status are now specified in the Java code. This allows to make the Gherkin specification more focused on the behaviour, clearer and more concise. The maintainability and robustness of this test are hence increased.</p>

<p>The initial test is now the following:
<code>gherkin
Scenario: Get an error when trying to book a hotel with no vacancy
    Given There is no vacancy for the hotel "Ritz" of id 1234
    Given The following users exist:
        | id   | firstName | lastName |
        | 456  | John      | Doe      |
    When I post "http://my.app.fr:8080/booking/api/" on the "booking" application with the following body:
        """
        {
          "userId": "456",
          "hotelId": "1234",
          "from": "2017-09-16",
          "to": "2017-09-24"
        }
        """
    Then I get a response with the status code 200
    And I get a JSON response with the body:
        """
        {
          "errors" : [ {
            "code" : 12,
            "message" : "There is no room available for this booking request"
          } ]
        }
        """
</code></p>

<p>Since this microservice is an HTTP API, it can be relevant to keep the <code>When</code> and <code>Then</code> in a technical form. Indeed, one can argue that the HTTP status and the format of the exchanged messages are part of its behaviour.</p>

<h2>Conclusion</h2>

<p>A component test must explicitely describe a real use case. In order to do that, it is important to make it as independent as possible of the implementation. This article shows a way to go from a test highly coupled to the implementation to a test more functional and concise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot]]></title>
    <link href="https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix/"/>
    <updated>2017-07-23T13:33:38+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix</id>
    <content type="html"><![CDATA[<p>In a microservices architecture, several things can go wrong. A middleware, the network or the service you want to contact can be down. In this world of uncertainty, you have to anticipate problems in order not to break the entire chain and throw an error to the end user when you could offer a partially degraded service instead.</p>

<p>The goal of this article is to show how to implement the circuit breaker pattern using Hystrix, Feign Client and Spring Boot.</p>

<!-- more -->


<h2>Feign Client Crash Course</h2>

<p><a href="https://github.com/OpenFeign/feign">Feign</a> is an HTTP client created by Netflix to make HTTP communications easier. It is integrated to Spring Boot with the <code>spring-cloud-starter-feign</code> starter.</p>

<p>To create a client to consume an HTTP service, an interface annotated with <code>@FeignClient</code> must be created. Endpoints can be declared in this interface using an API that is very close to the Spring MVC API. The <code>@EnableFeignClients</code> annotation must also be added to a Spring Configuration class.</p>

<pre><code class="java">@Configuration
@EnableFeignClients
public class FeignConfiguration {

}
</code></pre>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos")
public interface VideoClient {

    @PostMapping(value = "/api/videos/suggest")
    List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<p>An instance of <code>VideoClient</code> is automagically injected into the Spring application context and can be autowired and used throughout the application. Moreover, if the <code>videos</code> microservice is registred to the same discovery service as the current microservice, there is no need for an URL as it will be retrieved for you based on the <code>name</code>.</p>

<p>If the <code>videos</code> service, a middleware or the network happens to be down or overloaded, the <code>suggest</code> method will throw a <code>FeignException</code> that will be propagated throughout the stack if not caught.</p>

<h2>Create a Fallback Implementation</h2>

<p>Fortunately, Spring Cloud comes with a solution to this problem: a circuit breaker. In this article, we will use <a href="https://github.com/Netflix/Hystrix">Hystrix</a>. It is also created by Netflix and also integrated to Spring Boot using the <code>spring-cloud-starter-hystrix</code> starter.</p>

<p>The idea is to create an implementation of the <code>VideoClient</code> and mark it as the default behaviour if <code>videos</code> is unreachable or overloaded. Like a lot of other Spring features, it is enabled using an annotation: <code>@EnableCircuitBreaker</code>.</p>

<pre><code class="java">@Configuration
@EnableFeignClients
@EnableCircuitBreaker
public class FeignConfiguration {

}
</code></pre>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos", fallback = VideoClientFallback.class)
public interface VideoClient {

    @PostMapping(value = "/api/videos/suggest")
    List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<pre><code class="java">@Component
public class VideoClientFallback implements VideoClient {

    @Override
    public List&lt;Suggestion&gt; suggest(ViewingHistory history) {
      // Degraded service: no suggestion to offer
      return new ArrayList&lt;&gt;();
    }

}
</code></pre>

<p>A configuration property has to be added to the <code>application.yml</code> file of the Spring Boot application to tell Feign to enable Hystrix.</p>

<pre><code class="yml">feign:
    hystrix:
        enabled: true
</code></pre>

<p>Voila! Every time the remote service will be unavailable, the <code>suggest</code> method of the <code>VideoClientFallback</code> will be called and the end user will not get an error violently thrown at her.</p>

<h2>Keep Track of the Source Error</h2>

<p>With this setup, the fallback will be called regardless of the initial error that will be swallowed. If you want to retrieve this error and do something with it, you can use a <code>FallbackFactory</code>.</p>

<pre><code class="java">@FeignClient(name = "videos", url = "http://localhost:9090/videos", fallbackFactory = VideoClientFallbackFactory.class)
public interface VideoClient {

  @PostMapping(value = "/api/videos/suggest")
  List&lt;Suggestion&gt; suggest(@RequestBody ViewingHistory history);

}
</code></pre>

<pre><code class="java">@Component
public class VideoClientFallbackFactory implements FallbackFactory&lt;VideoClient&gt; {

    @Override
    public VideoClient create(Throwable throwable) {
        return new VideoClientFallback(throwable);
    }

}
</code></pre>

<pre><code class="java">public class VideoClientFallback implements VideoClient {

    private final Throwable cause;

    public VideoClientFallback(Throwable cause) {
      this.cause = cause;
    }

    @Override
    public List&lt;Suggestion&gt; suggest(ViewingHistory history) {
        if (cause instanceof FeignException &amp;&amp; ((FeignException) cause).status() == 404) {
            // Treat the HTTP 404 status
        }

        return new ArrayList&lt;&gt;();
    }

}
</code></pre>

<h2>Conclusion</h2>

<p>Microservices foster low coupling between components and resiliency. Hence, it would be sad to throw an error every time a service or a middleware is down. The circuit breaker pattern explained in this article allows you to ensure the continuity of service, even if it has to be offered in a degraded manner. As always, Spring Boot is a great help to setup this mechanism very easily.</p>

<hr />

<p><em>This article has been written in collaboration with Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
</feed>
