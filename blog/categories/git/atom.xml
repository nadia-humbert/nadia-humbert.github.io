<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2018-07-25T17:07:45+02:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go Back in Time with Git]]></title>
    <link href="https://nphumbert.github.io/blog/2017/04/19/go-back-in-time-with-git/"/>
    <updated>2017-04-19T21:22:15+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/04/19/go-back-in-time-with-git</id>
    <content type="html"><![CDATA[<p>Recently, I conducted a workshop about how to go back in time with Git alongside <a href="https://twitter.com/rnowif">Renaud</a>. Here are the main points that were raised during this session.</p>

<!-- more -->


<h2>Case #1: Delete the Last Commit</h2>

<p>The initial Git tree used to illustrate this case is:</p>

<pre><code class="bash">* 7ec8248 N - (HEAD -&gt; master) Hello, world!
* 26af837 N - Hello, world
* c9b1299 N - Hello
</code></pre>

<p>The goal here is to delete the last commit so the resulting tree looks like this:</p>

<pre><code class="bash">* 26af837 N - (HEAD -&gt; master) Hello, world
* c9b1299 N - Hello
</code></pre>

<p>The easiest way to achieve this purpose is to use the <code>git reset</code> command.</p>

<pre><code class="bash">$ git reset --hard 26af837
</code></pre>

<p>It sets the current branch to the specified commit. The <code>--hard</code> option will discard all changes that have been made after the specified commit.</p>

<h2>Case #2: Create a Branch from a Previous Commit</h2>

<p>In this case, the initial Git tree is the same as before.</p>

<pre><code class="bash">* 7ec8248 N - (HEAD -&gt; master) Hello, world!
* 26af837 N - Hello, world
* c9b1299 N - Hello
</code></pre>

<p>We want to create a branch from the commit <code>26af837</code> to fix a bug for instance. The resulting tree should be the following:</p>

<pre><code class="bash">* ae77cf0 N - (HEAD -&gt; bug-fix) Fixed it!
| * 7ec8248 N - (master) Hello, world!
|/  
* 26af837 N - Hello, world
* c9b1299 N - Hello
</code></pre>

<p>First, we need to position ourselves on the commit:</p>

<pre><code class="bash">$ git checkout 26af837
</code></pre>

<p>Then, we are in the &lsquo;detached HEAD&rsquo; state which means that we are no longer on a branch and further commits will not be kept. Consequently, we create the branch and commit the bug fix:</p>

<pre><code class="bash">$ git checkout -b bug-fix
$ # Fix the bug ...
$ git commit -m "Fixed it!"
</code></pre>

<h2>Case #3: Put the Last Commit on a New Branch</h2>

<p>Here, we made a commit on the <code>master</code> branch by mistake and we want to transfer it to another branch.</p>

<p>The Git tree should go from this:</p>

<pre><code class="bash">* 7ec8248 N - (HEAD -&gt; master) Hello, world!
* 26af837 N - Hello, world
* c9b1299 N - Hello
</code></pre>

<p>to this:</p>

<pre><code class="bash">* 7ec8248 N - (HEAD -&gt; feature) Hello, world!
* 26af837 N - (master) Hello, world
* c9b1299 N - Hello
</code></pre>

<p>To do so, we just have to create the <code>feature</code> branch from the last commit and reset <code>master</code> to the previous one.</p>

<pre><code class="bash">$ git checkout -b feature
$ git checkout master
$ git reset --hard 26af837
$ git checkout feature
</code></pre>

<h2>Case #4: Rewrite History</h2>

<p>In this case, we want to completely remove a past commit from the Git tree.</p>

<p>The initial tree looks like this:</p>

<pre><code class="bash">* b1b5f0a N - (HEAD -&gt; master) Hello, world
* b7d38ac N - Add key.txt
* c9b1299 N - Hello
</code></pre>

<p>We want the resulting tree to show no sign of the commit <code>b7d38ac</code>:</p>

<pre><code class="bash">* efb44c9 N - (HEAD -&gt; master) Hello, world
* c9b1299 N - Hello
</code></pre>

<p>The <code>git rebase -i</code> command allows to rewrite the history of a branch from a specific starting point. It will prompt the list of all the commits since this starting point. You can perform different actions on these commits like reword a commit message, squash several commits into one, reordering and delete commits for instance. After these modifications, lines will be executed from top to bottom. More information about rewriting history can be found <a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">here</a>.</p>

<pre><code class="bash">$ git rebase -i HEAD~2
$ # Delete the line corresponding to the commit to remove.
</code></pre>

<p>Since we wanted to go two commits back, we used the notation <code>HEAD~2</code> to specify the starting point. Note that we could also have used the specific hash of the commit (<code>c9b1299</code>).</p>

<h2>Case #5: Revert a Commit</h2>

<p>During this workshop, an attendee talked about the <code>git revert</code> command. Unlike the other commands that we saw in this article, the <code>git revert</code> command do not modify past commits. It creates a <strong>new</strong> commit that is the exact opposite of the reverted commit.</p>

<p>For instance, if we start from this Git tree:</p>

<pre><code class="bash">* f999291 N - (HEAD -&gt; master) Hello, world
* a9f8fb3 N - Add key.txt
* c9b1299 N - Hello
</code></pre>

<p>and revert the commit a9f8fb3 which contains only a new file, a new commit that only contains the removal of this file will be created.</p>

<pre><code class="bash">$ git revert a9f8fb3
</code></pre>

<pre><code class="bash">* 55bc161 N - (HEAD -&gt; master) Revert "Add key.txt"
* f999291 N - Hello, world
* a9f8fb3 N - Add key.txt
* c9b1299 N - Hello
</code></pre>

<p>I think that this command could be used when several people are working on the branch in order to avoid a forced push on the remote repository. Moreover, it could also be used if you want to keep an explicit trace of this action in the tree for a particular reason.</p>

<h2>Last resort: Keep Calm and Use Git Reflog</h2>

<p>Renaud wrote an <a href="https://blog.crafties.fr/2017/04/11/git-reflog/">article</a> on the <code>git reflog</code> command to recover commits that appear to be lost. To illustrate what this command does, here is its ouput when used in the case #4:</p>

<pre><code class="bash">$ git reflog
efb44c9 HEAD@{0}: rebase -i (finish): returning to refs/heads/master
efb44c9 HEAD@{1}: rebase -i (pick): Hello, world
c9b1299 HEAD@{2}: rebase -i (start): checkout HEAD~2
26af837 HEAD@{3}: commit: Hello, world
712d068 HEAD@{4}: commit: Add key.txt
c9b1299 HEAD@{5}: commit (initial): Hello
</code></pre>

<p>You can see that the deleted commit (<code>712d068</code>) still appears in the reflog.</p>

<h2>Conclusion</h2>

<p>This article shows several ways to go back in time with Git. These commands could be used alone or combined to get you out of complicated situations or to rearrange your Git tree before a <code>git push</code> for instance.</p>
]]></content>
  </entry>
  
</feed>
