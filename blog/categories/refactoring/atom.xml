<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: refactoring | Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/blog/categories/refactoring/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2016-08-08T07:52:11+02:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring d'une application N-Tiers en utilisant le CQRS]]></title>
    <link href="https://nphumbert.github.io/blog/2016/06/26/refactoring-architecture-n-tiers-cqrs/"/>
    <updated>2016-06-26T18:14:40+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/06/26/refactoring-architecture-n-tiers-cqrs</id>
    <content type="html"><![CDATA[<p>CQRS, ou <em>Command Query Responsibility Segregation</em>, est une architecture où la partie <em>Command</em> (écriture) et la partie <em>Query</em> (lecture) du système sont séparées.</p>

<p>J'ai eu la chance d'assister récemment à une présentation de <a href="https://twitter.com/tjaskula">Tomasz Jaskula</a> nommée <a href="https://www.youtube.com/watch?v=5Sx_xO-eCE8">Recettes CQRS, pour bien cuisiner son architecture</a>. Je l'ai beaucoup appréciée, notamment car on voit les différentes étapes pour arriver à une architecture CQRS / Event Sourcing / DDD à partir d'une architecture N-Tiers &ldquo;classique&rdquo;.</p>

<p>L'objectif de cet article est de présenter ma compréhension et mon avis sur le CQRS en particulier.</p>

<!-- more -->


<h2>Mise en place</h2>

<p>Le passage d'une architecture N-Tiers à une architecture CQRS est relativement simple, comme montré ci-dessous.</p>

<p><img class="center" src="/images/cqrs.png"></p>

<p>Concrètement, je pense que cela consiste tout d'abord à identifier les requêtes associées à chacune des vues et à les regrouper dans des classes dédiées. Ces classes formeront la partie lecture de l'architecture.<br/>
Ensuite, les objets retournés par ces requêtes sont remplacés par des DTO qui ne contiennent plus que les informations nécessaires à la construction de la vue associée.<br/>
Finalement, le modèle d'écriture peut être débarrassé de toutes ses méthodes et propriétés transitoires, qui ne servaient seulement qu'à de la lecture.</p>

<p>Cette architecture apporte des avantages en termes de maintenabilité et de performances mais peut encore être améliorée.</p>

<h2>Conséquences</h2>

<h3>Augmentation de la maintenabilité</h3>

<p>L'application du CQRS simplifie grandement le modèle d'écriture. En effet, il arrive souvent que des propriétés <em>transient</em> soient calculées uniquement pour de l'affichage. Ces propriétés, ainsi que les méthodes associées, alourdissent le modèle et n'apportent pas de valeur pour les traitements métiers.</p>

<p>Les services, parfois très lourds, sont remplacés par des classes spécialisées, concises et cohérentes. Ceci permet donc de mieux respecter le <em>Single Responsibility Principle (SRP)</em> ainsi que l'<em>Interface Segregation Principle (ISP)</em>. De plus, il n'y aura plus de méthodes &ldquo;passe-plat&rdquo; dans les services car celles-ci seront directement implémentées dans les classes de lecture.</p>

<p>Finalement, l'ajout d'une nouvelle vue ne risque pas d'engendrer de régression car il s'agit simplement d'ajouter une nouvelle classe de lecture ainsi que le(s) DTO associé(s), sans modifier le reste.</p>

<h3>Amélioration des performances</h3>

<p>La séparation de la lecture et de l'écriture permet d'améliorer les performances du système. En effet, il est difficile d'optimiser à la fois la mise à jour et la lecture dans une base de données. Par exemple, l'ajout d'un index améliore grandement les performances à la lecture mais affecte sensiblement l'écriture.</p>

<p>Ces deux opérations pouvant être séparées dans deux bases différentes, il devient alors possible d'optimiser chacune des bases pour son utilisation particulière. De plus, les données de la base de lecture peuvent être dénormalisées, ce qui simplifie grandement les requêtes effectuées et peut les rendre bien plus efficaces.</p>

<h3>Pistes d'amélioration</h3>

<p>Selon moi, la principale difficulté du CQRS réside dans l'alimentation de la base de lecture à partir de la base d'écriture. Il est possible de la réaliser à l'aide d'un <em>batch</em> qui se lancera régulièrement. Cependant, l'application ne serait plus en temps réel.<br/>
Une alternative pourrait alors être d'écrire dans la base de lecture en même temps que dans la base d'écriture. Cette solution n'est pas idéale pour moi car elle ne supprime pas le couplage entre la lecture et l'écriture. De plus, si cette solution est implémentée via un mécanisme synchrone, il est impossible de paralléliser les traitements lorsque le système est très chargé, ce qui peut affecter nettement les performances.</p>

<p>La solution d'utiliser des événements asynchrones proposée par Tomasz me semble la plus adaptée pour résoudre ces problèmes. Comme il l'a indiqué, il faut néanmoins analyser le besoin et la stratégie d'entreprise ainsi que les ressources disponibles avant de se lancer dans la mise en place d'une telle architecture.</p>

<h2>Conclusion</h2>

<p>Le CQRS est une architecture simple à comprendre et à mettre en place. Elle permet d'augmenter la maintenabilité du code et d'améliorer les performances des vues. Je pense qu'elle peut être mise en place sur un projet (ou une de ses parties) dès que les vues se multiplient et que les services commencent à grossir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polymorphisme avec le kata parrot refactoring]]></title>
    <link href="https://nphumbert.github.io/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring/"/>
    <updated>2016-04-20T16:26:03+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring</id>
    <content type="html"><![CDATA[<p>Ce kata est tiré d'un exemple du livre &ldquo;Refactoring, Improving the Design of Existing Code&rdquo; de Martin Fowler, et a été créé par Emilie Bache.
L'exemple contient des signes de mauvais design et permet notamment de pratiquer le polymorphisme.<br/>
Dans cet article, une solution à ce kata sera développée. Le projet qui a servi de support se trouve sur <a href="https://github.com/nphumbert/kata-parrot-refactoring">GitHub</a> avec la solution respective.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Il s'agit d'un projet où l'on calcule la vitesse d'un perroquet en fonction de son origine. La classe <code>Parrot</code> initiale est la suivante :</p>

<pre><code class="java">public class Parrot {

    private ParrotTypeEnum type;
    private int numberOfCoconuts = 0;
    private double voltage;
    private boolean isNailed;

    public Parrot(ParrotTypeEnum _type, int numberOfCoconuts, double voltage, boolean isNailed) {
        this.type = _type;
        this.numberOfCoconuts = numberOfCoconuts;
        this.voltage = voltage;
        this.isNailed = isNailed;
    }

    public double getSpeed() {
        switch (type) {
            case EUROPEAN:
                return getBaseSpeed();
            case AFRICAN:
                return Math.max(0, getBaseSpeed() - getLoadFactor() * numberOfCoconuts);
            case NORWEGIAN_BLUE:
                return (isNailed) ? 0 : getBaseSpeed(voltage);
        }
        throw new RuntimeException("Should be unreachable");
    }

    private double getBaseSpeed(double voltage) {
        return Math.min(24.0, voltage * getBaseSpeed());
    }

    private double getLoadFactor() {
        return 9.0;
    }

    private double getBaseSpeed() {
        return 12.0;
    }
}
</code></pre>

<p>Cette classe utilise une structure conditionnelle dans la méthode <code>getSpeed</code> permettant de calculer la vitesse du perroquet. Ceci n'est pas convenable car il faudrait ajouter une nouvelle structure de ce type à chaque fois qu'un comportement dépend du type de perroquet. De plus, il faudrait ajouter une clause à chacune de ces structures dès qu'un nouveau type de perroquet est ajouté. Finalement, si la manière de calculer la vitesse d'un des types de perroquet changeait, il faudrait modifier cette classe. Cela implique que cette classe a plusieurs raisons de changer : elle ne respecte donc pas le <a href="https://www.youtube.com/watch?v=-mroBlWUBBM">Single Responsibility Principle</a>.</p>

<h2>Lecture des tests et début du refactoring</h2>

<p>Je commence par lire les tests existants. Je remarque qu'il y a des tests associés à chaque type de perroquet.
Je décide de commencer par traiter les cas concernant le perroquet européen. Il y a un seul test associé à ce perroquet :</p>

<pre><code class="java">@Test
public void getSpeedOfEuropeanParrot() {
    Parrot parrot = new Parrot(ParrotTypeEnum.EUROPEAN, 0, 0, false);
    assertEquals(parrot.getSpeed(), 12.0);
}
</code></pre>

<p>Je lance le harnais de test pour m'assurer que tous les tests sont verts et que je pars donc d'une bonne base.</p>

<p>Je remplace dans ce test la classe <code>Parrot</code> par la classe fille <code>EuropeanParrot</code>. Le constructeur de cette nouvelle classe n'a aucun paramètre. En effet, les valeurs passées au constructeur de la classe mère sont toutes à des valeurs par défaut.<br/>
Comme il n'y a qu'un seul test associé à ce perroquet, il est déduit que la vitesse de ce perroquet n'est affectée par aucun paramètre externe. L'implémentation vient confirmer cette affirmation et qu'il ne s'agit pas d'un oubli de test.</p>

<p>Dans la nouvelle classe, j'appelle le contructeur de la classe mère et je surcharge la méthode <code>getSpeed</code> :
```java
public class EuropeanParrot extends Parrot {</p>

<pre><code>public EuropeanParrot() {
    super(ParrotTypeEnum.EUROPEAN, 0, 0, false);
}

@Override
public double getSpeed() {
    return getBaseSpeed();
}
</code></pre>

<p>}
<code>``
La méthode</code>getBaseSpeed()<code>est toujours celle de la classe mère avec une nouvelle visibilité :</code>protected`. En effet, cette méthode est utilisée lors du calcul de la vitesse de tous les types de perroquet.</p>

<p>De plus, je remplace l'implémentation dans la classe mère par un déclenchement de l'exception <code>IllegalStateException</code>. Ainsi, je peux être certaine qu'il s'agit de la nouvelle implémentation qui est utilisée.</p>

<p>Je lance le harnais de test pour vérifier que mon refactoring n'a pas engendré de régression.</p>

<p>Finalement, je déplace mon test dans une nouvelle classe de test, associée à la nouvelle classe <code>EuropeanParrot</code>. J'en profite pour renommer le test avec un nom qui explicite le métier. Le nouveau test est le suivant :</p>

<pre><code class="java">@Test
public void should_have_speed_equal_to_base_speed() {
    // given
    Parrot parrot = new EuropeanParrot();

    // when
    double speed = parrot.getSpeed();

    // then
    assertEquals(speed, 12.0);
}
</code></pre>

<p>Je relance les tests pour m'assurer qu'ils sont toujours verts.</p>

<h2>Extraction des perroquets dans des sous-classes</h2>

<p>Comme pour le perroquet européen, j'extrait les deux autres perroquets (africain et norvégien) dans des sous-classes. J'itère les mêmes opérations que précédemment.</p>

<p>J'ai pu constater que le facteur externe affectant la vitesse du perroquet africain est le nombre de noix de coco qu'il porte. Ce facteur n'affectant que ce type de perroquet, il est supprimé de la classe mère et déplacé dans cette classe spécifique.
La classe <code>AfricanParrot</code> est la suivante :</p>

<pre><code class="java">public class AfricanParrot extends Parrot {

    private final int numberOfCoconuts;

    public AfricanParrot(int numberOfCoconuts) {
        super(ParrotTypeEnum.AFRICAN, 0, false);
        this.numberOfCoconuts = numberOfCoconuts;
    }

    @Override
    public double getSpeed() {
        return Math.max(0, getBaseSpeed() - getLoadFactor() * numberOfCoconuts);
    }

    private double getLoadFactor() {
        return 9.0;
    }
}
</code></pre>

<p>De même, les facteurs affectant la vitesse du perroquet norvégien sont le voltage et le fait d'avoir été abbatu. Ces facteurs n'affectant que ce type de perroquet, ils sont supprimés de la classe mère et utilisés dans cette classe fille. La classe <code>NorwegianParrot</code> est la suivante :</p>

<pre><code class="java">public class NorwegianParrot extends Parrot {

    private final boolean isNailed;
    private final double voltage;

    public NorwegianParrot(double voltage, boolean isNailed) {
        super(ParrotTypeEnum.NORWEGIAN_BLUE);
        this.voltage = voltage;
        this.isNailed = isNailed;
    }

    @Override
    public double getSpeed() {
        return (isNailed) ? 0 : getBaseSpeed(voltage);
    }

    private double getBaseSpeed(double voltage) {
        return Math.min(24.0, voltage * getBaseSpeed());
    }
}
</code></pre>

<h2>Abstraction de la classe mère</h2>

<p>Après ces étapes d'extraction, la classe <code>Parrot</code> est comme suit :</p>

<pre><code class="java">public class Parrot {

    private ParrotTypeEnum type;

    public Parrot(ParrotTypeEnum _type) {
        this.type = _type;
    }

    public double getSpeed() {
        switch (type) {
            case EUROPEAN:
                throw new IllegalStateException("Should be overridden");
            case AFRICAN:
                throw new IllegalStateException("Should be overridden");
            case NORWEGIAN_BLUE:
                throw new IllegalStateException("Should be overridden");
        }
        throw new RuntimeException("Should be unreachable");
    }

    protected double getBaseSpeed() {
        return 12.0;
    }

}
</code></pre>

<p>La méthode <code>getSpeed</code> n'étant plus utilisée, je la rends abstraite, ainsi que la classe.<br/>
Je relance le harnais de test pour vérifier qu'il n'y a pas eu de régression.</p>

<p>De plus, je supprime l'énumération <code>ParrotTypeEnum</code> portant sur le type de perroquet car elle n'a plus lieu d'être. Par conséquent, les appels du constructeur de la super classe dans les classes filles disparaissent également. Je relance les tests pour vérifier qu'ils passent encore.<br/>
La classe <code>Parrot</code> devient :</p>

<pre><code class="java">public abstract class Parrot {

    public abstract double computeSpeed();

    protected double getBaseSpeed() {
        return 12.0;
    }

}
</code></pre>

<h2>Conclusion</h2>

<p>Ce kata permet de remplacer une structure conditionnelle par du polymorphisme. Chacune des classes n'a plus qu'une seule raison de changer. De plus, pour ajouter un nouveau type de perroquet, il suffit de créer une nouvelle classe qui hérite de la classe <code>Parrot</code>, sans avoir à modifier quoi que ce soit par ailleurs. Le code est donc plus SOLID.
Un autre exemple de ce type de refactoring a été développé sur une des vidéos de ma chaîne YouTube <a href="https://www.youtube.com/watch?v=sxQAULX96P0">Crafties</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Is Like Sleeping]]></title>
    <link href="https://nphumbert.github.io/blog/2016/03/10/refactoring-is-like-sleeping/"/>
    <updated>2016-03-10T15:12:42+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/03/10/refactoring-is-like-sleeping</id>
    <content type="html"><![CDATA[<p>Bob is a developer. Bob has been asked to add a brand new feature to the application. Bob would like to take this opportunity to refactor a little bit the code because it doesn&rsquo;t respect the good practices that he learnt from the last Software Craftsmanship meetup. Bob has been told that he couldn&rsquo;t refactor because there is currently not enough time to do it and because he needs to produce. Bob says to himself that there is never enough time anyways&hellip;</p>

<p>Sounds familiar? Indeed, refactoring is often seen as an activity without any value. Other things in life can also seem worthless. There is one that takes almost a third of our lives during which we do literally nothing: <em>sleeping</em>!</p>

<!-- more -->


<p>The number of things that we could do if we didn&rsquo;t sleep! However, after a few days, even hours, unpleasant events would eventually occur. Without sleep, the most trivial tasks can become very difficult to accomplish and weird mistakes can take place (like pouring orange juice into your bowl of cereal). After a while, sleep takes suddenly over, which can lead to accidents (because of drowsy driving, for example).</p>

<p>In the same way, postponing refactoring harms the project. Developments may take much longer than necessary and bugs may occur in features very apart from those that have been modified. Moreover, there is a moment where refactoring imposes itself unexpectedly: code can no longer be modified without risking important regressions. This can happen at a critical time of the project and thus jeopardize it. At this point, the feared verdict may be rendered: &ldquo;everything must be rewritten&rdquo;.</p>

<p>In general, regular refactoring is necessary to the good health of a project, just like sleeping every night is for ours. Thereafter, we are going to define refactoring in this context, when is it good to do it, how to prepare it properly and what to do if time is missing.</p>

<h2>What does refactoring mean?</h2>

<p>According to Michael Feathers, refactoring is &ldquo;the act of improving design without changing its behavior&rdquo;.</p>

<p>It is not necessarily about changing a whole class hierarchy or about implementing a complex design pattern but it could be as simple as renaming a variable, method or class, extracting a private method in an external class, gathering the attributes of a method into an object, etc.</p>

<p>Furthermore, we also consider that adding tests to an existing code base is refactoring. Indeed, a testable code is a first step towards a better design.</p>

<h2>When to refactor?</h2>

<p>The idea is not to try to fix the entire system every time. This would be unproductive and impossible to carry out. Also, it would be difficult to justify causing regressions in a portion of code too unrelated to the one that was supposed to be changed.</p>

<p>Refactoring is very efficient when it is targeted at the code that is related to the development of a feature. Moreover, it is preferable to refactor before adding new code in order to start on good bases.</p>

<h2>How to prepare it?</h2>

<p>The first thing to do before refactoring is to ensure that there are tests that cover the code that is going to be modified. Tests permit to verify that refactoring doesn&rsquo;t generate regression. If tests are missing, they need to be added before starting.</p>

<p>Sometimes it might be impossible to test a portion of code. In this case, you can perform the minimal refactoring required for implementing the tests.</p>

<h2>What to do if time is missing?</h2>

<p>If, like Bob, you lack the time, you must be pragmatic. It can be interesting to do small refactoring for each development. This allows to improve the design without consuming too much time and to prepare the ground for a larger refactoring.</p>

<h2>Conclusion</h2>

<p>Refactoring is essential in a project and should be done regularly. It allows to ensure that new features could be developed within a reasonable time and to limit regressions by improving the design. Furthermore, it allows developers to (re)take pleasure to make the product evolve.</p>

<p>We would like to conclude with the boy scout rule that tells us we should always leave the code in a better condition than when we found it. The application of this rule leads to improving the overall quality of the code and to the reversal of the technical debt.</p>

<hr />

<p><em>This article has been written in collaboration with Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactorer, c'est comme dormir]]></title>
    <link href="https://nphumbert.github.io/blog/2016/01/31/refactorer-c-est-comme-dormir/"/>
    <updated>2016-01-31T19:16:09+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/01/31/refactorer-c-est-comme-dormir</id>
    <content type="html"><![CDATA[<p>Robert est un développeur. On a demandé à Robert d'ajouter une nouvelle fonctionnalité à l'application. Robert aimerait bien en profiter pour refactorer un peu le code car il ne respecte pas les bonnes pratiques qu'il a pu voir lors du dernier meetup Software Craftsmanship. On dit alors à Robert qu'il ne peut pas refactorer car, en ce moment, il n'y a pas le temps pour ça et qu'il doit produire. Robert se dit qu'il n'y a de toutes façons jamais le temps&hellip;</p>

<p>Cette histoire vous semble familière ? En effet, le refactoring est souvent perçu comme n'apportant aucune valeur. D'autres choses dans la vie peuvent sembler n'apporter aucune valeur. Il y en a notamment une qui prend près du tiers de la vie d'une personne pendant laquelle cette personne ne fait littéralement rien : <em>dormir</em> !</p>

<!-- more -->


<p>Le nombre de choses que l'on pourrait faire si l'on ne dormait pas ! Cependant, au bout de quelques jours, voire quelques heures, des événements désagréables finiraient par survenir. Sans sommeil, la moindre des tâches peut devenir très longue à effectuer et des erreurs étranges peuvent arriver (comme verser du jus d'orange dans son bol de céréales). Après un certain temps, le sommeil prend le dessus de manière incontrôlée, ce qui peut conduire à des accidents (à cause d'une somnolence au volant par exemple).</p>

<p>De manière similaire, repousser le refactoring nuit au projet. Les développements peuvent prendre beaucoup plus de temps que nécessaire et des bugs peuvent survenir sur des fonctionnalités très éloignées de celles qui sont modifiées. De plus, il arrive un moment où le refactoring s'impose : le code ne peut plus être modifié sans risquer d'importantes régressions. Ceci peut se produire à un moment critique du projet et donc le mettre en péril. A ce moment là, la sentence tant redoutée peut tomber : « il faut tout réécrire ».</p>

<p>De manière globale, refactorer régulièrement est nécessaire à la bonne santé du projet, tout comme dormir chaque nuit l'est pour la notre. Dans la suite de cet article, nous allons définir ce que signifie refactorer dans ce contexte, quand est-il bon de le faire, comment bien le préparer et que faire si le temps manque.</p>

<h2>Que signifie refactorer ?</h2>

<p>Selon Michael Feathers, le refactoring est l'acte d'améliorer le <em>design</em> du code sans changer son comportement.</p>

<p>Il ne s'agit pas forcément de changer toute une hiérarchie de classes ou de mettre en place un <em>design pattern</em> très complexe mais cela peut être aussi simple que de renommer une variable, une méthode, une classe, d'extraire une méthode privée dans une classe externe, de regrouper les attributs d'une méthode dans un objet, etc.</p>

<p>De plus, nous considérons aussi qu'ajouter des tests à du code existant est du refactoring. En effet, un code testable est un premier pas vers un meilleur <em>design</em>.</p>

<h2>Quand faut-il refactorer ?</h2>

<p>L'idée n'est pas d'essayer de corriger l'intégralité du système à chaque fois. Ceci serait contre productif et impossible à mettre en place. De plus, il serait très difficilement justifiable de provoquer des régressions dans une partie du code très éloignée de celle qui est censée être modifiée.</p>

<p>Le refactoring est très efficace lorsqu'il est ciblé sur le code qui est concerné par le développement d'une fonctionnalité. De plus, il nous semble préférable de refactorer avant d'ajouter du nouveau code afin de démarrer sur des bases saines.</p>

<h2>Comment le préparer ?</h2>

<p>La première chose à faire avant de refactorer est de s'assurer qu'il y a des tests en place. Ces tests permettent de vérifier que le refactoring ne génère pas de régression. Si ces tests ne sont pas déjà en place, il faut les ajouter avant de commencer.</p>

<p>Il peut arriver qu'il soit impossible de tester une portion de code. Dans ce cas, il faut effectuer le refactoring minimum nécessaire à la mise en place des tests.</p>

<h2>Que faire si le temps manque ?</h2>

<p>Si, comme Robert, le temps vous manque, il faut faire preuve de pragmatisme. Il peut être intéressant d'effectuer de petits refactoing à chaque développement. Cela permet d'améliorer le <em>design</em> sans consommer trop de temps et de préparer le terrain pour de plus gros refactoring.</p>

<h2>Conclusion</h2>

<p>Le refactoring est essentiel dans un projet et doit être effectué régulièrement. Il permet d'assurer que les nouvelles fonctionnalités pourront être développées dans un temps raisonnable et de limiter les régressions en améliorant le <em>design</em>. Par ailleurs, il permet aussi aux développeurs de (re)prendre du plaisir à faire évoluer le produit.</p>

<p>Nous aimerions conclure avec la règle du boy scout qui indique que l'on doit toujours laisser le code dans un meilleur état que lorsqu'on l'a trouvé. L'application de cette règle conduit à l'amélioration de la qualité globale du code et à l'inversion de la dette technique.</p>

<hr />

<p><em>Cet article a été écrit en collaboration avec Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
</feed>
