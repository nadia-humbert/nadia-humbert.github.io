<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/blog/categories/test/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2017-04-22T11:27:08+02:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ecrire des tests avec Spring Boot 1.4]]></title>
    <link href="https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/"/>
    <updated>2016-08-08T07:11:29+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4</id>
    <content type="html"><![CDATA[<p>La version 1.4 de Spring Boot est sortie le 28 juillet 2016. Elle contient notamment des évolutions importantes au niveau de l'écriture des tests.<br/>
L'objectif de cet article est de voir comment migrer les tests d'un <em>controller</em> Spring MVC en utilisant les nouvelles fonctionnalités apportées par cette version.</p>

<!-- more -->


<h2>Modification du pom.xml</h2>

<p>Le starter de test de Spring Boot 1.4 embarque désormais les dépendances vers <a href="http://joel-costigliola.github.io/assertj">AssertJ</a>, <a href="https://github.com/skyscreamer/JSONassert">JSONassert</a> et <a href="https://github.com/jayway/JsonPath">JsonPath</a>. Il est donc possible de supprimer l'appel explicite vers ces dépendances dans notre pom, il suffit d'importer le starter :</p>

<pre><code class="xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;
</code></pre>

<h2>Configuration du test</h2>

<p>Dans Spring Boot 1.3, il est possible d'écrire un test d'intégration d'un <em>controller</em> avec Spring de la manière suivante :</p>

<pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = DemoApplication.class)
@WebAppConfiguration
public class DemoControllerTest {
    // ...
}
</code></pre>

<p>Le test ci-dessus va charger la classe de configuration Spring Boot <code>DemoApplication</code> à l'intérieur d'un contexte d'application de type <code>WebApplicationContext</code>. Il sera donc possible de <a href="https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers">tester le <em>controller</em> avec MockMvc</a>.</p>

<p>Depuis Spring Boot 1.4, l'annotation <code>@SpringBootTest</code>remplace toutes les annotations existantes pour faire des tests d'intégration avec Spring. De plus, le runner JUnit peut être remplacé par <code>SpringRunner</code> qui a été introduit dans la version 4.3 de Spring. Finalement, il n'est plus nécessaire de fournir explicitement la classe de configuration Spring Boot. En effet, la classe annotée avec <code>@SpringBootApplication</code> sera automatiquement utilisée. Le test devient donc :</p>

<pre><code class="java">@RunWith(SpringRunner.class)
@SpringBootTest
public class DemoControllerTest {
    // ...
}
</code></pre>

<h2>Gestion des mocks</h2>

<p>Pour tester un <em>controller</em> en isolation, il faut l'instancier en mockant ses dépendances (avec <a href="http://mockito.org">Mockito</a> par exemple) et le fournir au builder de <code>MockMvc</code>.</p>

<p>Avec Spring Boot 1.3, il est possible d'écrire ceci :</p>

<pre><code class="java">@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = DemoApplication.class)
@WebAppConfiguration
public class DemoControllerTest {

    private MockMvc mockMvc;

    @Mock
    private DemoService demoService;

    @InjectMocks
    private DemoController demoController;

    @Before
    public void setUp() {
        Mockito.initMocks(this);
        this.mockMvc = MockMvcBuilders.standaloneSetup(demoController).build();
        Mockito.when(demoService.call()).thenReturn(42);
    }
}
</code></pre>

<p>Spring Boot 1.4 permet de mocker les beans Spring avec Mockito grâce à une annotation spécifique. Ainsi, le bean de l'<code>ApplicationContext</code> est remplacé par un <em>mock</em> et Spring se charge donc de l'injecter dans le <em>controller</em>. Le test devient donc le suivant :</p>

<pre><code class="java">@RunWith(SpringRunner.class)
@SpringBootTest
public class DemoControllerTest {

    private MockMvc mockMvc;

    @MockBean
    private DemoService demoService;

    @Autowired
    private DemoController demoController;

    @Before
    public void setUp() {
        this.mockMvc = MockMvcBuilders.standaloneSetup(demoController).build();
        Mockito.when(demoService.call()).thenReturn(42);
    }
}
</code></pre>

<p>Dans ce test, le contexte d'application est chargé dans son intégralité avec le bean <code>DemoService</code> remplacé par un <em>mock</em>. Le <code>DemoController</code> injecté utilisera donc ce <em>mock</em>.</p>

<h2>Limitation de la configuration chargée</h2>

<p>Dans ce contexte, il n'est pas forcément nécessaire de charger tout le contexte d'application pour tester uniquement le <em>controller</em>.</p>

<p>Spring Boot 1.4 introduit l'annotation <code>@WebMvcTest</code> qui permet de tester spécifiquement des <em>controllers</em> Spring MVC avec <code>MockMvc</code>. Ainsi, seule la configuration Spring MVC sera chargée. Le test précédent peut donc s'écrire de la manière suivante :</p>

<pre><code class="java">@RunWith(SpringRunner.class)
@WebMvcTest(DemoController.class)
public class DemoControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private DemoService demoService;

    @Before
    public void setUp() {
        Mockito.when(demoService.call()).thenReturn(42);
    }
}
</code></pre>

<p><code>MockMvc</code> n'a plus besoin d'être instancié explicitement dans le <em>setup</em>. Grâce à l'annotation <code>@WebMvcTest</code>, l'instance peut être directement injectée dans le test.</p>

<h2>Conclusion</h2>

<p>Les évolutions apportées par Spring Boot 1.4 au niveau des tests permettent de simplifier l'écriture des tests d'intégration. En effet, il n'y a plus qu'une seule annotation à utiliser (<code>@SpringBootTest</code>). De plus, l'intégration de Mockito dans Spring Boot permet de remplacer directement des beans du contexte d'application par des <em>mocks</em>. Finalement, dans le cadre du test d'un <em>controller</em> Spring MVC avec <code>MockMvc</code>, l'annotation <code>@WebMvcTest</code> permet de ne charger que les beans nécessaires à l'exécution des tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ATDD et TDD double boucle]]></title>
    <link href="https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle/"/>
    <updated>2016-05-22T22:27:01+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle</id>
    <content type="html"><![CDATA[<p>L'<em>Acceptance Test Driven Development</em> est une pratique qui consiste à écrire un test d'acceptation dès la définition de la fonctionnalité à implémenter. Ce test permet ensuite de valider que l'implémentation de la fonctionnalité est terminée. En général, plusieurs composants unitaires sont nécessaires pour implémenter une fonctionnalité. Ces composants peuvent être développés en TDD dans une deuxième boucle de <em>feedback</em>.</p>

<p>L'objectif de cet article est de présenter l'ATDD et comment le mettre en pratique grâce à du TDD double boucle.</p>

<!-- more -->


<h2>ATDD</h2>

<p>L'ATDD encourage fortement la collaboration entre les développeurs et le métier afin d'écrire des tests d'acceptation précis et pertinents. Pour optimiser l'échange, ces tests peuvent être écrits avec un vocabulaire partagé et bien défini. Ils peuvent également suivre le pattern <em>Given</em> / <em>When</em> / <em>Then</em> comme dans l'exemple suivant :</p>

<pre><code># Given
Un client dépose 1000 euros sur son compte le 17/12/2015
Et il dépose 500 euros sur son compte le 18/12/2015
Et il retire 1500 euros de son compte le 19/12/2015

# When
Le client demande à imprimer son relevé de compte

# Then
Le relevé imprimé doit être égal à
   date | credit | debit | balance
   19/12/2015 | | 1500.00 | 0.00
   18/12/2015 | 500.00 | | 1500.00
   17/12/2015 | 1000.00 | | 1000.00
</code></pre>

<p>Pour implémenter la fonctionnalité, le développeur se sert de ce test d'acceptation et le traduit sous forme de code pour le rendre exécutable. Le test d'acceptation précédent peut être écrit en Java de la manière qui suit :</p>

<pre><code class="java">@Test
public void should_print_statement() {
    // given
    Account account = new Account();
    account.deposit(new BigDecimal("1000"), LocalDate.of(2015, Month.DECEMBER, 17));
    account.deposit(new BigDecimal("500"), LocalDate.of(2015, Month.DECEMBER, 18));
    account.withdraw(new BigDecimal("1500"), LocalDate.of(2015, Month.DECEMBER, 19));

    // when
    String statement = account.printStatement();

    // then
    assertThat(statement).isEqualTo(
            "date | credit | debit | balance\n" +
            "19/12/2015 | | 1500.00 | 0.00\n" +
            "18/12/2015 | 500.00 | | 1500.00\n" +
            "17/12/2015 | 1000.00 | | 1000.00"
    );
}
</code></pre>

<p>Ce test sera rouge tant que la fonctionnalité ne sera pas implémentée entièrement. Il servira de fil conducteur lors des développements.</p>

<h2>TDD double boucle</h2>

<p>La classe <code>Account</code> sert de point d'entrée à la fonctionnalité. Cependant, elle ne sera pas suffisante pour l'implémenter complètement. Le TDD double boucle consiste à développer la classe <code>Account</code> ainsi que ses dépendances en TDD, formant ainsi une boucle de <em>feedback</em> à l'intérieur de celle déjà formée par le test d'acceptation.</p>

<p><img class="center" src="/images/double_loop_tdd.png"></p>

<p>Dans l'exemple présenté ci-dessus, il est possible de déléguer l'impression d'un relevé à une classe <code>Statement</code> qui est une dépendance de <code>Account</code>. Lors de l'écriture du test de <code>Account</code>, cette classe sera mockée.</p>

<pre><code class="java">@Test
public void should_print_statement() {
    // given
    Statement statement = mock(Statement.class);
    when(statement.print()).thenReturn("printed statement");
    Account account = new Account(statement);

    // when
    String printedStatement = account.printStatement();

    // then
    assertThat(printedStatement).isEqualTo("printed statement");
}
</code></pre>

<p>De la même manière, la classe <code>Statement</code> sera développée en TDD en mockant sa dépendance vers <code>Transaction</code>, qui sera chargée d'imprimer une ligne du relevé. Finalement, cette classe <code>Transaction</code> sera implémentée en TDD.
Ainsi, le test d'acceptation passera au vert, ce qui indique que la fonctionnalité correspondante est terminée.</p>

<h2>Conclusion</h2>

<p>L'ATDD encourage la collaboration métier / développeur à travers la définition précise de tests d'acceptation qui permettent de valider les fonctionnalités. Ces dernières peuvent être implémentées en utilisant du TDD double boucle.</p>

<p>Vous trouverez une mise en pratique du TDD double boucle dans la vidéo <a href="https://www.youtube.com/watch?v=Qe84jbwyZ3U">Crafties #7</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Que faire lorsqu'une méthode privée veut être testée ?]]></title>
    <link href="https://nphumbert.github.io/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee/"/>
    <updated>2016-02-21T11:09:38+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee</id>
    <content type="html"><![CDATA[<p>Les tests automatisés servent à vérifier le bon comportement d'un objet (ou d'un ensemble d'objets), indépendamment de la manière dont ce comportement est implémenté. Le comportement d'un objet est décrit par son API publique (constructeurs, constantes et méthodes publiques). Les tests ne devraient donc utiliser que cette API.</p>

<p>Les méthodes privées (et <em>protected</em>) ne faisant pas partie de l'API publique d'un objet, elles ne devraient pas être appelées directement par le code de test.</p>

<p>Cet article a pour objectif de montrer comment réagir lorsqu'il paraît nécessaire de tester une méthode privée.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Un projet d'illustration a été créé afin de servir de support pour cet article. Il est disponible sur <a href="https://github.com/nphumbert/demo-private-method-test/">GitHub</a>.</p>

<p>Il s'agit de hasher le mot de passe lors de la création d'un utilisateur. Il faut imaginer que la méthode de hash est plus complexe (utilisation de librairies externes, de nombreuses conditions, etc.) pour donner tout son sens à la suite de l'article.</p>

<pre><code class="java">public class User {

    private final String login;
    private final String email;
    private final String password;

    public User(String login, String email, String password) {
        this.login = login;
        this.email = email;
        this.password = hash(password);
    }

    // ...

    private String hash(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            return Arrays.toString(md.digest(password.getBytes("UTF-8")));
        } catch (NoSuchAlgorithmException | IOException e) {
            throw new RuntimeException(e);
        }
    }
}
</code></pre>

<p>La méthode de hash étant considérée comme complexe, le besoin se fait sentir de tester son code en isolation. En effet, en partant de cette hypothèse, il n'est pas facilement possible de le tester complètement en utilisant uniquement des appels à l'API publique.</p>

<h2>Eviter la réflexion</h2>

<p>Parfois, la réflexion est utilisée pour augmenter la visibilité de la méthode privée durant la durée d'un test. Cette méthode peut alors être appelée directement.</p>

<pre><code class="java">@Test
public void should_hash_password() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
    // given
    User user = new User("jdoe", "john.doe@gmail.com", "secret");
    Method method = user.getClass().getDeclaredMethod("hash", String.class);
    method.setAccessible(true);

    // when
    String hashedPassword = (String) method.invoke(user, "secret");

    // then
    assertThat(hashedPassword, is("[43, -72, 13, 83, 123, 29, -93, -29, -117, -45, 3, 97, -86, -123, 86, -122, -67, -32, -22, -51, 113, 98, -2, -10, -94, 95, -23, 123, -11, 39, -94, 91]"));
}
</code></pre>

<p>Utiliser la réflexion dans ce cadre est dangereux !</p>

<p>En effet, toutes les actions ci-dessous auront pour effet de faire échouer le test, sans empêcher celui-ci de compiler :</p>

<ul>
<li>Renommer la méthode <code>hash</code>.</li>
<li>Changer l'ordre ou le type des attributs de la méthode <code>hash</code>.</li>
<li>Changer le type de retour de la méthode <code>hash</code>.</li>
<li>Supprimer la méthode <code>hash</code> en intégrant son code dans une autre méthode (ou dans le constructeur).</li>
</ul>


<p>Toutes ces actions sont des décisions d'implémentation qui n'ont aucun lien avec le comportement de la classe. Il n'est donc pas normal qu'un test échoue lorsque l'une de ces actions est effectuée.</p>

<p>Par ailleurs, l'API de réflexion Java manipulant des <code>String</code> et des <code>Object</code>, l'IDE n'est pas capable d'aider à corriger automatiquement le code de test correspondant.</p>

<h2>Déplacer le code dans une dépendance externe</h2>

<p>Selon moi, la meilleure manière de réagir est d'extraire le code, qui doit être testé, dans sa propre classe.</p>

<pre><code class="java">public interface HashProvider {
    String hash(String value);
}
</code></pre>

<pre><code class="java">public class Sha256HashProvider implements HashProvider {
    @Override
    public String hash(String value) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            return Arrays.toString(md.digest(value.getBytes("UTF-8")));
        } catch (NoSuchAlgorithmException | IOException e) {
            throw new RuntimeException(e);
        }
    }
}
</code></pre>

<p>La classe <code>User</code> de l'exemple est alors transformée comme ci-dessous.</p>

<pre><code class="java">public class User {

    private final String login;
    private final String email;
    private final String password;

    public User(String login, String email, String password, HashProvider hashProvider) {
        this.login = login;
        this.email = email;
        this.password = hashProvider.hash(password);
    }
    // ...
}
</code></pre>

<p>Par ailleurs, le test se trouve également modifié.</p>

<pre><code class="java">@Test
public void should_hash_password_when_create_user() {
    // given
    HashProvider hashProvider = mock(HashProvider.class);
    when(hashProvider.hash("secret")).thenReturn("hash");

    // when
    User user = new User("jdoe", "john.doe@gmail.com", "secret", hashProvider);

    // then
    assertThat(user.password(), is("hash"));
}
</code></pre>

<p>Le code respecte désormais le <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"><em>Single Responsibility Principle</em> (SRP)</a>. En effet, chaque classe ne fait qu'une seule chose. Il n'est donc, par exemple, plus nécessaire de modifier la classe <code>User</code> pour changer la logique de hashage.</p>

<p>Le <a href="https://en.wikipedia.org/wiki/Open/closed_principle"><em>Open/Closed Principle</em> (OCP)</a> est aussi mis en application car la classe <code>User</code> ne se préoccupe pas de l'implémentation de <code>HashProvider</code> qu'elle utilise. Il est donc possible de la changer sans que le code de <code>User</code> en soit affecté.</p>

<p>Tout le code est complètement testé en utilisant seulement les API publiques. Cela signifie que seul le comportement est testé, et non plus l'implémentation.</p>

<p>Finalement, le code de production ainsi que celui de test est simplifié.</p>

<h2>Conclusion</h2>

<p>Lorsqu'une méthode privée devient si complexe que le besoin de la tester en isolation se fait sentir, cela signifie que la classe fait trop de choses et que le SRP n'est sûrement pas respecté. Extraire cette méthode dans une classe externe permet de tester complètement ce code tout en améliorant le design en rendant le code plus SOLID.</p>

<p>Dès qu'une méthode privée est créée afin d'effectuer un traitement, il peut être utile de se demander si elle ne devrait pas être extraite, tout en restant pragmatique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Spring MVC Controllers]]></title>
    <link href="https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/"/>
    <updated>2015-10-31T12:54:08+01:00</updated>
    <id>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers</id>
    <content type="html"><![CDATA[<p>Since Spring 3.2 (January, 2013), it is possible to test Spring MVC controllers without an external framework.
The goal of this article is to show how to test Spring MVC controllers using only Spring testing capabilities.</p>

<!-- more -->


<p>To do so, a very simple Spring Boot project will be used as a support. You can find it on <a href="https://github.com/nphumbert/demo-test-spring-mvc">GitHub</a>. The controller to test will first be introduced. Then, explanations will be given on how to test it.</p>

<h2>Controller</h2>

<p>The controller that will be tested is showed below. It permits to do a search in a fruit list.</p>

<pre><code class="java">@Controller
public class ApplicationController {

    @RequestMapping(value = "/fruits", method = RequestMethod.GET)
    public String getFruits(@RequestParam(value = "search", required = false) String search, final Model model) {
        model.addAttribute("fruitBowl", search(search));
        return "fruits";
    }

    private List&lt;String&gt; search(String search) {
        if (StringUtils.isEmpty(search)) {
            return fruitBowl();
        }

        return fruitBowl().stream()
                .filter(fruit -&gt; fruit.startsWith(search))
                .collect(toList());
    }

    private List&lt;String&gt; fruitBowl() {
        return asList("banana", "orange");
    }
}
</code></pre>

<h2>Test</h2>

<p>The test class must be annotated with the following annotations:</p>

<ul>
<li><code>@RunWith(SpringJUnit4ClassRunner.class)</code> to benefit from Spring features in JUnit tests.</li>
<li><code>@SpringApplicationConfiguration(classes = DemoTestSpringMvcApplication.class)</code> to specify the configuration class that will be used during the test.</li>
<li><code>@WebAppConfiguration</code> to indicate that the Spring application context that must be loaded is a <code>WebApplicationContext</code>.</li>
</ul>


<p>The entry point used to perform the tests is the class <code>MockMvc</code>. Thereafter, the usage of this class will be explained.</p>

<h3>Set up</h3>

<p>The set up of the <code>MockMvc</code> class can be done as follows:</p>

<pre><code class="java">@Before
public void setUp() {
    ApplicationController controller = new ApplicationController(); // 1
    this.mockMvc = MockMvcBuilders.standaloneSetup(controller).build(); // 2
}
</code></pre>

<p>First, the controller must be instantiated (<code>1</code>). Then, the mock is initialized using the static method <code>MockMvcBuilders.standaloneSetup()</code> (<code>2</code>). At this point, the mock is ready to test the controller.</p>

<h3>Perform</h3>

<p>The method <code>MockMvc.perform()</code> allows to simulate HTTP requests to the controller. For instance, a GET request is done as follows:</p>

<pre><code class="java">mockMvc.perform(
    get("/fruits") // 1
        .param("search", "ban") // 2
);
</code></pre>

<p>The class <code>MockMvcRequestBuilders</code> provides static methods, such as <code>get</code> or <code>post</code>, to simulate HTTP requests on a particular endpoint of the controller (<code>1</code>). HTTP parameters can be added fluently to the request (<code>2</code>).</p>

<p>Furthermore, other static methods are provided by the <code>MockMvcRequestBuilders</code> class:</p>

<ul>
<li>HTTP verbs like <code>delete</code>, <code>put</code> or <code>patch</code>.</li>
<li><code>fileUpload</code> to upload binary files.</li>
<li>Others (<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html">documentation</a>).</li>
</ul>


<h3>Assert</h3>

<p>MockMvc permits to add assertions to the controller&rsquo;s response.</p>

<pre><code class="java">mockMvc.perform(get("/fruits")
    .param("search", "ban"))
    .andExpect(status().isOk()) // 1
    .andExpect(view().name("fruits")) // 2
    .andExpect(model().attribute("fruitBowl", contains("banana"))); // 3
</code></pre>

<p>Assertions are done with the <code>andExpect()</code> method. The class <code>MockMvcResultMatchers</code> provides static methods to do assertions on the HTTP status (<code>1</code>), the view asked by the controller (<code>2</code>) and on the model completed by the controller (<code>3</code>).</p>

<h2>Conclusion</h2>

<p>The Spring test framework is a very powerful, complete and simple way to test Spring MVC controllers. Its fluent API allows to write elegant and yet precise tests.</p>
]]></content>
  </entry>
  
</feed>
