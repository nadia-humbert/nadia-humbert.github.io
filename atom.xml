<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2018-12-21T09:48:51+01:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Java Spring Boot Microservices]]></title>
    <link href="https://nphumbert.github.io/blog/2017/09/17/testing-java-spring-cloud-microservices/"/>
    <updated>2017-09-17T16:09:24+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/09/17/testing-java-spring-cloud-microservices</id>
    <content type="html"><![CDATA[<p>Tests are an essential part of our codebase. At the very least, they minimize the risk of regression when we modify our code. There are several types of tests and each has a specific role: unit tests, integration tests, component tests, contract tests and end-to-end tests. It is crucial to understand the role of each type of test in order to leverage their potential.</p>

<p>The goal of this article is to describe a strategy to use them in order to test Java Spring Boot microservices. For every type of test, we will try to explain its role, its scope as well as tooling we like to use.</p>

<!-- more -->


<h2>Anatomy of a Microservice</h2>

<p>First of all, we will set up a common vocabulary to make this article as clear as possible.</p>

<p>A standard microservice is composed of:</p>

<ul>
<li><strong>Resources</strong>: HTTP controllers or AMQP listeners that will serve as the entry point of the microservice.</li>
<li><strong>Services / domain</strong>: Classes that will contain the business logic.</li>
<li><strong>Repositories</strong>: Classes that will expose an API to access a storage (like a database for instance).</li>
<li><strong>Clients</strong>: HTTP clients or AMQP producers that will communicate with external resources.</li>
<li><strong>Gateways</strong>: Classes that will serve as interfaces between domain services and clients by handling HTTP or AMQP related tasks and providing a clean API to the domain.</li>
</ul>


<h2>Types of Tests</h2>

<h3>Unit Tests</h3>

<p>Unit tests allow to test a unit (generally a method) in isolation. They are very cost-effective: easy to set up and very fast. Thus, they can give a fast feedback about the state of the application to quickly spot bugs or regressions. It is then advised to test every edge case and relevant combination with unit tests.
As a bonus, they can validate a design: if the code is really difficult to test, the design is probably bad.</p>

<p>In a microservice, like in any other codebase, it is crucial to unit test domain / service classes and every other class that contains logic.</p>

<p>The tooling we prefer to write unit tests is <a href="http://junit.org/junit5/">Junit</a> (to run the tests), <a href="http://joel-costigliola.github.io/assertj/">AssertJ</a> (to write assertions) and <a href="http://site.mockito.org/">Mockito</a> (to mock external dependencies).</p>

<h3>Integration Tests</h3>

<p>Integration tests are used to test the proper integration of the different bricks of the application. They are sometimes hard to set up and have to be carefully chosen. The idea is not to test all possible interactions but to choose relevant ones. The feedback of these tests is less fast than with unit tests because they are slower to execute. It is important to note that writing too many integration tests for the same interaction can be counter-productive. Indeed, the build time will be increased without any added value.</p>

<p>In a microservice, integration tests can be written for:</p>

<ul>
<li>Repositories, when the query is more complex than just a <code>findById</code>.</li>
<li>Services, in case of doubt on the interaction between the service and the respository (JPA or transaction issues for instance).</li>
<li>HTTP clients.</li>
<li>Gateways.</li>
</ul>


<p>Spring Boot provides a very good tooling to write integration tests. A typical integration test with Spring Boot looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringBootTest</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserGatewayIntTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">UserGateway</span> <span class="n">userGateway</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test must use the <code>SpringRunner</code> and be annotated with <code>@SpringBootTest</code>. It is then possible to inject a bean using <code>@Autowired</code> and to mock one using <code>@MockBean</code>.
In an integration test, the database should be embedded (H2 database is a good candidate) in order for the tests to be executable anywhere. For the same reason, external HTTP resources can be mocked using <a href="http://wiremock.org/">WireMock</a> and an SMTP server with <a href="https://github.com/voodoodyne/subethasmtp">SubEthatSMTP</a>.</p>

<p>In order to be able to mock external microservices, the port must be fixed. In production, microservices will register themselves to a registry and an URL will be dynamically assigned to them. If <a href="https://github.com/Netflix/ribbon">Ribbon</a> is used with Spring Cloud, it is possible to fix the URL in tests, by adding a property to the test <code>application.yml</code> (here, the external microservice name is <code>user</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">ribbon</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">listOfServers</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">localhost:9999</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Component Tests</h3>

<p>Component tests allow to test complete use cases from end to end. They are often expensive especially in terms of setup and execution time. Thus, thought needs to be given to define their scope. Nevertheless, they are required in order to check and document the overall behaviour of the application or the microservice.</p>

<p>In the context of microservices, these tests are very cost-effective. Indeed, they can be quite easy to set up because the already existing external API of the microservice can often be used directly without needing additional elements (like a fake server for instance). Moreover, the scope of a microservice is generally limited and can be tested exhaustively in isolation.</p>

<p>Component tests should be concise and easy to understand (see <a href="https://blog.crafties.fr/2017/09/16/how-to-write-robust-component-tests/">How to Write Robust Component Tests</a>). The goal is to test the behaviour of the microservice by writing a nominal case and very few edge cases. We noticed that writing the specification before implementing the feature can lead to very simple component tests. Moreover, it is a good practice to write the component tests in collaboration with the different project stakeholders in order to cover the feature in a very efficient way.</p>

<p>In component tests, an embedded database can also be used. Moreover, it is possible to mock HTTP and AMQP clients: this is not the place to test the integration with external resources (see <a href="https://blog.crafties.fr/2017/07/23/setup-a-circuit-breaker-with-hystrix/">Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot</a>).</p>

<p>An example of tooling we can use to write component tests is <a href="https://github.com/cucumber/cucumber/wiki/Gherkin">Gherkin</a> (to write the specifications) with <a href="https://cucumber.io/">Cucumber</a> (to run the tests).</p>

<p>In order to perform requests on the HTTP API of the microservice and make assertions on the response, <a href="https://blog.crafties.fr/2015/10/31/testing-spring-mvc-controllers/">MockMvc</a> can be used.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="nd">@SpringBootTest</span>
</span><span class='line'><span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="n">WebApplicationContext</span> <span class="n">context</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ResultActions</span> <span class="n">actions</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">webAppContextSetup</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^I get \&quot;([^\&quot;]*)\&quot; on the application$&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">iGetOnTheApplication</span><span class="o">(</span><span class="n">String</span> <span class="n">uri</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">actions</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">uri</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;^I get a Response with the status code (\\d+)$&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">iGetAResponseWithTheStatusCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">statusCode</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">actions</span><span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">is</span><span class="o">(</span><span class="n">statusCode</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to inject AMQP messages, the channel used by Spring Cloud Stream can also be injected directly into the test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// AMQP listener code</span>
</span><span class='line'><span class="nd">@EnableBinding</span><span class="o">(</span><span class="n">MyStream</span><span class="o">.</span><span class="na">Process</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyStream</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@StreamListener</span><span class="o">(</span><span class="s">&quot;myChannel&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleRevision</span><span class="o">(</span><span class="n">Message</span><span class="o">&lt;</span><span class="n">MyMessageDTO</span><span class="o">&gt;</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// handle message</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Process</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Input</span><span class="o">(</span><span class="s">&quot;myChannel&quot;</span><span class="o">)</span> <span class="n">SubscribableChannel</span> <span class="nf">process</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Cucumber step definition</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MyStream</span><span class="o">.</span><span class="na">Process</span> <span class="n">myChannel</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;^I publish an event with the following data:$&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">iPublishAnEventWithTheFollowingData</span><span class="o">(</span><span class="n">String</span> <span class="n">payload</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">myChannel</span><span class="o">.</span><span class="na">process</span><span class="o">().</span><span class="na">send</span><span class="o">(</span><span class="k">new</span> <span class="n">GenericMessage</span><span class="o">&lt;&gt;(</span><span class="n">payload</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, it may be important to fix the time to make tests more robust (see <a href="https://blog.crafties.fr/2017/07/20/controlling-time-in-java/">Controlling the Time in Java</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StepDefs</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span> <span class="nd">@MockBean</span> <span class="kd">private</span> <span class="n">ClockProvider</span> <span class="n">clockProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^The time is \&quot;([^\&quot;]*)\&quot;$&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">theTimeIs</span><span class="o">(</span><span class="n">String</span> <span class="n">datetime</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ZonedDateTime</span> <span class="n">date</span> <span class="o">=</span> <span class="n">ZonedDateTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">datetime</span><span class="o">);</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">clockProvider</span><span class="o">.</span><span class="na">get</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">Clock</span><span class="o">.</span><span class="na">fixed</span><span class="o">(</span><span class="n">date</span><span class="o">.</span><span class="na">toInstant</span><span class="o">(),</span> <span class="n">date</span><span class="o">.</span><span class="na">getZone</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Contract Tests</h3>

<p>The goal of contract tests is to automatically verify that the provider of a service and its consumers speak the same language. These tests do not aim to verify the behaviour of the components but simply their contracts. They are particularly useful for microservices since almost all their value lies in their interactions. It is crucial to guarantee that no provider breaks the contract used by its consumers.</p>

<p>The general idea is that consumers write tests that define the initial state of the provider, the request sent by the consumer and the expected response. The provider must supply a server in the required state. The contract will automatically be verified against this server. This implies the following:</p>

<ul>
<li>on the consumer side: contract tests are written using the HTTP client. Given a provider state, assertions are made on the HTTP response.</li>
<li>on the provider side: only the HTTP resource should be instanciated. All its dependencies should be mocked in order to provide the required state.</li>
</ul>


<p>It is important to note that contract tests should stick to the real needs of the consumer. If a field is not used by a consumer, it should not be tested in the contract test. Then, the provider is free to update or delete every field that is not used by any consumer and we are sure that if tests fail, it is for a good reason.</p>

<p>The tool we like to use to write and execute contract tests is <a href="https://docs.pact.io/">Pact</a>. It is a very mature product that has plugins for a lot of languages (JVM, Ruby, .NET, Javascript, Go, Python, etc.). Moreover, it is well integrated with Spring MVC thanks to the <a href="https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-provider-spring">DiUS pact-jvm-provider-spring plugin</a>.
During the execution of the consumer tests, contracts (called pacts) are generated in JSON format. They can be shared with the provider using a service called the <a href="https://github.com/pact-foundation/pact_broker">Pact Broker</a>.</p>

<p>This is an example of a consumer test written with the <a href="https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-consumer-junit">DiUS pact-jvm-consumer-junit plugin</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_send_booking_request_and_get_rejection_response</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">AddressException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">RequestResponsePact</span> <span class="n">pact</span> <span class="o">=</span> <span class="n">ConsumerPactBuilder</span>
</span><span class='line'>            <span class="o">.</span><span class="na">consumer</span><span class="o">(</span><span class="s">&quot;front-office&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">hasPactWith</span><span class="o">(</span><span class="s">&quot;booking&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">given</span><span class="o">(</span><span class="s">&quot;The hotel 1234 has no vacancy&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">uponReceiving</span><span class="o">(</span><span class="s">&quot;a request to book a room&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">&quot;/api/book&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">method</span><span class="o">(</span><span class="s">&quot;POST&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="s">&quot;{&quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&quot;\&quot;hotelId\&quot;: 1234, &quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&quot;\&quot;from\&quot;: \&quot;2017-09-01\&quot;, &quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&quot;\&quot;to\&quot;: \&quot;2017-09-16\&quot;&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;}&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">willRespondWith</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">status</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">body</span><span class="o">(</span><span class="s">&quot;{ \&quot;errors\&quot; : [ \&quot;There is no room available for this booking request.\&quot; ] }&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">toPact</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">PactVerificationResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">runConsumerTest</span><span class="o">(</span><span class="n">pact</span><span class="o">,</span> <span class="n">config</span><span class="o">,</span> <span class="n">mockServer</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">BookingResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">bookingClient</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">aBookingRequest</span><span class="o">());</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getErrors</span><span class="o">()).</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;There is no room available for this booking request.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">PactVerificationResult</span><span class="o">.</span><span class="na">Ok</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the server side:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">RestPactRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Provider</span><span class="o">(</span><span class="s">&quot;booking&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@Consumer</span><span class="o">(</span><span class="s">&quot;front-office&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nd">@PactBroker</span><span class="o">(</span>
</span><span class='line'>        <span class="n">host</span> <span class="o">=</span> <span class="s">&quot;${PACT_BROKER_HOST}&quot;</span><span class="o">,</span> <span class="n">port</span> <span class="o">=</span> <span class="s">&quot;${PACT_BROKER_PORT}&quot;</span><span class="o">,</span> <span class="n">protocol</span> <span class="o">=</span> <span class="s">&quot;${PACT_BROKER_PROTOCOL}&quot;</span><span class="o">,</span>
</span><span class='line'>        <span class="n">authentication</span> <span class="o">=</span> <span class="nd">@PactBrokerAuth</span><span class="o">(</span><span class="n">username</span> <span class="o">=</span> <span class="s">&quot;${PACT_BROKER_USER}&quot;</span><span class="o">,</span> <span class="n">password</span> <span class="o">=</span> <span class="s">&quot;${PACT_BROKER_PASSWORD}&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BookingContractTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Mock</span> <span class="kd">private</span> <span class="n">BookingService</span> <span class="n">bookingService</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@InjectMocks</span> <span class="kd">private</span> <span class="n">BookingResource</span> <span class="n">bookingResource</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@TestTarget</span> <span class="kd">public</span> <span class="kd">final</span> <span class="n">MockMvcTarget</span> <span class="n">target</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MockMvcTarget</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">MessagingException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">target</span><span class="o">.</span><span class="na">setControllers</span><span class="o">(</span><span class="n">bookingResource</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@State</span><span class="o">(</span><span class="s">&quot;The hotel 1234 has no vacancy&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_have_no_vacancy</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">bookingService</span><span class="o">.</span><span class="na">book</span><span class="o">(</span><span class="n">eq</span><span class="o">(</span><span class="mi">1234L</span><span class="o">),</span> <span class="n">any</span><span class="o">(),</span> <span class="n">any</span><span class="o">())).</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">BookingResult</span><span class="o">.</span><span class="na">NO_VACANCY</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>End to End Tests</h3>

<p>End to end tests need the whole platform to be up and running to run entire business use cases across multiple microservices. They are very expensive and slow to run. These tests can be performed manually on a dedicated platform but have to be chosen with great care to maximize their benefits.</p>

<h2>To Sum up</h2>

<p><img class="center" src="https://nphumbert.github.io/images/microservices_testing_strategy.png"></p>

<h2>Conclusion</h2>

<p>Automatic tests are very important in the software development industry. A good testing strategy can help write more relevant, robust and maintainable tests. This article describes an example of strategy to test Java Spring Boot microservices.</p>

<hr />

<p><em>This article has been written in collaboration with Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Write Robust Component Tests]]></title>
    <link href="https://nphumbert.github.io/blog/2017/09/16/how-to-write-robust-component-tests/"/>
    <updated>2017-09-16T13:37:12+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/09/16/how-to-write-robust-component-tests</id>
    <content type="html"><![CDATA[<p>Component tests allow to test complete use cases from end to end. They are often expensive especially in terms of setup and execution time. Thus, thought needs to be given to define their scope. Nevertheless, they are required in order to check and document the overall behaviour of the application or the microservice.</p>

<p>I have noticed that, in the context of microservices, these tests are very cost-effective. Indeed, they can be quite easy to set up because the already existing external API of the microservice can often be used directly without needing additional elements (like a fake server for instance). Moreover, the scope of a microservice is generally limited and can be tested exhaustively in isolation.</p>

<p>The goal of this article is to show how to make these tests robust. The main idea is to make them independent of the implementation.</p>

<!-- more -->


<p>The following example shows a Gherkin specification, for a booking HTTP API, that is very coupled to the technical implementation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Scenario:</span><span class="nf"> Get an error when trying to book a hotel with no vacancy</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">Get to hotel service &quot;</span><span class="s">/api/hotel/1234</span><span class="nf">&quot; returns a response with the status code </span><span class="s">200</span><span class="nf"> and the body:</span>
</span><span class='line'><span class="nf">        </span><span class="k">&quot;&quot;&quot;</span><span class="s"></span>
</span><span class='line'><span class="s">        {</span>
</span><span class='line'><span class="s">          &quot;id&quot;: &quot;1234&quot;,</span>
</span><span class='line'><span class="s">          &quot;name&quot;: &quot;Ritz&quot;,</span>
</span><span class='line'><span class="s">          &quot;availableRooms&quot;: 0</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">        </span><span class="k">&quot;&quot;&quot;</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">Given </span><span class="nf">Get to user service &quot;</span><span class="s">/api/user/456</span><span class="nf">&quot; returns a response with the status code </span><span class="s">200</span><span class="nf"> and the body:</span>
</span><span class='line'><span class="nf">        </span><span class="k">&quot;&quot;&quot;</span><span class="s"></span>
</span><span class='line'><span class="s">        {</span>
</span><span class='line'><span class="s">          &quot;id&quot;: &quot;456&quot;,</span>
</span><span class='line'><span class="s">          &quot;firstName&quot;: &quot;John&quot;,</span>
</span><span class='line'><span class="s">          &quot;lastName&quot;: &quot;Doe&quot;</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">        </span><span class="k">&quot;&quot;&quot;</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I post &quot;</span><span class="s">http://my.app.fr:8080/booking/api/</span><span class="nf">&quot; on the &quot;</span><span class="s">booking</span><span class="nf">&quot; application with the following body:</span>
</span><span class='line'><span class="nf">        </span><span class="k">&quot;&quot;&quot;</span><span class="s"></span>
</span><span class='line'><span class="s">        {</span>
</span><span class='line'><span class="s">          &quot;userId&quot;: &quot;456&quot;,</span>
</span><span class='line'><span class="s">          &quot;hotelId&quot;: &quot;1234&quot;,</span>
</span><span class='line'><span class="s">          &quot;from&quot;: &quot;2017-09-16&quot;,</span>
</span><span class='line'><span class="s">          &quot;to&quot;: &quot;2017-09-24&quot;</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">        </span><span class="k">&quot;&quot;&quot;</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">I get a response with the status code </span><span class="s">200</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I get a JSON response with the body:</span>
</span><span class='line'><span class="nf">        </span><span class="k">&quot;&quot;&quot;</span><span class="s"></span>
</span><span class='line'><span class="s">        {</span>
</span><span class='line'><span class="s">          &quot;errors&quot; : [ {</span>
</span><span class='line'><span class="s">            &quot;code&quot; : 12,</span>
</span><span class='line'><span class="s">            &quot;message&quot; : &quot;There is no room available for this booking request&quot;</span>
</span><span class='line'><span class="s">          } ]</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">        </span><span class="k">&quot;&quot;&quot;</span><span class="nf"></span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the associated Java code to the first step (the framework used is Cucumber):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^Get to hotel service \&quot;([^\&quot;]*)\&quot; returns a response with the status code (\\d+) and the body:$$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">getToHotelServiceReturnsAResponseWithTheStatusCodeAndTheBody</span><span class="o">(</span><span class="n">String</span> <span class="n">uri</span><span class="o">,</span> <span class="kt">int</span> <span class="n">statusCode</span><span class="o">,</span> <span class="n">String</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">hotelWireMockServer</span><span class="o">.</span><span class="na">stubFor</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">urlEqualTo</span><span class="o">(</span><span class="n">uri</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">willReturn</span><span class="o">(</span><span class="n">aResponse</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withStatus</span><span class="o">(</span><span class="n">statusCode</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withHeader</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">,</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withBody</span><span class="o">(</span><span class="n">body</span><span class="o">)</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is possible to make the test more explicit and functional. For instance, instead of describing HTTP calls and responses in the steps, it is possible to write them in plain English. The first steps in the Gherkin file can be replaced by:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Given </span><span class="nf">There is no vacancy for the hotel &quot;</span><span class="s">Ritz</span><span class="nf">&quot; of id </span><span class="s">1234</span><span class="nf"></span>
</span><span class='line'><span class="k">Given </span><span class="nf">The following users exist:</span>
</span><span class='line'><span class="k">    |</span><span class="s"> id</span><span class="k">   |</span><span class="s"> firstName</span><span class="k"> |</span><span class="s"> lastName</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">    |</span><span class="s"> 456</span><span class="k">  |</span><span class="s"> John</span><span class="k">      |</span><span class="s"> Doe</span><span class="k">      |</span>
</span></code></pre></td></tr></table></div></figure>


<p>The associated Java code is now the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^There is no vacancy for the hotel \&quot;([^\&quot;]*)\&quot; of id (\\d+)$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">thereIsNoVacancyForTheHotelOfId</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">hotelWireMockServer</span><span class="o">.</span><span class="na">stubFor</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">urlEqualTo</span><span class="o">(</span><span class="s">&quot;/api/hotel/&quot;</span> <span class="o">+</span> <span class="n">id</span><span class="o">))</span>
</span><span class='line'>        <span class="o">.</span><span class="na">willReturn</span><span class="o">(</span><span class="n">aResponse</span><span class="o">()</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withStatus</span><span class="o">(</span><span class="n">statusCode</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withHeader</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">,</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">withBody</span><span class="o">(</span><span class="s">&quot;{ \&quot;id\&quot;: \&quot;&quot;</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">&quot;\&quot;, \&quot;name\&quot;: \&quot;&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span><span class="s">&quot;\&quot;, \&quot;availableRooms\&quot;: 0 }&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;^The following users exist:$&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">theFollowingUsersExist</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">UserDTO</span><span class="o">&gt;</span> <span class="n">users</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">users</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span>
</span><span class='line'>        <span class="n">user</span> <span class="o">-&gt;</span> <span class="n">userWireMockServer</span><span class="o">.</span><span class="na">stubFor</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="n">urlEqualTo</span><span class="o">(</span><span class="s">&quot;/api/user/&quot;</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">id</span><span class="o">))</span>
</span><span class='line'>            <span class="o">.</span><span class="na">willReturn</span><span class="o">(</span><span class="n">aResponse</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withStatus</span><span class="o">(</span><span class="mi">200</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withHeader</span><span class="o">(</span><span class="s">&quot;Content-Type&quot;</span><span class="o">,</span> <span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON_VALUE</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">withBody</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">asJson</span><span class="o">())</span>
</span><span class='line'>            <span class="o">)</span>
</span><span class='line'>        <span class="o">)</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We notice that the purely technical details like the URL, the JSON response and the HTTP status are now specified in the Java code. This allows to make the Gherkin specification more focused on the behaviour, clearer and more concise. Hence, this test is now more maintainable and robust.</p>

<p>The initial test is now the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='gherkin'><span class='line'><span class="k">Scenario:</span><span class="nf"> Get an error when trying to book a hotel with no vacancy</span>
</span><span class='line'><span class="k">    Given </span><span class="nf">There is no vacancy for the hotel &quot;</span><span class="s">Ritz</span><span class="nf">&quot; of id </span><span class="s">1234</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">Given </span><span class="nf">The following users exist:</span>
</span><span class='line'><span class="k">        |</span><span class="s"> id</span><span class="k">   |</span><span class="s"> firstName</span><span class="k"> |</span><span class="s"> lastName</span><span class="k"> |</span><span class="nf"></span>
</span><span class='line'><span class="k">        |</span><span class="s"> 456</span><span class="k">  |</span><span class="s"> John</span><span class="k">      |</span><span class="s"> Doe</span><span class="k">      |</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">When </span><span class="nf">I post &quot;</span><span class="s">http://my.app.fr:8080/booking/api/</span><span class="nf">&quot; on the &quot;</span><span class="s">booking</span><span class="nf">&quot; application with the following body:</span>
</span><span class='line'><span class="nf">        </span><span class="k">&quot;&quot;&quot;</span><span class="s"></span>
</span><span class='line'><span class="s">        {</span>
</span><span class='line'><span class="s">          &quot;userId&quot;: &quot;456&quot;,</span>
</span><span class='line'><span class="s">          &quot;hotelId&quot;: &quot;1234&quot;,</span>
</span><span class='line'><span class="s">          &quot;from&quot;: &quot;2017-09-16&quot;,</span>
</span><span class='line'><span class="s">          &quot;to&quot;: &quot;2017-09-24&quot;</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">        </span><span class="k">&quot;&quot;&quot;</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">Then </span><span class="nf">I get a response with the status code </span><span class="s">200</span><span class="nf"></span>
</span><span class='line'><span class="nf">    </span><span class="k">And </span><span class="nf">I get a JSON response with the body:</span>
</span><span class='line'><span class="nf">        </span><span class="k">&quot;&quot;&quot;</span><span class="s"></span>
</span><span class='line'><span class="s">        {</span>
</span><span class='line'><span class="s">          &quot;errors&quot; : [ {</span>
</span><span class='line'><span class="s">            &quot;code&quot; : 12,</span>
</span><span class='line'><span class="s">            &quot;message&quot; : &quot;There is no room available for this booking request&quot;</span>
</span><span class='line'><span class="s">          } ]</span>
</span><span class='line'><span class="s">        }</span>
</span><span class='line'><span class="s">        </span><span class="k">&quot;&quot;&quot;</span><span class="nf"></span>
</span></code></pre></td></tr></table></div></figure>


<p>Since this microservice is an HTTP API, it can be relevant to keep the <code>When</code> and <code>Then</code> in a technical form. Indeed, one can argue that the HTTP status and the format of the exchanged messages are part of its behaviour.</p>

<h2>Conclusion</h2>

<p>A component test must explicitely describe a real use case. In order to do that, it is important to make it as independent as possible of the implementation. This article shows a way to go from a test highly coupled to the implementation to a test more functional and concise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup a Circuit Breaker with Hystrix, Feign Client and Spring Boot]]></title>
    <link href="https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix/"/>
    <updated>2017-07-23T13:33:38+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/07/23/setup-a-circuit-breaker-with-hystrix</id>
    <content type="html"><![CDATA[<p>In a microservices architecture, several things can go wrong. A middleware, the network or the service you want to contact can be down. In this world of uncertainty, you have to anticipate problems in order not to break the entire chain and throw an error to the end user when you could offer a partially degraded service instead.</p>

<p>The goal of this article is to show how to implement the circuit breaker pattern using Hystrix, Feign Client and Spring Boot.</p>

<!-- more -->


<h2>Feign Client Crash Course</h2>

<p><a href="https://github.com/OpenFeign/feign">Feign</a> is an HTTP client created by Netflix to make HTTP communications easier. It is integrated to Spring Boot with the <code>spring-cloud-starter-feign</code> starter.</p>

<p>To create a client to consume an HTTP service, an interface annotated with <code>@FeignClient</code> must be created. Endpoints can be declared in this interface using an API that is very close to the Spring MVC API. The <code>@EnableFeignClients</code> annotation must also be added to a Spring Configuration class.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@EnableFeignClients</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignConfiguration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;videos&quot;</span><span class="o">,</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://localhost:9090/videos&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">VideoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/api/videos/suggest&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Suggestion</span><span class="o">&gt;</span> <span class="nf">suggest</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">ViewingHistory</span> <span class="n">history</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>An instance of <code>VideoClient</code> is automagically injected into the Spring application context and can be autowired and used throughout the application. Moreover, if the <code>videos</code> microservice is registred to the same discovery service as the current microservice, there is no need for an URL as it will be retrieved for you based on the <code>name</code>.</p>

<p>If the <code>videos</code> service, a middleware or the network happens to be down or overloaded, the <code>suggest</code> method will throw a <code>FeignException</code> that will be propagated throughout the stack if not caught.</p>

<h2>Create a Fallback Implementation</h2>

<p>Fortunately, Spring Cloud comes with a solution to this problem: a circuit breaker. In this article, we will use <a href="https://github.com/Netflix/Hystrix">Hystrix</a>. It is also created by Netflix and also integrated to Spring Boot using the <code>spring-cloud-starter-hystrix</code> starter.</p>

<p>The idea is to create an implementation of the <code>VideoClient</code> and mark it as the default behaviour if <code>videos</code> is unreachable or overloaded. Like a lot of other Spring features, it is enabled using an annotation: <code>@EnableCircuitBreaker</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@EnableFeignClients</span>
</span><span class='line'><span class="nd">@EnableCircuitBreaker</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeignConfiguration</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;videos&quot;</span><span class="o">,</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://localhost:9090/videos&quot;</span><span class="o">,</span> <span class="n">fallback</span> <span class="o">=</span> <span class="n">VideoClientFallback</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">VideoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/api/videos/suggest&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Suggestion</span><span class="o">&gt;</span> <span class="nf">suggest</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">ViewingHistory</span> <span class="n">history</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VideoClientFallback</span> <span class="kd">implements</span> <span class="n">VideoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Suggestion</span><span class="o">&gt;</span> <span class="nf">suggest</span><span class="o">(</span><span class="n">ViewingHistory</span> <span class="n">history</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Degraded service: no suggestion to offer</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A configuration property has to be added to the <code>application.yml</code> file of the Spring Boot application to tell Feign to enable Hystrix.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">feign</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">hystrix</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="l-Scalar-Plain">enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Voila! Every time the remote service will be unavailable, the <code>suggest</code> method of the <code>VideoClientFallback</code> will be called and the end user will not get an error violently thrown at her.</p>

<h2>Keep Track of the Source Error</h2>

<p>With this setup, the fallback will be called regardless of the initial error that will be swallowed. If you want to retrieve this error and do something with it, you can use a <code>FallbackFactory</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@FeignClient</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;videos&quot;</span><span class="o">,</span> <span class="n">url</span> <span class="o">=</span> <span class="s">&quot;http://localhost:9090/videos&quot;</span><span class="o">,</span> <span class="n">fallbackFactory</span> <span class="o">=</span> <span class="n">VideoClientFallbackFactory</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">VideoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/api/videos/suggest&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Suggestion</span><span class="o">&gt;</span> <span class="nf">suggest</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="n">ViewingHistory</span> <span class="n">history</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VideoClientFallbackFactory</span> <span class="kd">implements</span> <span class="n">FallbackFactory</span><span class="o">&lt;</span><span class="n">VideoClient</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">VideoClient</span> <span class="nf">create</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">throwable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">VideoClientFallback</span><span class="o">(</span><span class="n">throwable</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">VideoClientFallback</span> <span class="kd">implements</span> <span class="n">VideoClient</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Throwable</span> <span class="n">cause</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">VideoClientFallback</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">cause</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">cause</span> <span class="o">=</span> <span class="n">cause</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Suggestion</span><span class="o">&gt;</span> <span class="nf">suggest</span><span class="o">(</span><span class="n">ViewingHistory</span> <span class="n">history</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cause</span> <span class="k">instanceof</span> <span class="n">FeignException</span> <span class="o">&amp;&amp;</span> <span class="o">((</span><span class="n">FeignException</span><span class="o">)</span> <span class="n">cause</span><span class="o">).</span><span class="na">status</span><span class="o">()</span> <span class="o">==</span> <span class="mi">404</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Treat the HTTP 404 status</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Microservices foster low coupling between components and resiliency. Hence, it would be sad to throw an error every time a service or a middleware is down. The circuit breaker pattern explained in this article allows you to ensure the continuity of service, even if it has to be offered in a degraded manner. As always, Spring Boot is a great help to setup this mechanism very easily.</p>

<hr />

<p><em>This article has been written in collaboration with Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Conditional Structures with Map]]></title>
    <link href="https://nphumbert.github.io/blog/2017/07/20/refactoring-conditional-with-map/"/>
    <updated>2017-07-20T16:32:15+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/07/20/refactoring-conditional-with-map</id>
    <content type="html"><![CDATA[<p>When working on already existing codebases, I often encounter pieces of code that look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Day</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Weather</span> <span class="n">weather</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="o">(</span><span class="n">weather</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">RAINY:</span>
</span><span class='line'>          <span class="n">takeAnUmbrella</span><span class="o">();</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">SUNNY:</span>
</span><span class='line'>          <span class="n">takeAHat</span><span class="o">();</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="nl">STORMY:</span>
</span><span class='line'>          <span class="n">stayHome</span><span class="o">();</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>      <span class="k">default</span><span class="o">:</span>
</span><span class='line'>          <span class="n">doNothing</span><span class="o">();</span>
</span><span class='line'>          <span class="k">break</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, depending on the weather, an action has to be taken. This kind of code is pretty hard to test and to maintain. The goal of this article is to refactor it using a <code>Map</code>.</p>

<!-- more -->


<h2>What is the Problem?</h2>

<p>Using conditional structures like this might be a sign of bad design. Indeed, this code tends to grow indefinitely as new cases have to be handled and the same code has to be modified over and over. A time will come when the code will be so bloated that it will be very hard to add new behaviour. This is a violation of the <em>Open Closed Principle</em> which stipulates that the code should be open for extension but closed for modification: you should be able to add new behaviour to your code without modifying it.</p>

<h2>Transform the Imperative Algorithm into Data</h2>

<p>By analyzing this code, it becomes clear that this algorithm is no more than a <code>Map</code>: for a certain weather (the key), a piece of code has to be executed (the value). A first refactoring can be done to make this conceptual <code>Map</code> concrete:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Day</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Weather</span><span class="o">,</span> <span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">startOfTheDayActions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Day</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">startOfTheDayActions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Weather</span><span class="o">.</span><span class="na">RAINY</span><span class="o">,</span> <span class="k">this</span><span class="o">::</span><span class="n">takeAnUmbrella</span><span class="o">);</span>
</span><span class='line'>    <span class="n">startOfTheDayActions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Weather</span><span class="o">.</span><span class="na">SUNNY</span><span class="o">,</span> <span class="k">this</span><span class="o">::</span><span class="n">takeAHat</span><span class="o">);</span>
</span><span class='line'>    <span class="n">startOfTheDayActions</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Weather</span><span class="o">.</span><span class="na">STORMY</span><span class="o">,</span> <span class="k">this</span><span class="o">::</span><span class="n">stayHome</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Weather</span> <span class="n">weather</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">startOfTheDayActions</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">weather</span><span class="o">,</span> <span class="k">this</span><span class="o">::</span><span class="n">doNothing</span><span class="o">).</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a first step and the code is already much clearer. Now, the mapping between the weather and the action to perform is explicit and the <code>start</code> method will not have to be modified very often. When a new case must be handled, it&rsquo;s just a new entry in the <code>Map</code>.</p>

<p>Nonetheless, this do not solve all problems. The class still has to be modified to add a new entry. To go further, the <code>Map</code> can be passed as a parameter of the constructor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Day</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Weather</span><span class="o">,</span> <span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">startOfTheDayActions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Day</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Weather</span><span class="o">,</span> <span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">startOfTheDayActions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">startOfTheDayActions</span> <span class="o">=</span> <span class="n">startOfTheDayActions</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Weather</span> <span class="n">weather</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">startOfTheDayActions</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">weather</span><span class="o">,</span> <span class="k">this</span><span class="o">::</span><span class="n">doNothing</span><span class="o">).</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the only responsibility of the class is to use the mapping to perform the correct action. This mapping is now the responsibility of another class.</p>

<h2>Note about Spring Framework</h2>

<p>If you are using Spring Framework and the <code>Day</code> class is a <code>@Component</code>, you can simply inject the <code>Map</code> as any other dependency.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Day</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Weather</span><span class="o">,</span> <span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">startOfTheDayActions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Day</span><span class="o">(</span><span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&quot;startOfTheDayActions&quot;</span><span class="o">)</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Weather</span><span class="o">,</span> <span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">startOfTheDayActions</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">startOfTheDayActions</span> <span class="o">=</span> <span class="n">startOfTheDayActions</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">(</span><span class="n">Weather</span> <span class="n">weather</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">startOfTheDayActions</span><span class="o">.</span><span class="na">getOrDefault</span><span class="o">(</span><span class="n">weather</span><span class="o">,</span> <span class="k">this</span><span class="o">::</span><span class="n">doNothing</span><span class="o">).</span><span class="na">run</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ActionConfig</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Bean</span><span class="o">(</span><span class="s">&quot;startOfTheDayActions&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Weather</span><span class="o">,</span> <span class="n">Runnable</span><span class="o">&gt;</span> <span class="nf">startOfTheDayActions</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Map</span><span class="o">&lt;</span><span class="n">Weather</span><span class="o">,</span> <span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">actions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>    <span class="c1">// Create mapping</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">actions</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>This refactoring is very easy to do but it can reduce the complexity of a method in a very efficient way. I think that the code should reveal intention and should not be bloated with conditional structures when it is not necessary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go Back in Time with Git]]></title>
    <link href="https://nphumbert.github.io/blog/2017/04/19/go-back-in-time-with-git/"/>
    <updated>2017-04-19T21:22:15+02:00</updated>
    <id>https://nphumbert.github.io/blog/2017/04/19/go-back-in-time-with-git</id>
    <content type="html"><![CDATA[<p>Recently, I conducted a workshop about how to go back in time with Git alongside <a href="https://twitter.com/rnowif">Renaud</a>. Here are the main points that were raised during this session.</p>

<!-- more -->


<h2>Case #1: Delete the Last Commit</h2>

<p>The initial Git tree used to illustrate this case is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>* 7ec8248 N - <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> Hello, world!
</span><span class='line'>* 26af837 N - Hello, world
</span><span class='line'>* c9b1299 N - Hello
</span></code></pre></td></tr></table></div></figure>


<p>The goal here is to delete the last commit so the resulting tree looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>* 26af837 N - <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> Hello, world
</span><span class='line'>* c9b1299 N - Hello
</span></code></pre></td></tr></table></div></figure>


<p>The easiest way to achieve this purpose is to use the <code>git reset</code> command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git reset --hard 26af837
</span></code></pre></td></tr></table></div></figure>


<p>It sets the current branch to the specified commit. The <code>--hard</code> option will discard all changes that have been made after the specified commit.</p>

<h2>Case #2: Create a Branch from a Previous Commit</h2>

<p>In this case, the initial Git tree is the same as before.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>* 7ec8248 N - <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> Hello, world!
</span><span class='line'>* 26af837 N - Hello, world
</span><span class='line'>* c9b1299 N - Hello
</span></code></pre></td></tr></table></div></figure>


<p>We want to create a branch from the commit <code>26af837</code> to fix a bug for instance. The resulting tree should be the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>* ae77cf0 N - <span class="o">(</span>HEAD -&gt; bug-fix<span class="o">)</span> Fixed it!
</span><span class='line'><span class="p">|</span> * 7ec8248 N - <span class="o">(</span>master<span class="o">)</span> Hello, world!
</span><span class='line'><span class="p">|</span>/
</span><span class='line'>* 26af837 N - Hello, world
</span><span class='line'>* c9b1299 N - Hello
</span></code></pre></td></tr></table></div></figure>


<p>First, we need to position ourselves on the commit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout 26af837
</span></code></pre></td></tr></table></div></figure>


<p>Then, we are in the &lsquo;detached HEAD&rsquo; state which means that we are no longer on a branch and further commits will not be kept. Consequently, we create the branch and commit the bug fix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout -b bug-fix
</span><span class='line'><span class="nv">$ </span><span class="c"># Fix the bug ...</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;Fixed it!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Case #3: Put the Last Commit on a New Branch</h2>

<p>Here, we made a commit on the <code>master</code> branch by mistake and we want to transfer it to another branch.</p>

<p>The Git tree should go from this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>* 7ec8248 N - <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> Hello, world!
</span><span class='line'>* 26af837 N - Hello, world
</span><span class='line'>* c9b1299 N - Hello
</span></code></pre></td></tr></table></div></figure>


<p>to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>* 7ec8248 N - <span class="o">(</span>HEAD -&gt; feature<span class="o">)</span> Hello, world!
</span><span class='line'>* 26af837 N - <span class="o">(</span>master<span class="o">)</span> Hello, world
</span><span class='line'>* c9b1299 N - Hello
</span></code></pre></td></tr></table></div></figure>


<p>To do so, we just have to create the <code>feature</code> branch from the last commit and reset <code>master</code> to the previous one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout -b feature
</span><span class='line'><span class="nv">$ </span>git checkout master
</span><span class='line'><span class="nv">$ </span>git reset --hard 26af837
</span><span class='line'><span class="nv">$ </span>git checkout feature
</span></code></pre></td></tr></table></div></figure>


<h2>Case #4: Rewrite History</h2>

<p>In this case, we want to completely remove a past commit from the Git tree.</p>

<p>The initial tree looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>* b1b5f0a N - <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> Hello, world
</span><span class='line'>* b7d38ac N - Add key.txt
</span><span class='line'>* c9b1299 N - Hello
</span></code></pre></td></tr></table></div></figure>


<p>We want the resulting tree to show no sign of the commit <code>b7d38ac</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>* efb44c9 N - <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> Hello, world
</span><span class='line'>* c9b1299 N - Hello
</span></code></pre></td></tr></table></div></figure>


<p>The <code>git rebase -i</code> command allows to rewrite the history of a branch from a specific starting point. It will prompt the list of all the commits since this starting point. You can perform different actions on these commits like reword a commit message, squash several commits into one, reordering and delete commits for instance. After these modifications, lines will be executed from top to bottom. More information about rewriting history can be found <a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git rebase -i HEAD~2
</span><span class='line'><span class="nv">$ </span><span class="c"># Delete the line corresponding to the commit to remove.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we wanted to go two commits back, we used the notation <code>HEAD~2</code> to specify the starting point. Note that we could also have used the specific hash of the commit (<code>c9b1299</code>).</p>

<h2>Case #5: Revert a Commit</h2>

<p>During this workshop, an attendee talked about the <code>git revert</code> command. Unlike the other commands that we saw in this article, the <code>git revert</code> command do not modify past commits. It creates a <strong>new</strong> commit that is the exact opposite of the reverted commit.</p>

<p>For instance, if we start from this Git tree:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>* f999291 N - <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> Hello, world
</span><span class='line'>* a9f8fb3 N - Add key.txt
</span><span class='line'>* c9b1299 N - Hello
</span></code></pre></td></tr></table></div></figure>


<p>and revert the commit a9f8fb3 which contains only a new file, a new commit that only contains the removal of this file will be created.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git revert a9f8fb3
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>* 55bc161 N - <span class="o">(</span>HEAD -&gt; master<span class="o">)</span> Revert <span class="s2">&quot;Add key.txt&quot;</span>
</span><span class='line'>* f999291 N - Hello, world
</span><span class='line'>* a9f8fb3 N - Add key.txt
</span><span class='line'>* c9b1299 N - Hello
</span></code></pre></td></tr></table></div></figure>


<p>I think that this command could be used when several people are working on the branch in order to avoid a forced push on the remote repository. Moreover, it could also be used if you want to keep an explicit trace of this action in the tree for a particular reason.</p>

<h2>Last resort: Keep Calm and Use Git Reflog</h2>

<p>Renaud wrote an <a href="https://blog.crafties.fr/2017/04/11/git-reflog/">article</a> on the <code>git reflog</code> command to recover commits that appear to be lost. To illustrate what this command does, here is its ouput when used in the case #4:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git reflog
</span><span class='line'>efb44c9 HEAD@<span class="o">{</span>0<span class="o">}</span>: rebase -i <span class="o">(</span>finish<span class="o">)</span>: returning to refs/heads/master
</span><span class='line'>efb44c9 HEAD@<span class="o">{</span>1<span class="o">}</span>: rebase -i <span class="o">(</span>pick<span class="o">)</span>: Hello, world
</span><span class='line'>c9b1299 HEAD@<span class="o">{</span>2<span class="o">}</span>: rebase -i <span class="o">(</span>start<span class="o">)</span>: checkout HEAD~2
</span><span class='line'>26af837 HEAD@<span class="o">{</span>3<span class="o">}</span>: commit: Hello, world
</span><span class='line'>712d068 HEAD@<span class="o">{</span>4<span class="o">}</span>: commit: Add key.txt
</span><span class='line'>c9b1299 HEAD@<span class="o">{</span>5<span class="o">}</span>: commit <span class="o">(</span>initial<span class="o">)</span>: Hello
</span></code></pre></td></tr></table></div></figure>


<p>You can see that the deleted commit (<code>712d068</code>) still appears in the reflog.</p>

<h2>Conclusion</h2>

<p>This article shows several ways to go back in time with Git. These commands could be used alone or combined to get you out of complicated situations or to rearrange your Git tree before a <code>git push</code> for instance.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quand faire un audit de code ?]]></title>
    <link href="https://nphumbert.github.io/blog/2017/03/20/quand-faire-un-audit-de-code/"/>
    <updated>2017-03-20T07:52:15+01:00</updated>
    <id>https://nphumbert.github.io/blog/2017/03/20/quand-faire-un-audit-de-code</id>
    <content type="html"><![CDATA[<p>Dans notre activité, nous sommes amenés à faire régulièrement des audits de code. Planifié ou forcé, un audit a pour but de déterminer la qualité logicielle d'une base de code et de faire des préconisations pour améliorer sa santé. L'objectif de cet article est de faire un retour d'expérience sur les différentes circonstances qui mènent à la réalisation d'un tel audit.</p>

<!-- more -->


<h2>Tout semble aller, un audit pour vérifier qu'on est sur les rails</h2>

<p>Ce genre d'audit est le plus rare. Il est planifié par un client pour s'assurer que sa base de code respecte les bonnes pratiques de programmation. <em>A priori</em> aucun signe n'indique un quelconque problème dans le code mais le client a conscience de l'importance de la qualité logicielle qu'il inclut très tôt dans son processus de développement.</p>

<p>Dans ce contexte, un audit a pour rôle de permettre d'apporter des ajustements à la manière de coder pour limiter la dette technique et partir sur de bonnes bases pour la suite du projet. L'équipe projet peut tirer pleinement profit de ce genre d'audit car il est réalisé sereinement dans une optique d'amélioration continue.</p>

<h2>Un audit de code avant d'envisager des grosses modifications</h2>

<p>Ce type d'audit est planifié par un client qui vient d'acquérir, par exemple, un nouveau marché. Il dispose actuellement d'une base de code assez limitée en taille mais qui va devoir grossir assez rapidement. En général, cela s'accompagne d'un agrandissement de l'équipe et d'une accélération du rythme de développement.</p>

<p>Ici, un audit de code vise à faire un <em>checkup</em> de l'existant afin de préconiser les corrections nécessaires avant qu'il ne soit trop tard et que la dette technique ne soit irrattrapable. Il est recommandé de le planifier le plus tôt possible afin d'avoir le temps de mettre en place les améliorations nécessaires et qu'il puisse être le plus profitable possible.</p>

<h2>Il y a des problèmes, un audit pour voir ce qui ne va pas</h2>

<p>Cet audit n'est pas prévu, il est effectué de manière forcée suite à un trop grand nombre de dysfonctionnements. Ceux-ci peuvent par exemple être de trop nombreuses régressions, des livraisons douloureuses ou des bugs fonctionnels importants. Le client soupçonne la qualité logicielle de son produit et a donc le réflexe de demander un audit pour déterminer les sources de ses problèmes et proposer des solutions adaptées.</p>

<p>Le contexte n'est pas idéal pour l'équipe car ils peuvent avoir l'impression d'être contrôlés et sanctionnés. Il est donc important pour les auditeurs de bien montrer qu'ils ne viennent pas pour juger les développeurs mais simplement les aider à améliorer le projet. Avec une collaboration saine et efficace, l'équipe projet se rend compte rapidement de l'objectif de l'audit. L'idée est que celle-ci prenne en main l'audit et ses conclusions de manière à ce que la situation s'améliore dans les meilleurs délais.</p>

<h2>Un audit pour trancher un conflit contractuel</h2>

<p>Un audit de ce type est très difficile pour toutes les parties. Il s'agit d'un prestataire (typiquement au forfait) dont le client impose un audit pour contrôler la qualité du logiciel, sur laquelle le prestataire s'est, en général, plus ou moins engagé. Il est bien visible que, dans ce contexte, le client pourrait chercher les failles pour invoquer le contrat et infliger des pénalités au prestataire tandis que celui-ci cherchera peut-être à se défendre, et donc minimiser les conclusions de l'audit. Il peut arriver que les deux parties soient de bonne volonté et souhaitent sincèrement améliorer la qualité du code, mais cela reste une situation conflictuelle peu propice au travail serein.</p>

<p>Dans cette situation, le rôle des auditeurs est de rester neutres et imperméables à la situation afin de réaliser un audit de qualité qui permettra réellement d'améliorer la situation. Il est très important de comprendre le contexte et les enjeux de manière non ambiguë. Cependant, les détails contractuels ne sont pas du ressort des auditeurs et ils ne doivent absolument pas prendre partie.</p>

<h2>Conclusion</h2>

<p>Il existe plusieurs situations très différentes qui peuvent mener à un audit de code. En fonction du contexte, le rôle des auditeurs et l'objectif de l'audit peuvent varier. Il est très rare qu'une équipe souhaite volontairement produire du code de mauvaise qualité, cela est très souvent le fruit d'un ensemble de circonstances et d'événements, parfois subis. Par conséquent, quelle que soit la situation, nous pensons qu'un audit doit être neutre et proposer des solutions concrètes pour améliorer la situation, sans viser des individus en particulier.</p>

<hr />

<p><em>Cet article a été écrit en collaboration avec Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gérer les dépendances circulaires]]></title>
    <link href="https://nphumbert.github.io/blog/2016/12/17/gerer-les-dependances-circulaires/"/>
    <updated>2016-12-17T18:31:18+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/12/17/gerer-les-dependances-circulaires</id>
    <content type="html"><![CDATA[<p>Durant mon travail, j'ai rencontré des dépendances circulaires dans une application sur laquelle je suis intervenue. Dans sa plus simple forme, il s'agit de deux classes qui dépendent l'une de l'autre.
Ceci est, selon moi, un problème pour plusieurs raisons. L'objectif de cet article est de montrer ce qu'est une dépendance circulaire, en quoi cela peut poser problème, et comment les éliminer.</p>

<!-- more -->


<h2>Cas d'étude</h2>

<p>Le code ci-dessous présente un cas simple de dépendance circulaire.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">B</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">A</span><span class="o">(</span><span class="n">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="na">doSomethingGreat</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomethingAwesome</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Doing something awesome!&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">B</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">A</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">setA</span><span class="o">(</span><span class="n">A</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">a</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">a</span><span class="o">.</span><span class="na">doSomethingAwesome</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomethingGreat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Doing something great!&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Problèmes associés</h2>

<h3>Instanciation de b</h3>

<p>Le code suivant illustre l'utilisation de <code>B</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">B</span> <span class="n">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">B</span><span class="o">();</span> <span class="c1">// 1</span>
</span><span class='line'><span class="n">A</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">A</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="na">setA</span><span class="o">(</span><span class="n">a</span><span class="o">);</span> <span class="c1">// 2</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="na">doSomething</span><span class="o">();</span> <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nous pouvons observer que la classe <code>B</code> ne peut pas être utilisée directement après son instanciation (<code>1</code>). Elle est dans un état incohérent car il est impératif de setter l'instance de <code>A</code> (<code>2</code>) afin de pouvoir l'utiliser. Sinon, une exception de type <code>NullPointerException</code> sera remontée lors de l'appel de la méthode <code>doSomething</code> (<code>3</code>). Cette opération (<code>2</code>) peut facilement être oubliée. De plus, si l'appel de la méthode (<code>3</code>) intervient bien plus tard, cet oubli peut ne pas être détecté immédiatemment.</p>

<h3>Immuabilité de B</h3>

<p>Un autre inconvénient est que <code>B</code> n'est pas immuable. En effet, une fois instancié, il est possible de modifier son état en appelant autant de fois que l'on veut la méthode <code>setA</code>.
Pour rendre <code>B</code> immuable, il faudrait supprimer le setter, rendre l'attribut <code>a</code> <code>final</code> et le passer en paramètre du constructeur. Ceci est impossible actuellement à cause de la dépendance circulaire.</p>

<h3>Fort couplage</h3>

<p>Le fort couplage introduit entre les deux classes peut être un signe qu'il y a un problème de séparation des responsabilités. Il est, par exemple, possible que les deux classes partagent la même responsabilité et qu'elles puissent donc être fusionnées. Une autre possibilité est qu'une troisième responsabilité soit présente et qu'elle doive être extraite dans une classe séparée.</p>

<h2>Solutions envisageables</h2>

<p>Dans le contexte de mon travail, les solutions que j'ai dû adopter étaient relativement simples. Ces solutions seront décrites par la suite.</p>

<h3>Déplacer le comportement dans une des deux classes</h3>

<p>Il est possible que le comportement de <code>doSomethingAwesome</code> soit lié uniquement à la classe <code>B</code>. Dans ce cas, il est possible de déplacer cette méthode dans <code>B</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">B</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">A</span><span class="o">(</span><span class="n">B</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="na">doSomethingGreat</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomethingAwesome</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="na">doSomethingAwesome</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">B</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">doSomethingAwesome</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomethingGreat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Doing something great!&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomethingAwesome</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Doing something awesome!&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Il n'y a donc plus de dépendance circulaire car <code>B</code> ne dépend plus de <code>A</code>. Le code est ainsi plus SOLID car la classe <code>A</code> n'a plus de responsabilités qui ne lui appartiennent pas.</p>

<p>Le code ci-dessus a été écrit de manière à conserver l'API de <code>A</code>. La méthode <code>doSomethingAwesome</code> de <code>A</code> pourrait donc être supprimée si elle n'est désormais plus appelée.</p>

<h3>Créer une nouvelle classe</h3>

<p>Si la méthode <code>doSomethingAwesome</code> n'est une responsabilité ni de <code>A</code> ni de <code>B</code>, elle doit être extraite dans une classe séparée :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Awesome</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomethingAwesome</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Doing something awesome!&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">A</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">B</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Awesome</span> <span class="n">awesome</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">A</span><span class="o">(</span><span class="n">B</span> <span class="n">b</span><span class="o">,</span> <span class="n">Awesome</span> <span class="n">awesome</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">b</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">awesome</span> <span class="o">=</span> <span class="n">awesome</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="na">doSomethingGreat</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomethingAwesome</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">awesome</span><span class="o">.</span><span class="na">doSomethingAwesome</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">B</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Awesome</span> <span class="n">awesome</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">B</span><span class="o">(</span><span class="n">Awesome</span> <span class="n">awesome</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">awesome</span> <span class="o">=</span> <span class="n">awesome</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomething</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">awesome</span><span class="o">.</span><span class="na">doSomethingAwesome</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="nf">doSomethingGreat</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Doing something great!&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Les dépendances circulaires peuvent être un signe de mauvais design. En effet, elles introduisent un fort couplage, provoquent l'instanciation d'objets incohérents et empêchent l'immuabilité de ceux-ci. Il est donc nécessaire de les analyser afin de bien comprendre leur origine et de les corriger si besoin. Dans cet article, deux manières de faire ont été présentées.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ecrire des tests avec Spring Boot 1.4]]></title>
    <link href="https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4/"/>
    <updated>2016-08-08T07:11:29+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/08/08/ecrire-des-tests-avec-spring-boot-1-dot-4</id>
    <content type="html"><![CDATA[<p>La version 1.4 de Spring Boot est sortie le 28 juillet 2016. Elle contient notamment des évolutions importantes au niveau de l'écriture des tests.<br/>
L'objectif de cet article est de voir comment migrer les tests d'un <em>controller</em> Spring MVC en utilisant les nouvelles fonctionnalités apportées par cette version.</p>

<!-- more -->


<h2>Modification du pom.xml</h2>

<p>Le starter de test de Spring Boot 1.4 embarque désormais les dépendances vers <a href="http://joel-costigliola.github.io/assertj">AssertJ</a>, <a href="https://github.com/skyscreamer/JSONassert">JSONassert</a> et <a href="https://github.com/jayway/JsonPath">JsonPath</a>. Il est donc possible de supprimer l'appel explicite vers ces dépendances dans notre pom, il suffit d'importer le starter :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>  <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>  <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Configuration du test</h2>

<p>Dans Spring Boot 1.3, il est possible d'écrire un test d'intégration d'un <em>controller</em> avec Spring de la manière suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringApplicationConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">DemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoControllerTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le test ci-dessus va charger la classe de configuration Spring Boot <code>DemoApplication</code> à l'intérieur d'un contexte d'application de type <code>WebApplicationContext</code>. Il sera donc possible de <a href="https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers">tester le <em>controller</em> avec MockMvc</a>.</p>

<p>Depuis Spring Boot 1.4, l'annotation <code>@SpringBootTest</code>remplace toutes les annotations existantes pour faire des tests d'intégration avec Spring. De plus, le runner JUnit peut être remplacé par <code>SpringRunner</code> qui a été introduit dans la version 4.3 de Spring. Finalement, il n'est plus nécessaire de fournir explicitement la classe de configuration Spring Boot. En effet, la classe annotée avec <code>@SpringBootApplication</code> sera automatiquement utilisée. Le test devient donc :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringBootTest</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoControllerTest</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Gestion des mocks</h2>

<p>Pour tester un <em>controller</em> en isolation, il faut l'instancier en mockant ses dépendances (avec <a href="http://mockito.org">Mockito</a> par exemple) et le fournir au builder de <code>MockMvc</code>.</p>

<p>Avec Spring Boot 1.3, il est possible d'écrire ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringApplicationConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">DemoApplication</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoControllerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Mock</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DemoService</span> <span class="n">demoService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@InjectMocks</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DemoController</span> <span class="n">demoController</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Mockito</span><span class="o">.</span><span class="na">initMocks</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">standaloneSetup</span><span class="o">(</span><span class="n">demoController</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Mockito</span><span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">demoService</span><span class="o">.</span><span class="na">call</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">42</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Spring Boot 1.4 permet de mocker les beans Spring avec Mockito grâce à une annotation spécifique. Ainsi, le bean de l'<code>ApplicationContext</code> est remplacé par un <em>mock</em> et Spring se charge donc de l'injecter dans le <em>controller</em>. Le test devient donc le suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringBootTest</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoControllerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@MockBean</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DemoService</span> <span class="n">demoService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DemoController</span> <span class="n">demoController</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">standaloneSetup</span><span class="o">(</span><span class="n">demoController</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Mockito</span><span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">demoService</span><span class="o">.</span><span class="na">call</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">42</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans ce test, le contexte d'application est chargé dans son intégralité avec le bean <code>DemoService</code> remplacé par un <em>mock</em>. Le <code>DemoController</code> injecté utilisera donc ce <em>mock</em>.</p>

<h2>Limitation de la configuration chargée</h2>

<p>Dans ce contexte, il n'est pas forcément nécessaire de charger tout le contexte d'application pour tester uniquement le <em>controller</em>.</p>

<p>Spring Boot 1.4 introduit l'annotation <code>@WebMvcTest</code> qui permet de tester spécifiquement des <em>controllers</em> Spring MVC avec <code>MockMvc</code>. Ainsi, seule la configuration Spring MVC sera chargée. Le test précédent peut donc s'écrire de la manière suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@WebMvcTest</span><span class="o">(</span><span class="n">DemoController</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DemoControllerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@MockBean</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DemoService</span> <span class="n">demoService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Mockito</span><span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">demoService</span><span class="o">.</span><span class="na">call</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="mi">42</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>MockMvc</code> n'a plus besoin d'être instancié explicitement dans le <em>setup</em>. Grâce à l'annotation <code>@WebMvcTest</code>, l'instance peut être directement injectée dans le test.</p>

<h2>Conclusion</h2>

<p>Les évolutions apportées par Spring Boot 1.4 au niveau des tests permettent de simplifier l'écriture des tests d'intégration. En effet, il n'y a plus qu'une seule annotation à utiliser (<code>@SpringBootTest</code>). De plus, l'intégration de Mockito dans Spring Boot permet de remplacer directement des beans du contexte d'application par des <em>mocks</em>. Finalement, dans le cadre du test d'un <em>controller</em> Spring MVC avec <code>MockMvc</code>, l'annotation <code>@WebMvcTest</code> permet de ne charger que les beans nécessaires à l'exécution des tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring d'une application N-Tiers en utilisant le CQRS]]></title>
    <link href="https://nphumbert.github.io/blog/2016/06/26/refactoring-architecture-n-tiers-cqrs/"/>
    <updated>2016-06-26T18:14:40+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/06/26/refactoring-architecture-n-tiers-cqrs</id>
    <content type="html"><![CDATA[<p>CQRS, ou <em>Command Query Responsibility Segregation</em>, est une architecture où la partie <em>Command</em> (écriture) et la partie <em>Query</em> (lecture) du système sont séparées.</p>

<p>J'ai eu la chance d'assister récemment à une présentation de <a href="https://twitter.com/tjaskula">Tomasz Jaskula</a> nommée <a href="https://www.youtube.com/watch?v=5Sx_xO-eCE8">Recettes CQRS, pour bien cuisiner son architecture</a>. Je l'ai beaucoup appréciée, notamment car on voit les différentes étapes pour arriver à une architecture CQRS / Event Sourcing / DDD à partir d'une architecture N-Tiers &ldquo;classique&rdquo;.</p>

<p>L'objectif de cet article est de présenter ma compréhension et mon avis sur le CQRS en particulier.</p>

<!-- more -->


<h2>Mise en place</h2>

<p>Le passage d'une architecture N-Tiers à une architecture CQRS est relativement simple, comme montré ci-dessous.</p>

<p><img class="center" src="https://nphumbert.github.io/images/cqrs.png"></p>

<p>Concrètement, je pense que cela consiste tout d'abord à identifier les requêtes associées à chacune des vues et à les regrouper dans des classes dédiées. Ces classes formeront la partie lecture de l'architecture.<br/>
Ensuite, les objets retournés par ces requêtes sont remplacés par des DTO qui ne contiennent plus que les informations nécessaires à la construction de la vue associée.<br/>
Finalement, le modèle d'écriture peut être débarrassé de toutes ses méthodes et propriétés transitoires, qui ne servaient seulement qu'à de la lecture.</p>

<p>Cette architecture apporte des avantages en termes de maintenabilité et de performances mais peut encore être améliorée.</p>

<h2>Conséquences</h2>

<h3>Augmentation de la maintenabilité</h3>

<p>L'application du CQRS simplifie grandement le modèle d'écriture. En effet, il arrive souvent que des propriétés <em>transient</em> soient calculées uniquement pour de l'affichage. Ces propriétés, ainsi que les méthodes associées, alourdissent le modèle et n'apportent pas de valeur pour les traitements métiers.</p>

<p>Les services, parfois très lourds, sont remplacés par des classes spécialisées, concises et cohérentes. Ceci permet donc de mieux respecter le <em>Single Responsibility Principle (SRP)</em> ainsi que l'<em>Interface Segregation Principle (ISP)</em>. De plus, il n'y aura plus de méthodes &ldquo;passe-plat&rdquo; dans les services car celles-ci seront directement implémentées dans les classes de lecture.</p>

<p>Finalement, l'ajout d'une nouvelle vue ne risque pas d'engendrer de régression car il s'agit simplement d'ajouter une nouvelle classe de lecture ainsi que le(s) DTO associé(s), sans modifier le reste.</p>

<h3>Amélioration des performances</h3>

<p>La séparation de la lecture et de l'écriture permet d'améliorer les performances du système. En effet, il est difficile d'optimiser à la fois la mise à jour et la lecture dans une base de données. Par exemple, l'ajout d'un index améliore grandement les performances à la lecture mais affecte sensiblement l'écriture.</p>

<p>Ces deux opérations pouvant être séparées dans deux bases différentes, il devient alors possible d'optimiser chacune des bases pour son utilisation particulière. De plus, les données de la base de lecture peuvent être dénormalisées, ce qui simplifie grandement les requêtes effectuées et peut les rendre bien plus efficaces.</p>

<h3>Pistes d'amélioration</h3>

<p>Selon moi, la principale difficulté du CQRS réside dans l'alimentation de la base de lecture à partir de la base d'écriture. Il est possible de la réaliser à l'aide d'un <em>batch</em> qui se lancera régulièrement. Cependant, l'application ne serait plus en temps réel.<br/>
Une alternative pourrait alors être d'écrire dans la base de lecture en même temps que dans la base d'écriture. Cette solution n'est pas idéale pour moi car elle ne supprime pas le couplage entre la lecture et l'écriture. De plus, si cette solution est implémentée via un mécanisme synchrone, il est impossible de paralléliser les traitements lorsque le système est très chargé, ce qui peut affecter nettement les performances.</p>

<p>La solution d'utiliser des événements asynchrones proposée par Tomasz me semble la plus adaptée pour résoudre ces problèmes. Comme il l'a indiqué, il faut néanmoins analyser le besoin et la stratégie d'entreprise ainsi que les ressources disponibles avant de se lancer dans la mise en place d'une telle architecture.</p>

<h2>Conclusion</h2>

<p>Le CQRS est une architecture simple à comprendre et à mettre en place. Elle permet d'augmenter la maintenabilité du code et d'améliorer les performances des vues. Je pense qu'elle peut être mise en place sur un projet (ou une de ses parties) dès que les vues se multiplient et que les services commencent à grossir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ATDD et TDD double boucle]]></title>
    <link href="https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle/"/>
    <updated>2016-05-22T22:27:01+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle</id>
    <content type="html"><![CDATA[<p>L'<em>Acceptance Test Driven Development</em> est une pratique qui consiste à écrire un test d'acceptation dès la définition de la fonctionnalité à implémenter. Ce test permet ensuite de valider que l'implémentation de la fonctionnalité est terminée. En général, plusieurs composants unitaires sont nécessaires pour implémenter une fonctionnalité. Ces composants peuvent être développés en TDD dans une deuxième boucle de <em>feedback</em>.</p>

<p>L'objectif de cet article est de présenter l'ATDD et comment le mettre en pratique grâce à du TDD double boucle.</p>

<!-- more -->


<h2>ATDD</h2>

<p>L'ATDD encourage fortement la collaboration entre les développeurs et le métier afin d'écrire des tests d'acceptation précis et pertinents. Pour optimiser l'échange, ces tests peuvent être écrits avec un vocabulaire partagé et bien défini. Ils peuvent également suivre le pattern <em>Given</em> / <em>When</em> / <em>Then</em> comme dans l'exemple suivant :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Given
</span><span class='line'>Un client dépose 1000 euros sur son compte le 17/12/2015
</span><span class='line'>Et il dépose 500 euros sur son compte le 18/12/2015
</span><span class='line'>Et il retire 1500 euros de son compte le 19/12/2015
</span><span class='line'>
</span><span class='line'># When
</span><span class='line'>Le client demande à imprimer son relevé de compte
</span><span class='line'>
</span><span class='line'># Then
</span><span class='line'>Le relevé imprimé doit être égal à
</span><span class='line'>   date | credit | debit | balance
</span><span class='line'>   19/12/2015 | | 1500.00 | 0.00
</span><span class='line'>   18/12/2015 | 500.00 | | 1500.00
</span><span class='line'>   17/12/2015 | 1000.00 | | 1000.00</span></code></pre></td></tr></table></div></figure>


<p>Pour implémenter la fonctionnalité, le développeur se sert de ce test d'acceptation et le traduit sous forme de code pour le rendre exécutable. Le test d'acceptation précédent peut être écrit en Java de la manière qui suit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_print_statement</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="n">Account</span> <span class="n">account</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Account</span><span class="o">();</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="k">new</span> <span class="nf">BigDecimal</span><span class="o">(</span><span class="s">&quot;1000&quot;</span><span class="o">),</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2015</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">DECEMBER</span><span class="o">,</span> <span class="mi">17</span><span class="o">));</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="k">new</span> <span class="nf">BigDecimal</span><span class="o">(</span><span class="s">&quot;500&quot;</span><span class="o">),</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2015</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">DECEMBER</span><span class="o">,</span> <span class="mi">18</span><span class="o">));</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="na">withdraw</span><span class="o">(</span><span class="k">new</span> <span class="nf">BigDecimal</span><span class="o">(</span><span class="s">&quot;1500&quot;</span><span class="o">),</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2015</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">DECEMBER</span><span class="o">,</span> <span class="mi">19</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">statement</span> <span class="o">=</span> <span class="n">account</span><span class="o">.</span><span class="na">printStatement</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">statement</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span>
</span><span class='line'>            <span class="s">&quot;date | credit | debit | balance\n&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;19/12/2015 | | 1500.00 | 0.00\n&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;18/12/2015 | 500.00 | | 1500.00\n&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;17/12/2015 | 1000.00 | | 1000.00&quot;</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce test sera rouge tant que la fonctionnalité ne sera pas implémentée entièrement. Il servira de fil conducteur lors des développements.</p>

<h2>TDD double boucle</h2>

<p>La classe <code>Account</code> sert de point d'entrée à la fonctionnalité. Cependant, elle ne sera pas suffisante pour l'implémenter complètement. Le TDD double boucle consiste à développer la classe <code>Account</code> ainsi que ses dépendances en TDD, formant ainsi une boucle de <em>feedback</em> à l'intérieur de celle déjà formée par le test d'acceptation.</p>

<p><img class="center" src="https://nphumbert.github.io/images/double_loop_tdd.png"></p>

<p>Dans l'exemple présenté ci-dessus, il est possible de déléguer l'impression d'un relevé à une classe <code>Statement</code> qui est une dépendance de <code>Account</code>. Lors de l'écriture du test de <code>Account</code>, cette classe sera mockée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_print_statement</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="n">Statement</span> <span class="n">statement</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Statement</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">statement</span><span class="o">.</span><span class="na">print</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;printed statement&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Account</span> <span class="n">account</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Account</span><span class="o">(</span><span class="n">statement</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">printedStatement</span> <span class="o">=</span> <span class="n">account</span><span class="o">.</span><span class="na">printStatement</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">printedStatement</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">&quot;printed statement&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>De la même manière, la classe <code>Statement</code> sera développée en TDD en mockant sa dépendance vers <code>Transaction</code>, qui sera chargée d'imprimer une ligne du relevé. Finalement, cette classe <code>Transaction</code> sera implémentée en TDD.
Ainsi, le test d'acceptation passera au vert, ce qui indique que la fonctionnalité correspondante est terminée.</p>

<h2>Conclusion</h2>

<p>L'ATDD encourage la collaboration métier / développeur à travers la définition précise de tests d'acceptation qui permettent de valider les fonctionnalités. Ces dernières peuvent être implémentées en utilisant du TDD double boucle.</p>

<p>Vous trouverez une mise en pratique du TDD double boucle dans la vidéo <a href="https://www.youtube.com/watch?v=Qe84jbwyZ3U">Crafties #7</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Découverte de Kotlin par la pratique]]></title>
    <link href="https://nphumbert.github.io/blog/2016/05/08/decouverte-de-kotlin-par-la-pratique/"/>
    <updated>2016-05-08T14:58:45+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/05/08/decouverte-de-kotlin-par-la-pratique</id>
    <content type="html"><![CDATA[<p>Kotlin est un langage de programmation créé par JetBrains. Il est exécuté sur la JVM et est 100% interopérable avec Java 1.6+.
J'ai découvert récemment ce langage et j'ai réalisé un ensemble de katas pour le pratiquer.
Le code source de ces katas est disponible sur GitHub :</p>

<ul>
<li><a href="https://github.com/nphumbert/kata-prime-factors">Prime factors</a></li>
<li><a href="https://github.com/nphumbert/kata-string-calculator">String calculator</a></li>
<li><a href="https://github.com/nphumbert/kata-game-of-life">Game of life</a></li>
<li><a href="https://github.com/nphumbert/kata-mars-rover">Mars rover</a></li>
</ul>


<p>Dans cet article, je vais présenter des particularités de Kotlin que j'ai pu rencontrer.</p>

<!-- more -->


<h2>Généralités</h2>

<p>En Kotlin, un fichier peut contenir plusieurs classes et des fonctions. Ces fonctions peuvent exister en dehors d'une classe.
Un exemple de classe est donné ci-dessous :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">Dimension</span><span class="p">(</span><span class="k">val</span> <span class="py">width</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="k">val</span> <span class="py">height</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le constructeur est défini dans la déclaration de la classe. Le mot clé <code>val</code> signifie que le champ est en lecture seule. Il faudrait utiliser <code>var</code> pour indiquer qu'il est modifiable. De plus, des getters sont implicitement générés pour tous les champs qui ne sont pas <code>private</code> ainsi que des setters pour les champs qui ne sont pas en lecture seule. Par ailleurs, le mot clé <code>data</code> permet de créer automatiquement les méthodes <code>toString</code>, <code>equals</code>, <code>hashCode</code> et <code>clone</code>.</p>

<h2>Gestion des null</h2>

<p>Par défaut, les variables ne peuvent pas être nulles. Pour indiquer qu'une variable peut être nulle, il faut ajouter un <code>?</code> à la fin du type. Par exemple, <code>val position: Position?</code>. Le fait d'appeler une méthode sur une variable qui peut être nulle génère une erreur de compilation si ce n'est pas géré explicitement.</p>

<p>Dans le code suivant, <code>moves</code> est une <code>Map</code> dont une valeur est récupérée à partir d'une clé. Ceci peut retourner une valeur nulle si elle ne contient pas cette clé. S'il est certain que la clé existe dans la <code>Map</code>, il faut forcer l'appel avec <code>!!</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">apply</span><span class="p">(</span><span class="n">position</span><span class="p">:</span> <span class="n">Position</span><span class="p">):</span> <span class="n">Position</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">moves</span><span class="p">[</span><span class="n">position</span><span class="p">.</span><span class="n">orientation</span><span class="p">]</span><span class="o">!!</span><span class="p">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">position</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>S'il n'est pas certain que la clé existe dans la <code>Map</code>, il est possible d'utiliser <code>?</code> pour appeler la méthode <code>invoke</code> sans risque d'exception. En effet, si la valeur est nulle, la méthode ne sera pas appelée et le résultat sera <code>null</code>. Le code deviendrait donc le suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">apply</span><span class="p">(</span><span class="n">position</span><span class="p">:</span> <span class="n">Position</span><span class="p">):</span> <span class="n">Position</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">moves</span><span class="p">[</span><span class="n">position</span><span class="p">.</span><span class="n">orientation</span><span class="p">]</span><span class="o">?.</span><span class="n">invoke</span><span class="p">(</span><span class="n">position</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette gestion des <code>null</code> permet d'éviter les contrôles de nullité dispersés dans tout le code. De plus, elle permet de rendre très explicite les endroits où une variable peut être nulle. Finalement, tout ceci est vérifié par le compilateur, ce qui permet d'éviter les oublis.</p>

<h2>Valeurs par défaut</h2>

<p>Kotlin permet de donner aux paramètres des fonctions une valeur par défaut. Cette valeur est celle utilisée si le paramètre n'est pas fourni lors de l'appel de la fonction. La syntaxe pour mettre une valeur par défaut est décrite ci-après :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">add</span><span class="p">(</span><span class="n">numbers</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">separator</span><span class="p">:</span> <span class="n">Char</span> <span class="p">=</span> <span class="sc">&#39;,&#39;</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">numbers</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">separator</span><span class="p">).</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">}.</span><span class="n">sum</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fonction peut donc être appelée de deux manières différentes :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">add</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">joinToString</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">add</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">joinToString</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">),</span> <span class="sc">&#39;,&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce mécanisme permet de modifier du code existant, pour le rendre paramétrable par exemple, sans devoir changer le code client déjà existant ni devoir créer une nouvelle fonction qui se fera déléguer son traitement.</p>

<h2>Streams</h2>

<p>L'équivalent des <code>Streams</code> Java 8 sont gérés nativement par les classes Kotlin (même avec un JDK 1.6 !). Il est donc directement possible d'appeler des méthodes comme <code>filter</code>, <code>map</code> ou <code>reduce</code> sur des collections. Par exemple, dans le jeu de la vie, pour compter toutes les cellules vivantes parmi les cellules voisines, il est possible de faire ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">numberOfLiveNeighbours</span><span class="p">(</span><span class="n">position</span><span class="p">:</span> <span class="n">Position</span><span class="p">):</span> <span class="n">Int</span> <span class="p">=</span>
</span><span class='line'>                      <span class="n">position</span><span class="p">.</span><span class="n">neighbours</span><span class="p">().</span><span class="n">filter</span> <span class="p">{</span> <span class="k">get</span><span class="p">(</span><span class="n">it</span><span class="p">).</span><span class="n">alive</span> <span class="p">}.</span><span class="n">count</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Par ailleurs, d'autres méthodes plus spécifiques sont disponibles selon le type de collection. Par exemple, sur une
<code>Map</code>, il est possible d'appliquer des filtres seulement sur les valeurs grâce à la méthode <code>filterValues</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">toString</span><span class="p">(</span><span class="n">orientation</span><span class="p">:</span> <span class="n">Orientation</span><span class="p">):</span> <span class="n">String</span> <span class="p">=</span>
</span><span class='line'>                      <span class="n">orientations</span><span class="p">.</span><span class="n">filterValues</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">equals</span><span class="p">(</span><span class="n">orientation</span><span class="p">)</span> <span class="p">}.</span><span class="n">keys</span><span class="p">.</span><span class="n">first</span><span class="p">().</span><span class="n">toString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le grand nombre de méthodes de ce genre facilite la programmation fonctionnelle et rend le code plus clair et expressif. De plus, le fait que Kotlin soit intéropérable avec Java permet d'introduire des morceaux de code fonctionnel dans une base de code Java 6 ou 7.</p>

<h2>Fonctions d'extension</h2>

<p>Soit le code Kotlin suivant extrait du kata des facteurs premiers :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">primes</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">remains</span> <span class="p">%</span> <span class="n">it</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">factors</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>        <span class="n">remains</span> <span class="p">/=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La boucle ci-dessus continue tant que <code>remains</code> est un multiple du nombre premier courant. Il serait possible de rendre le code plus expressif de la manière suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">primes</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">remains</span><span class="p">.</span><span class="n">isMultipleOf</span><span class="p">(</span><span class="n">it</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">factors</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>        <span class="n">remains</span> <span class="p">/=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le problème est que <code>remains</code> est un <code>Int</code> et que cette classe ne contient pas la méthode <code>isMultipleOf</code> par défaut. Cependant, il est possible de l'ajouter grâce à une fonction d'extension. il s'agit de créer une fonction et de l'ajouter à une classe de manière externe :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Int</span><span class="p">.</span><span class="n">isMultipleOf</span><span class="p">(</span><span class="n">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">mod</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les fonctions d'extension sont très pratiques pour enrichir des objets, sans devoir modifier leur classe. De plus, ces extensions peuvent être restreintes à un certain contexte (une classe, un package, etc.).</p>

<h2>La déstructuration</h2>

<p>Lorsque l'on souhaite extraire des objets depuis un tableau ou une liste, il est possible de s'affranchir de l'utilisation explicite des index en utilisant la déstructuration :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="err">(</span><span class="py">gridDimensionInput</span><span class="p">,</span> <span class="n">initialPositionInput</span><span class="p">,</span> <span class="n">pathInput</span><span class="p">)</span> <span class="p">=</span> <span class="n">input</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans l'exemple ci-dessus, l'input va être découpée par ligne. La première ligne sera stockée dans <code>gridDimensionInput</code>, la seconde dans <code>initialPositionInput</code> et la troisième dans <code>pathInput</code>.</p>

<p>Ceci est également possible avec une <code>data class</code> de la façon suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">position</span> <span class="p">=</span> <span class="n">Position</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="n">Orientation</span><span class="p">.</span><span class="n">NORTH</span><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="err">(</span><span class="py">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">orientation</span><span class="p">)</span> <span class="p">=</span> <span class="n">position</span>
</span></code></pre></td></tr></table></div></figure>


<p>La déstructuration permet de simplifier l'extraction de données depuis un objet qui la supporte sans devoir créer des variables intermédiaires qui ne serviront plus ensuite.</p>

<h2>Création de type implicite</h2>

<p>Quand un champ, un paramètre ou une variable doit être une fonction, sa signature peut être spécifiée lors de sa déclaration. Dans le kata Mars rover, une <code>Map</code> est utilisée pour associer à une orientation particulière du rover, une fonction qui va le faire avancer. Cette fonction doit prendre en paramètre une position et doit retourner la nouvelle position :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">moves</span> <span class="p">=</span> <span class="n">HashMap</span><span class="p">&lt;</span><span class="n">Orientation</span><span class="p">,</span> <span class="p">(</span><span class="n">Position</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Position</span><span class="p">&gt;()</span>
</span><span class='line'><span class="n">moves</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">Orientation</span><span class="p">.</span><span class="n">NORTH</span><span class="p">,</span> <span class="p">{</span> <span class="n">Position</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="m">1</span><span class="p">),</span> <span class="n">it</span><span class="p">.</span><span class="n">orientation</span><span class="p">)</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette manière de déclarer les types donne une très grande liberté sur la forme souhaitée pour le type. En effet, il n'est pas nécessaire de créer un type explicitement pour l'utiliser.</p>

<h2>Conclusion</h2>

<p>Kotlin est un langage avec des opinions fortes. Je trouve que ceci le rend clair et très agréable à utiliser. Il force à se poser les bonnes questions au bon moment, pour la gestion des null par exemple. Ces questions étant résolues au moment approprié, il y a moins de soucis à se faire le reste du temps. De plus, ce langage est simple à écrire et à lire car il est peu verbeux et offre une grande expressivité. Par ailleurs, son intéropérabilité avec Java permet de l'introduire dans des bases de code existantes sans devoir les modifier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polymorphisme avec le kata parrot refactoring]]></title>
    <link href="https://nphumbert.github.io/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring/"/>
    <updated>2016-04-20T16:26:03+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring</id>
    <content type="html"><![CDATA[<p>Ce kata est tiré d'un exemple du livre &ldquo;Refactoring, Improving the Design of Existing Code&rdquo; de Martin Fowler, et a été créé par Emilie Bache.
L'exemple contient des signes de mauvais design et permet notamment de pratiquer le polymorphisme.<br/>
Dans cet article, une solution à ce kata sera développée. Le projet qui a servi de support se trouve sur <a href="https://github.com/nphumbert/kata-parrot-refactoring">GitHub</a> avec la solution respective.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Il s'agit d'un projet où l'on calcule la vitesse d'un perroquet en fonction de son origine. La classe <code>Parrot</code> initiale est la suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ParrotTypeEnum</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">numberOfCoconuts</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="n">voltage</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isNailed</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Parrot</span><span class="o">(</span><span class="n">ParrotTypeEnum</span> <span class="n">_type</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numberOfCoconuts</span><span class="o">,</span> <span class="kt">double</span> <span class="n">voltage</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isNailed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">_type</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">numberOfCoconuts</span> <span class="o">=</span> <span class="n">numberOfCoconuts</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">voltage</span> <span class="o">=</span> <span class="n">voltage</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">isNailed</span> <span class="o">=</span> <span class="n">isNailed</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">EUROPEAN:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nf">getBaseSpeed</span><span class="o">();</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">AFRICAN:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">getBaseSpeed</span><span class="o">()</span> <span class="o">-</span> <span class="n">getLoadFactor</span><span class="o">()</span> <span class="o">*</span> <span class="n">numberOfCoconuts</span><span class="o">);</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">NORWEGIAN_BLUE:</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">(</span><span class="n">isNailed</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">getBaseSpeed</span><span class="o">(</span><span class="n">voltage</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Should be unreachable&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getBaseSpeed</span><span class="o">(</span><span class="kt">double</span> <span class="n">voltage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="mf">24.0</span><span class="o">,</span> <span class="n">voltage</span> <span class="o">*</span> <span class="n">getBaseSpeed</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getLoadFactor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">9.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getBaseSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">12.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette classe utilise une structure conditionnelle dans la méthode <code>getSpeed</code> permettant de calculer la vitesse du perroquet. Ceci n'est pas convenable car il faudrait ajouter une nouvelle structure de ce type à chaque fois qu'un comportement dépend du type de perroquet. De plus, il faudrait ajouter une clause à chacune de ces structures dès qu'un nouveau type de perroquet est ajouté. Finalement, si la manière de calculer la vitesse d'un des types de perroquet changeait, il faudrait modifier cette classe. Cela implique que cette classe a plusieurs raisons de changer : elle ne respecte donc pas le <a href="https://www.youtube.com/watch?v=-mroBlWUBBM">Single Responsibility Principle</a>.</p>

<h2>Lecture des tests et début du refactoring</h2>

<p>Je commence par lire les tests existants. Je remarque qu'il y a des tests associés à chaque type de perroquet.
Je décide de commencer par traiter les cas concernant le perroquet européen. Il y a un seul test associé à ce perroquet :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">getSpeedOfEuropeanParrot</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Parrot</span> <span class="n">parrot</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Parrot</span><span class="o">(</span><span class="n">ParrotTypeEnum</span><span class="o">.</span><span class="na">EUROPEAN</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">parrot</span><span class="o">.</span><span class="na">getSpeed</span><span class="o">(),</span> <span class="mf">12.0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je lance le harnais de test pour m'assurer que tous les tests sont verts et que je pars donc d'une bonne base.</p>

<p>Je remplace dans ce test la classe <code>Parrot</code> par la classe fille <code>EuropeanParrot</code>. Le constructeur de cette nouvelle classe n'a aucun paramètre. En effet, les valeurs passées au constructeur de la classe mère sont toutes à des valeurs par défaut.<br/>
Comme il n'y a qu'un seul test associé à ce perroquet, il est déduit que la vitesse de ce perroquet n'est affectée par aucun paramètre externe. L'implémentation vient confirmer cette affirmation et qu'il ne s'agit pas d'un oubli de test.</p>

<p>Dans la nouvelle classe, j'appelle le contructeur de la classe mère et je surcharge la méthode <code>getSpeed</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EuropeanParrot</span> <span class="kd">extends</span> <span class="n">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">EuropeanParrot</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">ParrotTypeEnum</span><span class="o">.</span><span class="na">EUROPEAN</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">getBaseSpeed</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode <code>getBaseSpeed()</code> est toujours celle de la classe mère avec une nouvelle visibilité : <code>protected</code>. En effet, cette méthode est utilisée lors du calcul de la vitesse de tous les types de perroquet.</p>

<p>De plus, je remplace l'implémentation dans la classe mère par un déclenchement de l'exception <code>IllegalStateException</code>. Ainsi, je peux être certaine qu'il s'agit de la nouvelle implémentation qui est utilisée.</p>

<p>Je lance le harnais de test pour vérifier que mon refactoring n'a pas engendré de régression.</p>

<p>Finalement, je déplace mon test dans une nouvelle classe de test, associée à la nouvelle classe <code>EuropeanParrot</code>. J'en profite pour renommer le test avec un nom qui explicite le métier. Le nouveau test est le suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_have_speed_equal_to_base_speed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="n">Parrot</span> <span class="n">parrot</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EuropeanParrot</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">speed</span> <span class="o">=</span> <span class="n">parrot</span><span class="o">.</span><span class="na">getSpeed</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">speed</span><span class="o">,</span> <span class="mf">12.0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je relance les tests pour m'assurer qu'ils sont toujours verts.</p>

<h2>Extraction des perroquets dans des sous-classes</h2>

<p>Comme pour le perroquet européen, j'extrait les deux autres perroquets (africain et norvégien) dans des sous-classes. J'itère les mêmes opérations que précédemment.</p>

<p>J'ai pu constater que le facteur externe affectant la vitesse du perroquet africain est le nombre de noix de coco qu'il porte. Ce facteur n'affectant que ce type de perroquet, il est supprimé de la classe mère et déplacé dans cette classe spécifique.
La classe <code>AfricanParrot</code> est la suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AfricanParrot</span> <span class="kd">extends</span> <span class="n">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">numberOfCoconuts</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">AfricanParrot</span><span class="o">(</span><span class="kt">int</span> <span class="n">numberOfCoconuts</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">ParrotTypeEnum</span><span class="o">.</span><span class="na">AFRICAN</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">numberOfCoconuts</span> <span class="o">=</span> <span class="n">numberOfCoconuts</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">getBaseSpeed</span><span class="o">()</span> <span class="o">-</span> <span class="n">getLoadFactor</span><span class="o">()</span> <span class="o">*</span> <span class="n">numberOfCoconuts</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getLoadFactor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">9.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>De même, les facteurs affectant la vitesse du perroquet norvégien sont le voltage et le fait d'avoir été abbatu. Ces facteurs n'affectant que ce type de perroquet, ils sont supprimés de la classe mère et utilisés dans cette classe fille. La classe <code>NorwegianParrot</code> est la suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NorwegianParrot</span> <span class="kd">extends</span> <span class="n">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">isNailed</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">voltage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">NorwegianParrot</span><span class="o">(</span><span class="kt">double</span> <span class="n">voltage</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isNailed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">ParrotTypeEnum</span><span class="o">.</span><span class="na">NORWEGIAN_BLUE</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">voltage</span> <span class="o">=</span> <span class="n">voltage</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">isNailed</span> <span class="o">=</span> <span class="n">isNailed</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">isNailed</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">getBaseSpeed</span><span class="o">(</span><span class="n">voltage</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getBaseSpeed</span><span class="o">(</span><span class="kt">double</span> <span class="n">voltage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="mf">24.0</span><span class="o">,</span> <span class="n">voltage</span> <span class="o">*</span> <span class="n">getBaseSpeed</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Abstraction de la classe mère</h2>

<p>Après ces étapes d'extraction, la classe <code>Parrot</code> est comme suit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ParrotTypeEnum</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Parrot</span><span class="o">(</span><span class="n">ParrotTypeEnum</span> <span class="n">_type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">_type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">EUROPEAN:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Should be overridden&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">AFRICAN:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Should be overridden&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">NORWEGIAN_BLUE:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Should be overridden&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Should be unreachable&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">double</span> <span class="nf">getBaseSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">12.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode <code>getSpeed</code> n'étant plus utilisée, je la rends abstraite, ainsi que la classe.<br/>
Je relance le harnais de test pour vérifier qu'il n'y a pas eu de régression.</p>

<p>De plus, je supprime l'énumération <code>ParrotTypeEnum</code> portant sur le type de perroquet car elle n'a plus lieu d'être. Par conséquent, les appels du constructeur de la super classe dans les classes filles disparaissent également. Je relance les tests pour vérifier qu'ils passent encore.<br/>
La classe <code>Parrot</code> devient :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">double</span> <span class="nf">computeSpeed</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">double</span> <span class="nf">getBaseSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">12.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Ce kata permet de remplacer une structure conditionnelle par du polymorphisme. Chacune des classes n'a plus qu'une seule raison de changer. De plus, pour ajouter un nouveau type de perroquet, il suffit de créer une nouvelle classe qui hérite de la classe <code>Parrot</code>, sans avoir à modifier quoi que ce soit par ailleurs. Le code est donc plus SOLID.
Un autre exemple de ce type de refactoring a été développé sur une des vidéos de ma chaîne YouTube <a href="https://www.youtube.com/watch?v=sxQAULX96P0">Crafties</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Once upon a time TDD... and me]]></title>
    <link href="https://nphumbert.github.io/blog/2016/04/13/once-upon-a-time-tdd-and-me/"/>
    <updated>2016-04-13T23:56:11+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/04/13/once-upon-a-time-tdd-and-me</id>
    <content type="html"><![CDATA[<p>Once upon a time, there was a young woman that had plenty of projects and passions and was a bit hyperactive. She doesn&rsquo;t really enjoy talking about her life and asks herself very seriously how is she going to write this post.
Among her early age dreams were learning many things about science, especially biosciences, and about software engineering. She started with biosciences (by the way, they are extremely fascinating, nothing is more complex and well crafted than the human body) and then she decided to continue with software engineering. However, the software engineering program that she completed only lasted one year (6 months of classes and 6 months of internship). Of course, this was only a door to access the world that she wanted to discover so much.</p>

<!-- more -->


<p>Not having much knowledge nor experience in IT, she was (and she still is) looking for methods, tools and good practices that would allow her to progress and produce clean code. Among these tools there is TDD.</p>

<p>TDD is a development tool that preconizes to write the tests before the production code. It was invented by Kent Beck. And you know what ? It is truly deeply deligthful ;-) (this sentence was a lot better in French, by the way). In this article, I am going to talk about my personal experience with TDD: the beginnings, the pros and cons and some ideas to set it up.</p>

<h2>The beginnings</h2>

<p>At the beginning, I saw the theoretical interest of this tool and I was fascinated by the concept (I find it very clever). On the other hand, I thought that it made me work a bit slower and that it was a little complicated.
I tried it for the first time towards the end of my first year as a software developer and within a fairly complex project in terms of business, technologies and challenges. Needless to say that TDD was not the only thing that my small head had to process! As a consequence, I tried to use it when I was not overworked and as often as possible. Moreover, the large majority of developers of this big project did not use this tool. Thus, it was sometimes complicated to use TDD in this context but it was definitely out of the question to quit, I saw the potential of this tool and I knew that I had to persevere.</p>

<p>After this first year of experience in software development, during which I learned a lot, and a little experience in TDD, I decided to take time for some of my personal projects. And then, everything changed. Working on a project from scratch, with full latitude, I could use TDD more easily.</p>

<p>After a good night of sleep, I therefore started my own project with a test. It was so beautiful. At this very point, I understood a number of benefits that TDD can provide.</p>

<h2>Pros</h2>

<h3>Express the business rather than doing an implementation</h3>

<p>We focus on the business rather than on an implementation.</p>

<h3>Work unitarily and be more efficient</h3>

<p>We only do one thing at a time and thus are more efficient. Contrary to what I thought at the beginning, I quickly realized that TDD allows to go faster. Indeed, we don&rsquo;t ask ourselves twenty questions at a time, even existential ones to create the best design. I am not saying that we shouldn&rsquo;t think anymore. By the way, I think we should and that it has to always be part of our job as software developers. On the other hand, TDD allows to ask ourselves even more relevant and targeted questions, a feature at a time.</p>

<h3>Have a test harness</h3>

<p>By starting with tests, not only we are sure that we are going to have tests but also we know that they are going to be more relevant. Indeed, they cover real business needs.
This test harness permits to ensure that our code is protected and that, during refactoring or addition of new features, we are going to be able to detect regressions easily and quickly, unit testing being the least expensive in terms of implementation and allowing to have an extremely short feedback loop.</p>

<h3>Gain of confidence</h3>

<p>By using TDD, I know I develop exactly what I need to, which is not negligible! This allowed me to gain confidence in my developments.</p>

<h3>Avoid bad design</h3>

<p>TDD lets us know when our design is bad. Indeed, if we can&rsquo;t test our code base, it means that our design is no longer adapted or has never been. It is an alarm to encourage us to render it simpler and adapted to our needs of the current time. For example, if we have to mock and fix a behaviour to test another that depends on it but we can&rsquo;t, this probably means that our classes are strongly coupled. This can happen when we invoke a static method in a class, for instance. In this case, classes are strongly linked because we can&rsquo;t easily change the implementation of what is being used. However, classes should be strongly decoupled in order to make the system more maintainable (changeable and extensible by changing implementations easily).</p>

<p>Moreover, I could notice that the design that emerges by using TDD is rather simple. I think this is the result obtained by the overall benefits of TDD: focus on the business, perform one thing at a time and have more self-confidence result in the construction of a clean design.</p>

<h2>Cons</h2>

<p>Currently, I don&rsquo;t see any and I have trouble trying to imagine some. By the way, I am very surprised to see that TDD is regularly misunderstood. It is often seen as a waste of time but I confirmed that this is only a false impression. There is obviously an adjustment period and it may vary depending on the developer. Nevertheless, I think that TDD is a good investment and deserves to be implemented. But how can we set it up ?</p>

<h2>Set up</h2>

<p>It is never easy to try something new, but if we never challenged ourselves and if we never pushed our limits, we would miss many extraordinary things and we would get bored a lot too. I think that the way to set it up in a given project depends on its context, like for everything else in life, and we have to always adapt to it as good as possible. However, I will try to share some ideas on the subject here.</p>

<h3>Start with small goals</h3>

<p>To be ambitious is great but it is hard to climb to the top of the mount Everest, the first time, without stopping. In the same way, during the set up of TDD our goals should be measured and well defined from the beginning. It could be as simple as encouraging all the team members to use TDD sometimes in the week. This way, they can progressively get familiar with the tool.</p>

<h3>Do not rush or be discouraged</h3>

<p>From my personal experience, it is useless to want to assimilate the tool in two minutes and then judge whether it is suitable or not. Indeed, if everybody judged us in two minutes, they would have a perception of us not necessarily relevant nor complete. It is important to take the required time to know the tool, understand it and properly use it.</p>

<h3>Do not consider it as something outside developements</h3>

<p>Like refactoring, TDD should, in my opinion, be a part of our developments. So it should not be something that we should ask the permission for but an integral part of our developments. As a consequence, we must take into account the adjustment period in our potential estimations, hence the importance of having small goals at first. After the adaptation period, it is quite possible that the estimations lower : I think TDD makes you go faster, for the reasons mentioned above, and we will no longer have to take into account the adaptation time.</p>

<h3>Make it a team effort</h3>

<p>I do not think that designating some team members to test the tool is a good idea. The whole team should be equally involved in the process from the start. Otherwise, I think the chances to succeed diminish greatly. Indeed, if only a few members of the team are actually concerned by the tool, the others may lose interest on it. Furthermore, if the communication about the experience is not ideally done, the allocated time to it will be misused (the results may be null, some team members may be discouraged and those who had the &ldquo;official permission&rdquo; to test it may be disappointed). Finally, we risk to miss out on a good collaboration between coworkers and thus better results.</p>

<h3>Have good communication within the team</h3>

<p>Don&rsquo;t hesitate to often talk about it. Different perspectives will enrich the experience. Nevertheless, do not forget my advice n°2 : do not be discouraged!</p>

<h2>Conclusion</h2>

<p>TDD is a development tool that has a lot of advantages. It is not necessarily obvious to see them at first sight but you should not abandon the ship because the journey is really worth it! I hope you enjoyed this story and that it will be helpful to you. See you soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Il était une fois le TDD... et moi]]></title>
    <link href="https://nphumbert.github.io/blog/2016/04/13/il-etait-une-fois-le-tdd-et-moi/"/>
    <updated>2016-04-13T17:27:36+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/04/13/il-etait-une-fois-le-tdd-et-moi</id>
    <content type="html"><![CDATA[<p>Il était une fois une jeune fille pleine de projets, de passions et un chouilla hyperactive.<br/>
Elle n'aime pas particulièrement raconter sa vie et se demande donc fortement comment elle va réussir à faire cet article.<br/>
Parmi ses rêves de gosse se trouvaient d'apprendre plein de choses sur les sciences, notamment les biosciences, et sur l'informatique. Elle a donc démarré avec les biosciences (d'ailleurs c'est méga passionant, rien de plus complexe et de mieux architecturé que le corps humain) puis a décidé d'enchaîner avec l'informatique. Cependant, le cursus suivi en informatique n'a duré qu'un an (moitié cours, moitié stage). Evidemment, il ne s'agissait que d'une porte d'accès au monde qu'elle souhaitait tant découvrir.</p>

<!-- more -->


<p>N'ayant pas beaucoup de connaissances ni d'expériences en informatique, elle était (et elle est toujours) à la recherche de méthodes, d'outils et de bonnes pratiques qui lui permettraient de progresser et de produire du code propre. Parmi ces outils se trouve le TDD.</p>

<p>Le TDD est un outil de développement qui préconise l'écriture des tests avant le code de production. Il a été inventé par Kent Beck. Et vous savez quoi ? C'est un truc de dingue ;-)
Dans cet article, je vais vous parler de mon expérience personnelle concernant le TDD : les débuts, les avantages et inconvénients et quelques idées pour le mettre en place.</p>

<h2>Les débuts</h2>

<p>Au départ, je voyais l'intérêt théorique de cet outil et le concept me passionnait particulièrement (je trouve ça malin). Par contre, en pratique, je trouvais que ça me ralentissait un peu et que c'était un peu compliqué.<br/>
Je l'ai expérimenté pour la première fois vers la fin de ma première année de développement et au sein d'un projet assez complexe en termes de métier, de technologies et d'enjeux. Autant dire que je n'avais pas que le TDD à intégrer dans ma petite tête ! Du coup, j'essayais de le faire quand je n'étais pas débordée et le plus souvent possible. Par ailleurs, la grande majorité des développeurs de ce gros projet n'utilisaient pas cet outil. Il était donc parfois un peu dur de faire du TDD dans ce contexte mais il était hors de question d'abandonner, je voyais le potentiel de cet outil et je savais qu'il fallait persévéver.</p>

<p>Après cette première année d'expérience dans le développement, où j'ai énormément appris, et une petite expérience en TDD, j'ai décidé de dédier du temps à des projets personnels. Et là, tout a changé. Partant d'un projet de zéro, avec toutes les libertés possibles, je pouvais expérimenter encore plus facilement le TDD.</p>

<p>Après une bonne nuit de sommeil, j'ai donc commencé mon projet avec un test. C'était trop beau. A ce moment précis, j'ai compris un certain nombre d'avantages que le TDD peut nous apporter.</p>

<h2>Les avantages</h2>

<h3>Exprimer le besoin plutôt que de réaliser une implémentation</h3>

<p>On se concentre sur le besoin plutôt que sur une implémentation.</p>

<h3>Travailler unitairement et être plus efficace</h3>

<p>On ne fait qu'une chose à la fois donc on est plus efficace.
Contrairement à ce que je pensais au tout début, j'ai rapidement compris que le TDD permettait d'aller plus vite. En effet, on ne se pose pas vingt questions à la fois, voire des questions existentielles pour savoir comment construire le meilleur design. Je ne dis pas qu'il ne faut plus se poser de question. D'ailleurs, je pense qu'il le faut et que cela doit faire partie de notre métier de développeur. Par contre, le TDD permet de se poser des questions encore plus pertinentes et ciblées, sur une fonctionnalité à la fois.</p>

<h3>Disposer d'un harnais de test</h3>

<p>En commençant par les tests, non seulement on est certain d'en avoir mais on est sûr d'avoir des tests pertinents. En effet, ils couvrent de vrais besoins métiers.<br/>
Ce harnais de test permet d'assurer que notre code est protégé et que, lors de refactorings ou ajout de nouvelles fonctionnalités, on pourra facilement et rapidement détecter des régressions, les tests unitaires étant les moins coûteux en terme de réalisation et permettant d'avoir un feedback extrêmement rapide.</p>

<h3>Gagner en confiance</h3>

<p>En faisant du TDD, je sais que je développe ce qu'il faut exactement développer, ce qui n'est pas négligeable ! Ceci m'a permis de gagner en confiance dans mes développements.</p>

<h3>Faire émerger un design propre</h3>

<p>Le TDD permet de se rendre compte quand le design n'est pas correct. En effet, si on n'arrive pas à tester notre code, cela veut dire que notre design n'est plus adapté ou ne l'a jamais été. Il s'agit ainsi d'une alerte pour nous encourager à le rendre plus simple et adapté à notre besoin à un instant T. Par exemple, si on a besoin de mocker et de fixer un comportement pour en tester un autre qui en dépend et qu'on n'y arrive pas, cela veut peut-être dire que nos classes sont trop couplées. Ceci peut arriver quand on fait un appel statique dans une classe. Dans ce cas, les classes sont fortement liées car on ne peut pas changer l'implémentation de ce qui est utilisé. Or, les classes doivent être fortement découplées pour que le système soit plus maintenable (évolutif et extensible en changeant les implémentations facilement).</p>

<p>De plus, j'ai pu constater que le design qui émerge en utilisant du TDD est plutôt simple. Je pense qu'il s'agit du résultat obtenu par l'ensemble des avantages du TDD : se concentrer sur le besoin, réaliser une seule chose à la fois et avoir plus confiance en soi résultent en la construction d'un design propre.</p>

<h2>Les inconvénients</h2>

<p>Actuellement, j'en vois aucun et j'ai du mal à en imaginer.
D'ailleurs, je suis surprise de voir que le TDD est parfois mal perçu dans le monde du travail. Il est souvent vu comme étant une perte de temps mais j'ai pu confirmer qu'il s'agit d'une fausse impression. Il faut évidemment un temps d'adaptation et celui-ci peut varier en fonction des développeurs. Néanmoins, je pense que le TDD serait un bon investissement et mérite d'être mis en place. Oui, mais comment ?</p>

<h2>Mise en place</h2>

<p>Ce n'est jamais facile d'essayer quelque chose de nouveau, mais si on ne se remettait jamais en question et si on ne repoussait jamais nos limites, on passerait à côté de choses extraordinaires et on s'ennuierait beaucoup aussi.<br/>
Mais comment mettre en place cet outil dans une structure ? Je pense que, comme tout, cela dépend du contexte et il faut toujours s'adapter au mieux à celui-ci. Je vais néanmoins essayer de partager quelques idées à ce sujet.</p>

<h3>Commencer avec des petits objectifs</h3>

<p>Etre ambitieux c'est génial mais il est difficile d'arriver au sommet du Mont Blanc, dès la première fois, d'une traite. De la même manière, il faut que nos objectifs, lors de la mise en place du TDD, soient mesurés et bien définis dès le départ. Il pourrait s'agir, par exemple, d'encourager simplement tous les membres de l'équipe à faire du TDD quelques fois dans la semaine. Ainsi, ils peuvent se familiariser petit à petit avec l'outil.</p>

<h3>Ne pas se précipiter, ni se décourager</h3>

<p>D'après mon expérience personnelle, il ne sert à rien de vouloir intégrer l'outil en deux minutes et juger ensuite s'il est adapté ou pas. D'ailleurs, si tout le monde nous jugeait en deux minutes, on aurait certainement toujours une perception pas forcément pertinente ou incomplète de nous. Il est important de prendre le temps nécessaire pour connaître l'outil, le comprendre et bien l'utiliser.</p>

<h3>Ne pas le considérer comme quelque chose en dehors des développements</h3>

<p>Tout comme le refactoring, le TDD doit, selon moi, faire partie de nos développements. Il ne doit donc pas s'agir de quelque chose dont on doit demander la permission mais plus d'une étape intégrante de nos développements. Par conséquent, il faut prendre en compte le temps d'adaptation dans nos éventuels chiffrages, d'où l'importance d'avoir de petits objectifs au début. Une fois le temps d'adaptation passé, il est bien possible que les chiffrages baissent : je pense que le TDD permet d'aller plus vite, pour les raisons évoquées précédémment, et en plus on aura le temps d'adaptation en moins.</p>

<h3>En faire une affaire d'équipe</h3>

<p>Je ne pense pas qu'allouer seulement quelques membres d'une équipe pour tester l'outil soit une bonne idée. Il faut que tous soient concernés au même titre dès le départ. Sinon, je pense que les chances de réussite diminuent considérablement. En effet, si uniquement quelques personnes sont réellement concernées par l'outil, les autres risquent de s'y désintérésser. De plus, si la communication sur l'expérience ne se fait pas idéalement, le temps alloué à celle-ci sera mal utilisé (les résultats peuvent être nuls, certains membres de l'équipe peuvent être découragés et ceux qui ont testé peuvent être déçus). Finalement, on risque de passer à côté d'une belle collaboration entre collègues et donc de meilleurs résultats.</p>

<h3>Avoir une bonne communication au sein de l'équipe</h3>

<p>Il ne faut pas hésiter à en parler entre vous. Les différents points de vue vont enrichir l'expérience. Néanmoins, n'oubliez pas le conseil n°2 : ne vous découragez pas !</p>

<h1>Conclusion</h1>

<p>Le TDD est un outil de développement qui comporte énormément d'avantages. Il n'est pas forcément évident de les voir du premier coup mais il ne faut pas abandonner le navire car le voyage est vraiment superbe ! J'espère que vous avez apprécié cette histoire et qu'elle vous sera utile. A bientôt !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Is Like Sleeping]]></title>
    <link href="https://nphumbert.github.io/blog/2016/03/10/refactoring-is-like-sleeping/"/>
    <updated>2016-03-10T15:12:42+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/03/10/refactoring-is-like-sleeping</id>
    <content type="html"><![CDATA[<p>Bob is a developer. Bob has been asked to add a brand new feature to the application. Bob would like to take this opportunity to refactor a little bit the code because it doesn&rsquo;t respect the good practices that he learnt from the last Software Craftsmanship meetup. Bob has been told that he couldn&rsquo;t refactor because there is currently not enough time to do it and because he needs to produce. Bob says to himself that there is never enough time anyways&hellip;</p>

<p>Sounds familiar? Indeed, refactoring is often seen as an activity without any value. Other things in life can also seem worthless. There is one that takes almost a third of our lives during which we do literally nothing: <em>sleeping</em>!</p>

<!-- more -->


<p>The number of things that we could do if we didn&rsquo;t sleep! However, after a few days, even hours, unpleasant events would eventually occur. Without sleep, the most trivial tasks can become very difficult to accomplish and weird mistakes can take place (like pouring orange juice into your bowl of cereal). After a while, sleep takes suddenly over, which can lead to accidents (because of drowsy driving, for example).</p>

<p>In the same way, postponing refactoring harms the project. Developments may take much longer than necessary and bugs may occur in features very apart from those that have been modified. Moreover, there is a moment where refactoring imposes itself unexpectedly: code can no longer be modified without risking important regressions. This can happen at a critical time of the project and thus jeopardize it. At this point, the feared verdict may be rendered: &ldquo;everything must be rewritten&rdquo;.</p>

<p>In general, regular refactoring is necessary to the good health of a project, just like sleeping every night is for ours. Thereafter, we are going to define refactoring in this context, when is it good to do it, how to prepare it properly and what to do if time is missing.</p>

<h2>What does refactoring mean?</h2>

<p>According to Michael Feathers, refactoring is &ldquo;the act of improving design without changing its behavior&rdquo;.</p>

<p>It is not necessarily about changing a whole class hierarchy or about implementing a complex design pattern but it could be as simple as renaming a variable, method or class, extracting a private method in an external class, gathering the attributes of a method into an object, etc.</p>

<p>Furthermore, we also consider that adding tests to an existing code base is refactoring. Indeed, a testable code is a first step towards a better design.</p>

<h2>When to refactor?</h2>

<p>The idea is not to try to fix the entire system every time. This would be unproductive and impossible to carry out. Also, it would be difficult to justify causing regressions in a portion of code too unrelated to the one that was supposed to be changed.</p>

<p>Refactoring is very efficient when it is targeted at the code that is related to the development of a feature. Moreover, it is preferable to refactor before adding new code in order to start on good bases.</p>

<h2>How to prepare it?</h2>

<p>The first thing to do before refactoring is to ensure that there are tests that cover the code that is going to be modified. Tests permit to verify that refactoring doesn&rsquo;t generate regression. If tests are missing, they need to be added before starting.</p>

<p>Sometimes it might be impossible to test a portion of code. In this case, you can perform the minimal refactoring required for implementing the tests.</p>

<h2>What to do if time is missing?</h2>

<p>If, like Bob, you lack the time, you must be pragmatic. It can be interesting to do small refactoring for each development. This allows to improve the design without consuming too much time and to prepare the ground for a larger refactoring.</p>

<h2>Conclusion</h2>

<p>Refactoring is essential in a project and should be done regularly. It allows to ensure that new features could be developed within a reasonable time and to limit regressions by improving the design. Furthermore, it allows developers to (re)take pleasure to make the product evolve.</p>

<p>We would like to conclude with the boy scout rule that tells us we should always leave the code in a better condition than when we found it. The application of this rule leads to improving the overall quality of the code and to the reversal of the technical debt.</p>

<hr />

<p><em>This article has been written in collaboration with Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Que faire lorsqu'une méthode privée veut être testée ?]]></title>
    <link href="https://nphumbert.github.io/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee/"/>
    <updated>2016-02-21T11:09:38+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee</id>
    <content type="html"><![CDATA[<p>Les tests automatisés servent à vérifier le bon comportement d'un objet (ou d'un ensemble d'objets), indépendamment de la manière dont ce comportement est implémenté. Le comportement d'un objet est décrit par son API publique (constructeurs, constantes et méthodes publiques). Les tests ne devraient donc utiliser que cette API.</p>

<p>Les méthodes privées (et <em>protected</em>) ne faisant pas partie de l'API publique d'un objet, elles ne devraient pas être appelées directement par le code de test.</p>

<p>Cet article a pour objectif de montrer comment réagir lorsqu'il paraît nécessaire de tester une méthode privée.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Un projet d'illustration a été créé afin de servir de support pour cet article. Il est disponible sur <a href="https://github.com/nphumbert/demo-private-method-test/">GitHub</a>.</p>

<p>Il s'agit de hasher le mot de passe lors de la création d'un utilisateur. Il faut imaginer que la méthode de hash est plus complexe (utilisation de librairies externes, de nombreuses conditions, etc.) pour donner tout son sens à la suite de l'article.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">login</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">login</span> <span class="o">=</span> <span class="n">login</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">MessageDigest</span> <span class="n">md</span> <span class="o">=</span> <span class="n">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;SHA-256&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">md</span><span class="o">.</span><span class="na">digest</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">)));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="o">|</span> <span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode de hash étant considérée comme complexe, le besoin se fait sentir de tester son code en isolation. En effet, en partant de cette hypothèse, il n'est pas facilement possible de le tester complètement en utilisant uniquement des appels à l'API publique.</p>

<h2>Eviter la réflexion</h2>

<p>Parfois, la réflexion est utilisée pour augmenter la visibilité de la méthode privée durant la durée d'un test. Cette méthode peut alors être appelée directement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_hash_password</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">NoSuchMethodException</span><span class="o">,</span> <span class="n">InvocationTargetException</span><span class="o">,</span> <span class="n">IllegalAccessException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;jdoe&quot;</span><span class="o">,</span> <span class="s">&quot;john.doe@gmail.com&quot;</span><span class="o">,</span> <span class="s">&quot;secret&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&quot;hash&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">method</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">hashedPassword</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="s">&quot;secret&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">hashedPassword</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;[43, -72, 13, 83, 123, 29, -93, -29, -117, -45, 3, 97, -86, -123, 86, -122, -67, -32, -22, -51, 113, 98, -2, -10, -94, 95, -23, 123, -11, 39, -94, 91]&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Utiliser la réflexion dans ce cadre est dangereux !</p>

<p>En effet, toutes les actions ci-dessous auront pour effet de faire échouer le test, sans empêcher celui-ci de compiler :</p>

<ul>
<li>Renommer la méthode <code>hash</code>.</li>
<li>Changer l'ordre ou le type des attributs de la méthode <code>hash</code>.</li>
<li>Changer le type de retour de la méthode <code>hash</code>.</li>
<li>Supprimer la méthode <code>hash</code> en intégrant son code dans une autre méthode (ou dans le constructeur).</li>
</ul>


<p>Toutes ces actions sont des décisions d'implémentation qui n'ont aucun lien avec le comportement de la classe. Il n'est donc pas normal qu'un test échoue lorsque l'une de ces actions est effectuée.</p>

<p>Par ailleurs, l'API de réflexion Java manipulant des <code>String</code> et des <code>Object</code>, l'IDE n'est pas capable d'aider à corriger automatiquement le code de test correspondant.</p>

<h2>Déplacer le code dans une dépendance externe</h2>

<p>Selon moi, la meilleure manière de réagir est d'extraire le code, qui doit être testé, dans sa propre classe.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HashProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sha256HashProvider</span> <span class="kd">implements</span> <span class="n">HashProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">MessageDigest</span> <span class="n">md</span> <span class="o">=</span> <span class="n">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;SHA-256&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">md</span><span class="o">.</span><span class="na">digest</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">)));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="o">|</span> <span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La classe <code>User</code> de l'exemple est alors transformée comme ci-dessous.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">login</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="n">HashProvider</span> <span class="n">hashProvider</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">login</span> <span class="o">=</span> <span class="n">login</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">hashProvider</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Par ailleurs, le test se trouve également modifié.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_hash_password_when_create_user</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="n">HashProvider</span> <span class="n">hashProvider</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">HashProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">hashProvider</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="s">&quot;secret&quot;</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;hash&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;jdoe&quot;</span><span class="o">,</span> <span class="s">&quot;john.doe@gmail.com&quot;</span><span class="o">,</span> <span class="s">&quot;secret&quot;</span><span class="o">,</span> <span class="n">hashProvider</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">password</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;hash&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code respecte désormais le <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"><em>Single Responsibility Principle</em> (SRP)</a>. En effet, chaque classe ne fait qu'une seule chose. Il n'est donc, par exemple, plus nécessaire de modifier la classe <code>User</code> pour changer la logique de hashage.</p>

<p>Le <a href="https://en.wikipedia.org/wiki/Open/closed_principle"><em>Open/Closed Principle</em> (OCP)</a> est aussi mis en application car la classe <code>User</code> ne se préoccupe pas de l'implémentation de <code>HashProvider</code> qu'elle utilise. Il est donc possible de la changer sans que le code de <code>User</code> en soit affecté.</p>

<p>Tout le code est complètement testé en utilisant seulement les API publiques. Cela signifie que seul le comportement est testé, et non plus l'implémentation.</p>

<p>Finalement, le code de production ainsi que celui de test est simplifié.</p>

<h2>Conclusion</h2>

<p>Lorsqu'une méthode privée devient si complexe que le besoin de la tester en isolation se fait sentir, cela signifie que la classe fait trop de choses et que le SRP n'est sûrement pas respecté. Extraire cette méthode dans une classe externe permet de tester complètement ce code tout en améliorant le design en rendant le code plus SOLID.</p>

<p>Dès qu'une méthode privée est créée afin d'effectuer un traitement, il peut être utile de se demander si elle ne devrait pas être extraite, tout en restant pragmatique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactorer, c'est comme dormir]]></title>
    <link href="https://nphumbert.github.io/blog/2016/01/31/refactorer-c-est-comme-dormir/"/>
    <updated>2016-01-31T19:16:09+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/01/31/refactorer-c-est-comme-dormir</id>
    <content type="html"><![CDATA[<p>Robert est un développeur. On a demandé à Robert d'ajouter une nouvelle fonctionnalité à l'application. Robert aimerait bien en profiter pour refactorer un peu le code car il ne respecte pas les bonnes pratiques qu'il a pu voir lors du dernier meetup Software Craftsmanship. On dit alors à Robert qu'il ne peut pas refactorer car, en ce moment, il n'y a pas le temps pour ça et qu'il doit produire. Robert se dit qu'il n'y a de toutes façons jamais le temps&hellip;</p>

<p>Cette histoire vous semble familière ? En effet, le refactoring est souvent perçu comme n'apportant aucune valeur. D'autres choses dans la vie peuvent sembler n'apporter aucune valeur. Il y en a notamment une qui prend près du tiers de la vie d'une personne pendant laquelle cette personne ne fait littéralement rien : <em>dormir</em> !</p>

<!-- more -->


<p>Le nombre de choses que l'on pourrait faire si l'on ne dormait pas ! Cependant, au bout de quelques jours, voire quelques heures, des événements désagréables finiraient par survenir. Sans sommeil, la moindre des tâches peut devenir très longue à effectuer et des erreurs étranges peuvent arriver (comme verser du jus d'orange dans son bol de céréales). Après un certain temps, le sommeil prend le dessus de manière incontrôlée, ce qui peut conduire à des accidents (à cause d'une somnolence au volant par exemple).</p>

<p>De manière similaire, repousser le refactoring nuit au projet. Les développements peuvent prendre beaucoup plus de temps que nécessaire et des bugs peuvent survenir sur des fonctionnalités très éloignées de celles qui sont modifiées. De plus, il arrive un moment où le refactoring s'impose : le code ne peut plus être modifié sans risquer d'importantes régressions. Ceci peut se produire à un moment critique du projet et donc le mettre en péril. A ce moment là, la sentence tant redoutée peut tomber : « il faut tout réécrire ».</p>

<p>De manière globale, refactorer régulièrement est nécessaire à la bonne santé du projet, tout comme dormir chaque nuit l'est pour la notre. Dans la suite de cet article, nous allons définir ce que signifie refactorer dans ce contexte, quand est-il bon de le faire, comment bien le préparer et que faire si le temps manque.</p>

<h2>Que signifie refactorer ?</h2>

<p>Selon Michael Feathers, le refactoring est l'acte d'améliorer le <em>design</em> du code sans changer son comportement.</p>

<p>Il ne s'agit pas forcément de changer toute une hiérarchie de classes ou de mettre en place un <em>design pattern</em> très complexe mais cela peut être aussi simple que de renommer une variable, une méthode, une classe, d'extraire une méthode privée dans une classe externe, de regrouper les attributs d'une méthode dans un objet, etc.</p>

<p>De plus, nous considérons aussi qu'ajouter des tests à du code existant est du refactoring. En effet, un code testable est un premier pas vers un meilleur <em>design</em>.</p>

<h2>Quand faut-il refactorer ?</h2>

<p>L'idée n'est pas d'essayer de corriger l'intégralité du système à chaque fois. Ceci serait contre productif et impossible à mettre en place. De plus, il serait très difficilement justifiable de provoquer des régressions dans une partie du code très éloignée de celle qui est censée être modifiée.</p>

<p>Le refactoring est très efficace lorsqu'il est ciblé sur le code qui est concerné par le développement d'une fonctionnalité. De plus, il nous semble préférable de refactorer avant d'ajouter du nouveau code afin de démarrer sur des bases saines.</p>

<h2>Comment le préparer ?</h2>

<p>La première chose à faire avant de refactorer est de s'assurer qu'il y a des tests en place. Ces tests permettent de vérifier que le refactoring ne génère pas de régression. Si ces tests ne sont pas déjà en place, il faut les ajouter avant de commencer.</p>

<p>Il peut arriver qu'il soit impossible de tester une portion de code. Dans ce cas, il faut effectuer le refactoring minimum nécessaire à la mise en place des tests.</p>

<h2>Que faire si le temps manque ?</h2>

<p>Si, comme Robert, le temps vous manque, il faut faire preuve de pragmatisme. Il peut être intéressant d'effectuer de petits refactoing à chaque développement. Cela permet d'améliorer le <em>design</em> sans consommer trop de temps et de préparer le terrain pour de plus gros refactoring.</p>

<h2>Conclusion</h2>

<p>Le refactoring est essentiel dans un projet et doit être effectué régulièrement. Il permet d'assurer que les nouvelles fonctionnalités pourront être développées dans un temps raisonnable et de limiter les régressions en améliorant le <em>design</em>. Par ailleurs, il permet aussi aux développeurs de (re)prendre du plaisir à faire évoluer le produit.</p>

<p>Nous aimerions conclure avec la règle du boy scout qui indique que l'on doit toujours laisser le code dans un meilleur état que lorsqu'on l'a trouvé. L'application de cette règle conduit à l'amélioration de la qualité globale du code et à l'inversion de la dette technique.</p>

<hr />

<p><em>Cet article a été écrit en collaboration avec Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pourquoi ne pas utiliser l'héritage pour éviter la duplication de code ?]]></title>
    <link href="https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code/"/>
    <updated>2016-01-24T11:38:41+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code</id>
    <content type="html"><![CDATA[<p>L'héritage est une composante très importante des langages orientés objet tels que Java. Cependant, il doit être utilisé à bon escient afin de respecter les bonnes pratiques de programmation.</p>

<p>Il m'est arrivé de rencontrer des cas où l'héritage était utilisé afin de ne pas dupliquer du code. Le but de cet article est d'illustrer une telle utilisation, d'analyser ses inconvénients et de montrer une manière possible de la corriger.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Un projet d'illustration a été créé afin de servir de support pour cet article. Il est disponible sur <a href="https://github.com/nphumbert/demo-inappropriate-inheritance">GitHub</a>. Ce projet contient deux branches :</p>

<ul>
<li><code>inappropriate-inheritance</code> : contient l'utilisation inappropriée de l'héritage.</li>
<li><code>dependency</code> : contient une proposition de correction en utilisant une dépendance.</li>
</ul>


<p>Il s'agit de deux <em>controllers</em> Spring MVC qui doivent hasher un texte. Dans le cas de l'utilisation inappropriée de l'héritage, le code d'un des <em>controllers</em> est le suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProfileController</span> <span class="kd">extends</span> <span class="n">BaseController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/profile&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">profile</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;profile: &quot;</span> <span class="o">+</span> <span class="n">hash</span><span class="o">(</span><span class="s">&quot;profile&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce <em>controller</em> hérite d'une classe commune qui contient la méthode <code>hash</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseController</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pourquoi n'est-il pas correct d'utiliser l'héritage ici ?</h2>

<h3>Non respect de la programmation orientée objet (POO)</h3>

<p>Dans ce code, la mécanique de la POO est respectée mais pas sa sémantique. En effet, la classe <code>BaseController</code> n'a pas de raison d'être. Elle ne correspond à aucun concept et ne sert qu'à contenir du code partagé entre les <em>controllers</em>. Ce genre de classe possède souvent un nom flou et générique, ce qui est un signe que le concept associé est mal défini, voire inexistant.</p>

<h3>Difficulté à tester</h3>

<p>La capacité du code à être testé n'est pas une fin en soi. Cependant, un code difficile à tester est un <em>smell</em> qui indique le plus souvent un problème de conception.</p>

<p>Ici, il est obligatoire de passer par un <em>set up</em> assez lourd pour tester en isolation le <em>controller</em>. Une classe privée héritant du <em>controller</em> est créée afin de surcharger la méthode <code>hash</code> et de fixer la valeur de retour. Les tests portent donc sur cette classe au lieu de porter sur le <em>controller</em> initial.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringApplicationConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">InappropriateInheritanceApplication</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProfileControllerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">HASH</span> <span class="o">=</span> <span class="s">&quot;hash&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">TestableProfileController</span> <span class="kd">extends</span> <span class="n">ProfileController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">HASH</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ProfileController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TestableProfileController</span><span class="o">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">standaloneSetup</span><span class="o">(</span><span class="n">controller</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_get_hash_when_get_profile</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// when</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">contentAsString</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/profile&quot;</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">andReturn</span><span class="o">().</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getContentAsString</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// then</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">contentAsString</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;profile: &quot;</span> <span class="o">+</span> <span class="n">HASH</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La complexité du <em>set up</em> est bien trop importante par rapport au code à tester qui est relativement simple.</p>

<h3>Fort couplage</h3>

<p>L'héritage introduit un fort couplage entre les classes. En effet, tous les <em>controllers</em> doivent hériter de <code>BaseController</code> pour bénéficier de la méthode <code>hash</code>. Ceci implique qu'ils doivent avoir accès à cette classe (soit être dans le même projet, soit avoir une dépendance vers sa librairie).</p>

<p>De plus, l'héritage multiple étant interdit en Java, les <em>controllers</em> ne peuvent pas hériter d'une autre classe qui serait appropriée.</p>

<p>Finalement, si une autre classe avait besoin de la méthode <code>hash</code>, elle devrait forcément hériter de <code>BaseController</code> (ce qui n'a pas de sens s'il ne s'agit pas d'un <em>controller</em>) ou alors dupliquer le code. Ce problème met en évidence le fait que la notion de hashage n'a aucun rapport avec la notion de <em>controller</em>.</p>

<h3>Difficulté à maintenir</h3>

<p>Le couplage fort décrit précédemment rend le code difficile à maintenir. Un changement du besoin entraînerait une modification du code à un endroit où on ne s'y attend pas. Par ailleurs, il pourrait y avoir des effets de bord inattendus sur le reste du code.</p>

<h2>Comment peut-on corriger ce code ?</h2>

<p>La solution proposée pour corriger ce code est d'extraire la méthode de <code>hash</code> dans une dépendance qui sera injectée dans les <em>controllers</em>.</p>

<p>Tout d'abord, une interface <code>HashProvider</code> est créée et implémentée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HashProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sha256HashProvider</span> <span class="kd">implements</span> <span class="n">HashProvider</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette implémentation peut alors être injectée dans le <em>controller</em> afin d'être utilisée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProfileController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">HashProvider</span> <span class="n">hashProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ProfileController</span><span class="o">(</span><span class="n">HashProvider</span> <span class="n">hashProvider</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">hashProvider</span> <span class="o">=</span> <span class="n">hashProvider</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/profile&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">profile</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;profile: &quot;</span> <span class="o">+</span> <span class="n">hashProvider</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="s">&quot;profile&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le <em>set up</em> de test de ce <em>controller</em> s'en trouve simplifié car il n'y a plus qu'à <em>mocker</em> l'interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringApplicationConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">InappropriateInheritanceApplication</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProfileControllerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">HashProvider</span> <span class="n">hashProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">hashProvider</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">HashProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ProfileController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ProfileController</span><span class="o">(</span><span class="n">hashProvider</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">standaloneSetup</span><span class="o">(</span><span class="n">controller</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_get_hash_when_get_profile</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// given</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">hashProvider</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="s">&quot;profile&quot;</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;hash&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// when</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">contentAsString</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/profile&quot;</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">andReturn</span><span class="o">().</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getContentAsString</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// then</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">contentAsString</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;profile: hash&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalement, la logique de hashage est totalement découplée de celle du <em>controller</em>. Ceci rend le code plus simple à maintenir car si le besoin change, il suffit de modifier l'implémentation de <code>HashProvider</code> ou d'en ajouter une nouvelle. Ainsi, le comportement du <em>controller</em> est modifié sans que son code ne change.</p>

<h2>Conclusion</h2>

<p>Il est nécessaire de faire attention à ne pas abuser de l'héritage. Dans cet article, il a été montré qu'il n'est pas approprié pour éviter la duplication de code. Dans ce cas, il est préférable d'utiliser une interface dont une implémentation sera injectée. Ceci a pour principal avantage de rendre le code plus simple et facile à maintenir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Spring MVC Controllers]]></title>
    <link href="https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/"/>
    <updated>2015-10-31T12:54:08+01:00</updated>
    <id>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers</id>
    <content type="html"><![CDATA[<p>Since Spring 3.2 (January, 2013), it is possible to test Spring MVC controllers without an external framework.
The goal of this article is to show how to test Spring MVC controllers using only Spring testing capabilities.</p>

<!-- more -->


<p>To do so, a very simple Spring Boot project will be used as a support. You can find it on <a href="https://github.com/nphumbert/demo-test-spring-mvc">GitHub</a>. The controller to test will first be introduced. Then, explanations will be given on how to test it.</p>

<h2>Controller</h2>

<p>The controller that will be tested is showed below. It permits to do a search in a fruit list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/fruits&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFruits</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;search&quot;</span><span class="o">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="n">String</span> <span class="n">search</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;fruitBowl&quot;</span><span class="o">,</span> <span class="n">search</span><span class="o">(</span><span class="n">search</span><span class="o">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;fruits&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">search</span><span class="o">(</span><span class="n">String</span> <span class="n">search</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">search</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">fruitBowl</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nf">fruitBowl</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">fruit</span> <span class="o">-&gt;</span> <span class="n">fruit</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="n">search</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">fruitBowl</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">asList</span><span class="o">(</span><span class="s">&quot;banana&quot;</span><span class="o">,</span> <span class="s">&quot;orange&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Test</h2>

<p>The test class must be annotated with the following annotations:</p>

<ul>
<li><code>@RunWith(SpringJUnit4ClassRunner.class)</code> to benefit from Spring features in JUnit tests.</li>
<li><code>@SpringApplicationConfiguration(classes = DemoTestSpringMvcApplication.class)</code> to specify the configuration class that will be used during the test.</li>
<li><code>@WebAppConfiguration</code> to indicate that the Spring application context that must be loaded is a <code>WebApplicationContext</code>.</li>
</ul>


<p>The entry point used to perform the tests is the class <code>MockMvc</code>. Thereafter, the usage of this class will be explained.</p>

<h3>Set up</h3>

<p>The set up of the <code>MockMvc</code> class can be done as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ApplicationController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ApplicationController</span><span class="o">();</span> <span class="c1">// 1</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">standaloneSetup</span><span class="o">(</span><span class="n">controller</span><span class="o">).</span><span class="na">build</span><span class="o">();</span> <span class="c1">// 2</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, the controller must be instantiated (<code>1</code>). Then, the mock is initialized using the static method <code>MockMvcBuilders.standaloneSetup()</code> (<code>2</code>). At this point, the mock is ready to test the controller.</p>

<h3>Perform</h3>

<p>The method <code>MockMvc.perform()</code> allows to simulate HTTP requests to the controller. For instance, a GET request is done as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span>
</span><span class='line'>    <span class="n">get</span><span class="o">(</span><span class="s">&quot;/fruits&quot;</span><span class="o">)</span> <span class="c1">// 1</span>
</span><span class='line'>        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&quot;search&quot;</span><span class="o">,</span> <span class="s">&quot;ban&quot;</span><span class="o">)</span> <span class="c1">// 2</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The class <code>MockMvcRequestBuilders</code> provides static methods, such as <code>get</code> or <code>post</code>, to simulate HTTP requests on a particular endpoint of the controller (<code>1</code>). HTTP parameters can be added fluently to the request (<code>2</code>).</p>

<p>Furthermore, other static methods are provided by the <code>MockMvcRequestBuilders</code> class:</p>

<ul>
<li>HTTP verbs like <code>delete</code>, <code>put</code> or <code>patch</code>.</li>
<li><code>fileUpload</code> to upload binary files.</li>
<li>Others (<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html">documentation</a>).</li>
</ul>


<h3>Assert</h3>

<p>MockMvc permits to add assertions to the controller&rsquo;s response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/fruits&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&quot;search&quot;</span><span class="o">,</span> <span class="s">&quot;ban&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span> <span class="c1">// 1</span>
</span><span class='line'>    <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">view</span><span class="o">().</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;fruits&quot;</span><span class="o">))</span> <span class="c1">// 2</span>
</span><span class='line'>    <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">model</span><span class="o">().</span><span class="na">attribute</span><span class="o">(</span><span class="s">&quot;fruitBowl&quot;</span><span class="o">,</span> <span class="n">contains</span><span class="o">(</span><span class="s">&quot;banana&quot;</span><span class="o">)));</span> <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assertions are done with the <code>andExpect()</code> method. The class <code>MockMvcResultMatchers</code> provides static methods to do assertions on the HTTP status (<code>1</code>), the view asked by the controller (<code>2</code>) and on the model completed by the controller (<code>3</code>).</p>

<h2>Conclusion</h2>

<p>The Spring test framework is a very powerful, complete and simple way to test Spring MVC controllers. Its fluent API allows to write elegant and yet precise tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exposer des ressources statiques avec Spring MVC]]></title>
    <link href="https://nphumbert.github.io/blog/2015/09/18/exposer-des-ressources-statiques-avec-spring-mvc/"/>
    <updated>2015-09-18T13:59:06+02:00</updated>
    <id>https://nphumbert.github.io/blog/2015/09/18/exposer-des-ressources-statiques-avec-spring-mvc</id>
    <content type="html"><![CDATA[<p>Il est souvent nécessaire d'exposer des ressources statiques telles que des images, des fichiers pdf, des vidéos, etc. dans une application web.
Ces fichiers sont stockés sur le serveur et ne sont donc pas accessibles à l'utilisateur via une URL.</p>

<p>L'objectif de cet article est d'exposer des fichiers stockés sur le serveur via une URL dans une application Spring MVC.</p>

<!-- more -->


<h2>Surcharge de la configuration web</h2>

<p>Pour exposer des ressources statiques, il faut surcharger la configuration web de Spring MVC.
Pour ce faire, une classe de configuration qui hérite de <code>WebMvcConfigurerAdapter</code> doit être implémentée.
Plus précisément, il est nécessaire de surcharger la méthode <code>addResourceHandlers()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">extends</span> <span class="n">WebMvcConfigurerAdapter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DIRECTORY</span> <span class="o">=</span> <span class="s">&quot;/path/to/server/disk/resources&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="n">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">&quot;/resources/**&quot;</span><span class="o">)</span> <span class="c1">// 1</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">&quot;file:///&quot;</span> <span class="o">+</span> <span class="n">DIRECTORY</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span><span class="o">);</span> <span class="c1">// 2</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode de configuration fournit un objet de type <code>ResourceHandlerRegistry</code> qui permet d'associer une URL (<code>1</code>) à un dossier (<code>2</code>). Ainsi, l'URL <code>http://example.com/resources/file.pdf</code> sera associée au fichier <code>/path/to/server/disk/resources/file.pdf</code>.</p>

<h2>Conclusion</h2>

<p>Pour conclure, Spring permet d'exposer des ressources statiques via des URL de manière simple et rapide.</p>
]]></content>
  </entry>
  
</feed>
