<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Nadia Humbert-Labeaumaz]]></title>
  <link href="https://nphumbert.github.io/atom.xml" rel="self"/>
  <link href="https://nphumbert.github.io/"/>
  <updated>2016-05-25T01:00:16+02:00</updated>
  <id>https://nphumbert.github.io/</id>
  <author>
    <name><![CDATA[Nadia Humbert-Labeaumaz]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ATDD et TDD double boucle]]></title>
    <link href="https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle/"/>
    <updated>2016-05-22T22:27:01+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/05/22/atdd-et-tdd-double-boucle</id>
    <content type="html"><![CDATA[<p>L'<em>Acceptance Test Driven Development</em> est une pratique qui consiste à écrire un test d'acceptation dès la définition de la fonctionnalité à implémenter. Ce test permet ensuite de valider que l'implémentation de la fonctionnalité est terminée. En général, plusieurs composants unitaires sont nécessaires pour implémenter une fonctionnalité. Ces composants peuvent être développés en TDD dans une deuxième boucle de <em>feedback</em>.</p>

<p>L'objectif de cet article est de présenter l'ATDD et comment le mettre en pratique grâce à du TDD double boucle.</p>

<!-- more -->


<h2>ATDD</h2>

<p>L'ATDD encourage fortement la collaboration entre les développeurs et le métier afin d'écrire des tests d'acceptation précis et pertinents. Pour optimiser l'échange, ces tests peuvent être écrits avec un vocabulaire partagé et bien défini. Ils peuvent également suivre le pattern <em>Given</em> / <em>When</em> / <em>Then</em> comme dans l'exemple suivant :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Given
</span><span class='line'>Un client dépose 1000 euros sur son compte le 17/12/2015
</span><span class='line'>Et il dépose 500 euros sur son compte le 18/12/2015
</span><span class='line'>Et il retire 1500 euros de son compte le 19/12/2015
</span><span class='line'>
</span><span class='line'># When
</span><span class='line'>Le client demande à imprimer son relevé de compte
</span><span class='line'>
</span><span class='line'># Then
</span><span class='line'>Le relevé imprimé doit être égal à
</span><span class='line'>   date | credit | debit | balance
</span><span class='line'>   19/12/2015 | | 1500.00 | 0.00
</span><span class='line'>   18/12/2015 | 500.00 | | 1500.00
</span><span class='line'>   17/12/2015 | 1000.00 | | 1000.00</span></code></pre></td></tr></table></div></figure>


<p>Pour implémenter la fonctionnalité, le développeur se sert de ce test d'acceptation et le traduit sous forme de code pour le rendre exécutable. Le test d'acceptation précédent peut être écrit en Java de la manière qui suit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_print_statement</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="n">Account</span> <span class="n">account</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Account</span><span class="o">();</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="k">new</span> <span class="nf">BigDecimal</span><span class="o">(</span><span class="s">&quot;1000&quot;</span><span class="o">),</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2015</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">DECEMBER</span><span class="o">,</span> <span class="mi">17</span><span class="o">));</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="k">new</span> <span class="nf">BigDecimal</span><span class="o">(</span><span class="s">&quot;500&quot;</span><span class="o">),</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2015</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">DECEMBER</span><span class="o">,</span> <span class="mi">18</span><span class="o">));</span>
</span><span class='line'>    <span class="n">account</span><span class="o">.</span><span class="na">withdraw</span><span class="o">(</span><span class="k">new</span> <span class="nf">BigDecimal</span><span class="o">(</span><span class="s">&quot;1500&quot;</span><span class="o">),</span> <span class="n">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2015</span><span class="o">,</span> <span class="n">Month</span><span class="o">.</span><span class="na">DECEMBER</span><span class="o">,</span> <span class="mi">19</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">statement</span> <span class="o">=</span> <span class="n">account</span><span class="o">.</span><span class="na">printStatement</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">statement</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span>
</span><span class='line'>            <span class="s">&quot;date | credit | debit | balance\n&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;19/12/2015 | | 1500.00 | 0.00\n&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;18/12/2015 | 500.00 | | 1500.00\n&quot;</span> <span class="o">+</span>
</span><span class='line'>            <span class="s">&quot;17/12/2015 | 1000.00 | | 1000.00&quot;</span>
</span><span class='line'>    <span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce test sera rouge tant que la fonctionnalité ne sera pas implémentée entièrement. Il servira de fil conducteur lors des développements.</p>

<h2>TDD double boucle</h2>

<p>La classe <code>Account</code> sert de point d'entrée à la fonctionnalité. Cependant, elle ne sera pas suffisante pour l'implémenter complètement. Le TDD double boucle consiste à développer la classe <code>Account</code> ainsi que ses dépendances en TDD, formant ainsi une boucle de <em>feedback</em> à l'intérieur de celle déjà formée par le test d'acceptation.</p>

<p><img class="center" src="https://nphumbert.github.io/images/double_loop_tdd.png"></p>

<p>Dans l'exemple présenté ci-dessus, il est possible de déléguer l'impression d'un relevé à une classe <code>Statement</code> qui est une dépendance de <code>Account</code>. Lors de l'écriture du test de <code>Account</code>, cette classe sera mockée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_print_statement</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="n">Statement</span> <span class="n">statement</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">Statement</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">statement</span><span class="o">.</span><span class="na">print</span><span class="o">()).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;printed statement&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Account</span> <span class="n">account</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Account</span><span class="o">(</span><span class="n">statement</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">printedStatement</span> <span class="o">=</span> <span class="n">account</span><span class="o">.</span><span class="na">printStatement</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">printedStatement</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">&quot;printed statement&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>De la même manière, la classe <code>Statement</code> sera développée en TDD en mockant sa dépendance vers <code>Transaction</code>, qui sera chargée d'imprimer une ligne du relevé. Finalement, cette classe <code>Transaction</code> sera implémentée en TDD.
Ainsi, le test d'acceptation passera au vert, ce qui indique que la fonctionnalité correspondante est terminée.</p>

<h2>Conclusion</h2>

<p>L'ATDD encourage la collaboration métier / développeur à travers la définition précise de tests d'acceptation qui permettent de valider les fonctionnalités. Ces dernières peuvent être implémentées en utilisant du TDD double boucle.</p>

<p>Vous trouverez une mise en pratique du TDD double boucle dans la vidéo <a href="https://www.youtube.com/watch?v=Qe84jbwyZ3U">Crafties #7</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Découverte de Kotlin par la pratique]]></title>
    <link href="https://nphumbert.github.io/blog/2016/05/08/decouverte-de-kotlin-par-la-pratique/"/>
    <updated>2016-05-08T14:58:45+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/05/08/decouverte-de-kotlin-par-la-pratique</id>
    <content type="html"><![CDATA[<p>Kotlin est un langage de programmation créé par JetBrains. Il est exécuté sur la JVM et est 100% interopérable avec Java 1.6+.
J'ai découvert récemment ce langage et j'ai réalisé un ensemble de katas pour le pratiquer.
Le code source de ces katas est disponible sur GitHub :</p>

<ul>
<li><a href="https://github.com/nphumbert/kata-prime-factors">Prime factors</a></li>
<li><a href="https://github.com/nphumbert/kata-string-calculator">String calculator</a></li>
<li><a href="https://github.com/nphumbert/kata-game-of-life">Game of life</a></li>
<li><a href="https://github.com/nphumbert/kata-mars-rover">Mars rover</a></li>
</ul>


<p>Dans cet article, je vais présenter des particularités de Kotlin que j'ai pu rencontrer.</p>

<!-- more -->


<h2>Généralités</h2>

<p>En Kotlin, un fichier peut contenir plusieurs classes et des fonctions. Ces fonctions peuvent exister en dehors d'une classe.
Un exemple de classe est donné ci-dessous :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">data</span> <span class="k">class</span> <span class="nc">Dimension</span><span class="p">(</span><span class="k">val</span> <span class="py">width</span><span class="p">:</span> <span class="n">Int</span><span class="p">,</span> <span class="k">val</span> <span class="py">height</span><span class="p">:</span> <span class="n">Int</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le constructeur est défini dans la déclaration de la classe. Le mot clé <code>val</code> signifie que le champ est en lecture seule. Il faudrait utiliser <code>var</code> pour indiquer qu'il est modifiable. De plus, des getters sont implicitement générés pour tous les champs qui ne sont pas <code>private</code> ainsi que des setters pour les champs qui ne sont pas en lecture seule. Par ailleurs, le mot clé <code>data</code> permet de créer automatiquement les méthodes <code>toString</code>, <code>equals</code>, <code>hashCode</code> et <code>clone</code>.</p>

<h2>Gestion des null</h2>

<p>Par défaut, les variables ne peuvent pas être nulles. Pour indiquer qu'une variable peut être nulle, il faut ajouter un <code>?</code> à la fin du type. Par exemple, <code>val position: Position?</code>. Le fait d'appeler une méthode sur une variable qui peut être nulle génère une erreur de compilation si ce n'est pas géré explicitement.</p>

<p>Dans le code suivant, <code>moves</code> est une <code>Map</code> dont une valeur est récupérée à partir d'une clé. Ceci peut retourner une valeur nulle si elle ne contient pas cette clé. S'il est certain que la clé existe dans la <code>Map</code>, il faut forcer l'appel avec <code>!!</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">apply</span><span class="p">(</span><span class="n">position</span><span class="p">:</span> <span class="n">Position</span><span class="p">):</span> <span class="n">Position</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">moves</span><span class="p">[</span><span class="n">position</span><span class="p">.</span><span class="n">orientation</span><span class="p">]</span><span class="o">!!</span><span class="p">.</span><span class="n">invoke</span><span class="p">(</span><span class="n">position</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>S'il n'est pas certain que la clé existe dans la <code>Map</code>, il est possible d'utiliser <code>?</code> pour appeler la méthode <code>invoke</code> sans risque d'exception. En effet, si la valeur est nulle, la méthode ne sera pas appelée et le résultat sera <code>null</code>. Le code deviendrait donc le suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">override</span> <span class="k">fun</span> <span class="nf">apply</span><span class="p">(</span><span class="n">position</span><span class="p">:</span> <span class="n">Position</span><span class="p">):</span> <span class="n">Position</span><span class="p">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">moves</span><span class="p">[</span><span class="n">position</span><span class="p">.</span><span class="n">orientation</span><span class="p">]</span><span class="o">?.</span><span class="n">invoke</span><span class="p">(</span><span class="n">position</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette gestion des <code>null</code> permet d'éviter les contrôles de nullité dispersés dans tout le code. De plus, elle permet de rendre très explicite les endroits où une variable peut être nulle. Finalement, tout ceci est vérifié par le compilateur, ce qui permet d'éviter les oublis.</p>

<h2>Valeurs par défaut</h2>

<p>Kotlin permet de donner aux paramètres des fonctions une valeur par défaut. Cette valeur est celle utilisée si le paramètre n'est pas fourni lors de l'appel de la fonction. La syntaxe pour mettre une valeur par défaut est décrite ci-après :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">add</span><span class="p">(</span><span class="n">numbers</span><span class="p">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">separator</span><span class="p">:</span> <span class="n">Char</span> <span class="p">=</span> <span class="sc">&#39;,&#39;</span><span class="p">):</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">numbers</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">separator</span><span class="p">).</span><span class="n">map</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">toInt</span><span class="p">()</span> <span class="p">}.</span><span class="n">sum</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette fonction peut donc être appelée de deux manières différentes :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">add</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">joinToString</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">))</span>
</span><span class='line'><span class="n">add</span><span class="p">(</span><span class="n">numbers</span><span class="p">.</span><span class="n">joinToString</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">),</span> <span class="sc">&#39;,&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce mécanisme permet de modifier du code existant, pour le rendre paramétrable par exemple, sans devoir changer le code client déjà existant ni devoir créer une nouvelle fonction qui se fera déléguer son traitement.</p>

<h2>Streams</h2>

<p>L'équivalent des <code>Streams</code> Java 8 sont gérés nativement par les classes Kotlin (même avec un JDK 1.6 !). Il est donc directement possible d'appeler des méthodes comme <code>filter</code>, <code>map</code> ou <code>reduce</code> sur des collections. Par exemple, dans le jeu de la vie, pour compter toutes les cellules vivantes parmi les cellules voisines, il est possible de faire ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">numberOfLiveNeighbours</span><span class="p">(</span><span class="n">position</span><span class="p">:</span> <span class="n">Position</span><span class="p">):</span> <span class="n">Int</span> <span class="p">=</span>
</span><span class='line'>                      <span class="n">position</span><span class="p">.</span><span class="n">neighbours</span><span class="p">().</span><span class="n">filter</span> <span class="p">{</span> <span class="k">get</span><span class="p">(</span><span class="n">it</span><span class="p">).</span><span class="n">alive</span> <span class="p">}.</span><span class="n">count</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Par ailleurs, d'autres méthodes plus spécifiques sont disponibles selon le type de collection. Par exemple, sur une
<code>Map</code>, il est possible d'appliquer des filtres seulement sur les valeurs grâce à la méthode <code>filterValues</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">toString</span><span class="p">(</span><span class="n">orientation</span><span class="p">:</span> <span class="n">Orientation</span><span class="p">):</span> <span class="n">String</span> <span class="p">=</span>
</span><span class='line'>                      <span class="n">orientations</span><span class="p">.</span><span class="n">filterValues</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="n">equals</span><span class="p">(</span><span class="n">orientation</span><span class="p">)</span> <span class="p">}.</span><span class="n">keys</span><span class="p">.</span><span class="n">first</span><span class="p">().</span><span class="n">toString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le grand nombre de méthodes de ce genre facilite la programmation fonctionnelle et rend le code plus clair et expressif. De plus, le fait que Kotlin soit intéropérable avec Java permet d'introduire des morceaux de code fonctionnel dans une base de code Java 6 ou 7.</p>

<h2>Fonctions d'extension</h2>

<p>Soit le code Kotlin suivant extrait du kata des facteurs premiers :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">primes</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">remains</span> <span class="p">%</span> <span class="n">it</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">factors</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>        <span class="n">remains</span> <span class="p">/=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La boucle ci-dessus continue tant que <code>remains</code> est un multiple du nombre premier courant. Il serait possible de rendre le code plus expressif de la manière suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="n">primes</span><span class="p">.</span><span class="n">forEach</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">remains</span><span class="p">.</span><span class="n">isMultipleOf</span><span class="p">(</span><span class="n">it</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">factors</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
</span><span class='line'>        <span class="n">remains</span> <span class="p">/=</span> <span class="n">it</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le problème est que <code>remains</code> est un <code>Int</code> et que cette classe ne contient pas la méthode <code>isMultipleOf</code> par défaut. Cependant, il est possible de l'ajouter grâce à une fonction d'extension. il s'agit de créer une fonction et de l'ajouter à une classe de manière externe :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">fun</span> <span class="nf">Int</span><span class="p">.</span><span class="n">isMultipleOf</span><span class="p">(</span><span class="n">number</span><span class="p">:</span> <span class="n">Int</span><span class="p">):</span> <span class="n">Boolean</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">mod</span><span class="p">(</span><span class="n">number</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Les fonctions d'extension sont très pratiques pour enrichir des objets, sans devoir modifier leur classe. De plus, ces extensions peuvent être restreintes à un certain contexte (une classe, un package, etc.).</p>

<h2>La déstructuration</h2>

<p>Lorsque l'on souhaite extraire des objets depuis un tableau ou une liste, il est possible de s'affranchir de l'utilisation explicite des index en utilisant la déstructuration :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="err">(</span><span class="py">gridDimensionInput</span><span class="p">,</span> <span class="n">initialPositionInput</span><span class="p">,</span> <span class="n">pathInput</span><span class="p">)</span> <span class="p">=</span> <span class="n">input</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans l'exemple ci-dessus, l'input va être découpée par ligne. La première ligne sera stockée dans <code>gridDimensionInput</code>, la seconde dans <code>initialPositionInput</code> et la troisième dans <code>pathInput</code>.</p>

<p>Ceci est également possible avec une <code>data class</code> de la façon suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">position</span> <span class="p">=</span> <span class="n">Position</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="n">Orientation</span><span class="p">.</span><span class="n">NORTH</span><span class="p">)</span>
</span><span class='line'><span class="k">val</span> <span class="err">(</span><span class="py">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">orientation</span><span class="p">)</span> <span class="p">=</span> <span class="n">position</span>
</span></code></pre></td></tr></table></div></figure>


<p>La déstructuration permet de simplifier l'extraction de données depuis un objet qui la supporte sans devoir créer des variables intermédiaires qui ne serviront plus ensuite.</p>

<h2>Création de type implicite</h2>

<p>Quand un champ, un paramètre ou une variable doit être une fonction, sa signature peut être spécifiée lors de sa déclaration. Dans le kata Mars rover, une <code>Map</code> est utilisée pour associer à une orientation particulière du rover, une fonction qui va le faire avancer. Cette fonction doit prendre en paramètre une position et doit retourner la nouvelle position :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='kotlin'><span class='line'><span class="k">val</span> <span class="py">moves</span> <span class="p">=</span> <span class="n">HashMap</span><span class="p">&lt;</span><span class="n">Orientation</span><span class="p">,</span> <span class="p">(</span><span class="n">Position</span><span class="p">)</span> <span class="p">-&gt;</span> <span class="n">Position</span><span class="p">&gt;()</span>
</span><span class='line'><span class="n">moves</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">Orientation</span><span class="p">.</span><span class="n">NORTH</span><span class="p">,</span> <span class="p">{</span> <span class="n">Position</span><span class="p">(</span><span class="n">it</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">it</span><span class="p">.</span><span class="n">y</span><span class="p">.</span><span class="n">plus</span><span class="p">(</span><span class="m">1</span><span class="p">),</span> <span class="n">it</span><span class="p">.</span><span class="n">orientation</span><span class="p">)</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette manière de déclarer les types donne une très grande liberté sur la forme souhaitée pour le type. En effet, il n'est pas nécessaire de créer un type explicitement pour l'utiliser.</p>

<h2>Conclusion</h2>

<p>Kotlin est un langage avec des opinions fortes. Je trouve que ceci le rend clair et très agréable à utiliser. Il force à se poser les bonnes questions au bon moment, pour la gestion des null par exemple. Ces questions étant résolues au moment approprié, il y a moins de soucis à se faire le reste du temps. De plus, ce langage est simple à écrire et à lire car il est peu verbeux et offre une grande expressivité. Par ailleurs, son intéropérabilité avec Java permet de l'introduire dans des bases de code existantes sans devoir les modifier.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polymorphisme avec le kata parrot refactoring]]></title>
    <link href="https://nphumbert.github.io/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring/"/>
    <updated>2016-04-20T16:26:03+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/04/20/polymorphisme-avec-le-kata-parrot-refactoring</id>
    <content type="html"><![CDATA[<p>Ce kata est tiré d'un exemple du livre &ldquo;Refactoring, Improving the Design of Existing Code&rdquo; de Martin Fowler, et a été créé par Emilie Bache.
L'exemple contient des signes de mauvais design et permet notamment de pratiquer le polymorphisme.<br/>
Dans cet article, une solution à ce kata sera développée. Le projet qui a servi de support se trouve sur <a href="https://github.com/nphumbert/kata-parrot-refactoring">GitHub</a> avec la solution respective.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Il s'agit d'un projet où l'on calcule la vitesse d'un perroquet en fonction de son origine. La classe <code>Parrot</code> initiale est la suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ParrotTypeEnum</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">numberOfCoconuts</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="n">voltage</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">boolean</span> <span class="n">isNailed</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Parrot</span><span class="o">(</span><span class="n">ParrotTypeEnum</span> <span class="n">_type</span><span class="o">,</span> <span class="kt">int</span> <span class="n">numberOfCoconuts</span><span class="o">,</span> <span class="kt">double</span> <span class="n">voltage</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isNailed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">_type</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">numberOfCoconuts</span> <span class="o">=</span> <span class="n">numberOfCoconuts</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">voltage</span> <span class="o">=</span> <span class="n">voltage</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">isNailed</span> <span class="o">=</span> <span class="n">isNailed</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">EUROPEAN:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nf">getBaseSpeed</span><span class="o">();</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">AFRICAN:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">getBaseSpeed</span><span class="o">()</span> <span class="o">-</span> <span class="n">getLoadFactor</span><span class="o">()</span> <span class="o">*</span> <span class="n">numberOfCoconuts</span><span class="o">);</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">NORWEGIAN_BLUE:</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">(</span><span class="n">isNailed</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">getBaseSpeed</span><span class="o">(</span><span class="n">voltage</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Should be unreachable&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getBaseSpeed</span><span class="o">(</span><span class="kt">double</span> <span class="n">voltage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="mf">24.0</span><span class="o">,</span> <span class="n">voltage</span> <span class="o">*</span> <span class="n">getBaseSpeed</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getLoadFactor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">9.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getBaseSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">12.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette classe utilise une structure conditionnelle dans la méthode <code>getSpeed</code> permettant de calculer la vitesse du perroquet. Ceci n'est pas convenable car il faudrait ajouter une nouvelle structure de ce type à chaque fois qu'un comportement dépend du type de perroquet. De plus, il faudrait ajouter une clause à chacune de ces structures dès qu'un nouveau type de perroquet est ajouté. Finalement, si la manière de calculer la vitesse d'un des types de perroquet changeait, il faudrait modifier cette classe. Cela implique que cette classe a plusieurs raisons de changer : elle ne respecte donc pas le <a href="https://www.youtube.com/watch?v=-mroBlWUBBM">Single Responsibility Principle</a>.</p>

<h2>Lecture des tests et début du refactoring</h2>

<p>Je commence par lire les tests existants. Je remarque qu'il y a des tests associés à chaque type de perroquet.
Je décide de commencer par traiter les cas concernant le perroquet européen. Il y a un seul test associé à ce perroquet :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">getSpeedOfEuropeanParrot</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Parrot</span> <span class="n">parrot</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Parrot</span><span class="o">(</span><span class="n">ParrotTypeEnum</span><span class="o">.</span><span class="na">EUROPEAN</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">parrot</span><span class="o">.</span><span class="na">getSpeed</span><span class="o">(),</span> <span class="mf">12.0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je lance le harnais de test pour m'assurer que tous les tests sont verts et que je pars donc d'une bonne base.</p>

<p>Je remplace dans ce test la classe <code>Parrot</code> par la classe fille <code>EuropeanParrot</code>. Le constructeur de cette nouvelle classe n'a aucun paramètre. En effet, les valeurs passées au constructeur de la classe mère sont toutes à des valeurs par défaut.<br/>
Comme il n'y a qu'un seul test associé à ce perroquet, il est déduit que la vitesse de ce perroquet n'est affectée par aucun paramètre externe. L'implémentation vient confirmer cette affirmation et qu'il ne s'agit pas d'un oubli de test.</p>

<p>Dans la nouvelle classe, j'appelle le contructeur de la classe mère et je surcharge la méthode <code>getSpeed</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EuropeanParrot</span> <span class="kd">extends</span> <span class="n">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">EuropeanParrot</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">ParrotTypeEnum</span><span class="o">.</span><span class="na">EUROPEAN</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">getBaseSpeed</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode <code>getBaseSpeed()</code> est toujours celle de la classe mère avec une nouvelle visibilité : <code>protected</code>. En effet, cette méthode est utilisée lors du calcul de la vitesse de tous les types de perroquet.</p>

<p>De plus, je remplace l'implémentation dans la classe mère par un déclenchement de l'exception <code>IllegalStateException</code>. Ainsi, je peux être certaine qu'il s'agit de la nouvelle implémentation qui est utilisée.</p>

<p>Je lance le harnais de test pour vérifier que mon refactoring n'a pas engendré de régression.</p>

<p>Finalement, je déplace mon test dans une nouvelle classe de test, associée à la nouvelle classe <code>EuropeanParrot</code>. J'en profite pour renommer le test avec un nom qui explicite le métier. Le nouveau test est le suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_have_speed_equal_to_base_speed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="n">Parrot</span> <span class="n">parrot</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">EuropeanParrot</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">speed</span> <span class="o">=</span> <span class="n">parrot</span><span class="o">.</span><span class="na">getSpeed</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="n">speed</span><span class="o">,</span> <span class="mf">12.0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Je relance les tests pour m'assurer qu'ils sont toujours verts.</p>

<h2>Extraction des perroquets dans des sous-classes</h2>

<p>Comme pour le perroquet européen, j'extrait les deux autres perroquets (africain et norvégien) dans des sous-classes. J'itère les mêmes opérations que précédemment.</p>

<p>J'ai pu constater que le facteur externe affectant la vitesse du perroquet africain est le nombre de noix de coco qu'il porte. Ce facteur n'affectant que ce type de perroquet, il est supprimé de la classe mère et déplacé dans cette classe spécifique.
La classe <code>AfricanParrot</code> est la suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AfricanParrot</span> <span class="kd">extends</span> <span class="n">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">numberOfCoconuts</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">AfricanParrot</span><span class="o">(</span><span class="kt">int</span> <span class="n">numberOfCoconuts</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">ParrotTypeEnum</span><span class="o">.</span><span class="na">AFRICAN</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">numberOfCoconuts</span> <span class="o">=</span> <span class="n">numberOfCoconuts</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">getBaseSpeed</span><span class="o">()</span> <span class="o">-</span> <span class="n">getLoadFactor</span><span class="o">()</span> <span class="o">*</span> <span class="n">numberOfCoconuts</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getLoadFactor</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">9.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>De même, les facteurs affectant la vitesse du perroquet norvégien sont le voltage et le fait d'avoir été abbatu. Ces facteurs n'affectant que ce type de perroquet, ils sont supprimés de la classe mère et utilisés dans cette classe fille. La classe <code>NorwegianParrot</code> est la suivante :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NorwegianParrot</span> <span class="kd">extends</span> <span class="n">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">isNailed</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">voltage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">NorwegianParrot</span><span class="o">(</span><span class="kt">double</span> <span class="n">voltage</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isNailed</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">ParrotTypeEnum</span><span class="o">.</span><span class="na">NORWEGIAN_BLUE</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">voltage</span> <span class="o">=</span> <span class="n">voltage</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">isNailed</span> <span class="o">=</span> <span class="n">isNailed</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">isNailed</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">getBaseSpeed</span><span class="o">(</span><span class="n">voltage</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">double</span> <span class="nf">getBaseSpeed</span><span class="o">(</span><span class="kt">double</span> <span class="n">voltage</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="mf">24.0</span><span class="o">,</span> <span class="n">voltage</span> <span class="o">*</span> <span class="n">getBaseSpeed</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Abstraction de la classe mère</h2>

<p>Après ces étapes d'extraction, la classe <code>Parrot</code> est comme suit :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ParrotTypeEnum</span> <span class="n">type</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">Parrot</span><span class="o">(</span><span class="n">ParrotTypeEnum</span> <span class="n">_type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">_type</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">type</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">EUROPEAN:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Should be overridden&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">AFRICAN:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Should be overridden&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">case</span> <span class="nl">NORWEGIAN_BLUE:</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Should be overridden&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;Should be unreachable&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">double</span> <span class="nf">getBaseSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">12.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode <code>getSpeed</code> n'étant plus utilisée, je la rends abstraite, ainsi que la classe.<br/>
Je relance le harnais de test pour vérifier qu'il n'y a pas eu de régression.</p>

<p>De plus, je supprime l'énumération <code>ParrotTypeEnum</code> portant sur le type de perroquet car elle n'a plus lieu d'être. Par conséquent, les appels du constructeur de la super classe dans les classes filles disparaissent également. Je relance les tests pour vérifier qu'ils passent encore.<br/>
La classe <code>Parrot</code> devient :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Parrot</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">double</span> <span class="nf">computeSpeed</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">double</span> <span class="nf">getBaseSpeed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">12.0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Ce kata permet de remplacer une structure conditionnelle par du polymorphisme. Chacune des classes n'a plus qu'une seule raison de changer. De plus, pour ajouter un nouveau type de perroquet, il suffit de créer une nouvelle classe qui hérite de la classe <code>Parrot</code>, sans avoir à modifier quoi que ce soit par ailleurs. Le code est donc plus SOLID.
Un autre exemple de ce type de refactoring a été développé sur une des vidéos de ma chaîne YouTube <a href="https://www.youtube.com/watch?v=sxQAULX96P0">Crafties</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Once upon a time TDD... and me]]></title>
    <link href="https://nphumbert.github.io/blog/2016/04/13/once-upon-a-time-tdd-and-me/"/>
    <updated>2016-04-13T23:56:11+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/04/13/once-upon-a-time-tdd-and-me</id>
    <content type="html"><![CDATA[<p>Once upon a time, there was a young woman that had plenty of projects and passions and was a bit hyperactive. She doesn&rsquo;t really enjoy talking about her life and asks herself very seriously how is she going to write this post.
Among her early age dreams were learning many things about science, especially biosciences, and about software engineering. She started with biosciences (by the way, they are extremely fascinating, nothing is more complex and well crafted than the human body) and then she decided to continue with software engineering. However, the software engineering program that she completed only lasted one year (6 months of classes and 6 months of internship). Of course, this was only a door to access the world that she wanted to discover so much.</p>

<!-- more -->


<p>Not having much knowledge nor experience in IT, she was (and she still is) looking for methods, tools and good practices that would allow her to progress and produce clean code. Among these tools there is TDD.</p>

<p>TDD is a development tool that preconizes to write the tests before the production code. It was invented by Kent Beck. And you know what ? It is truly deeply deligthful ;-) (this sentence was a lot better in French, by the way). In this article, I am going to talk about my personal experience with TDD: the beginnings, the pros and cons and some ideas to set it up.</p>

<h2>The beginnings</h2>

<p>At the beginning, I saw the theoretical interest of this tool and I was fascinated by the concept (I find it very clever). On the other hand, I thought that it made me work a bit slower and that it was a little complicated.
I tried it for the first time towards the end of my first year as a software developer and within a fairly complex project in terms of business, technologies and challenges. Needless to say that TDD was not the only thing that my small head had to process! As a consequence, I tried to use it when I was not overworked and as often as possible. Moreover, the large majority of developers of this big project did not use this tool. Thus, it was sometimes complicated to use TDD in this context but it was definitely out of the question to quit, I saw the potential of this tool and I knew that I had to persevere.</p>

<p>After this first year of experience in software development, during which I learned a lot, and a little experience in TDD, I decided to take time for some of my personal projects. And then, everything changed. Working on a project from scratch, with full latitude, I could use TDD more easily.</p>

<p>After a good night of sleep, I therefore started my own project with a test. It was so beautiful. At this very point, I understood a number of benefits that TDD can provide.</p>

<h2>Pros</h2>

<h3>Express the business rather than doing an implementation</h3>

<p>We focus on the business rather than on an implementation.</p>

<h3>Work unitarily and be more efficient</h3>

<p>We only do one thing at a time and thus are more efficient. Contrary to what I thought at the beginning, I quickly realized that TDD allows to go faster. Indeed, we don&rsquo;t ask ourselves twenty questions at a time, even existential ones to create the best design. I am not saying that we shouldn&rsquo;t think anymore. By the way, I think we should and that it has to always be part of our job as software developers. On the other hand, TDD allows to ask ourselves even more relevant and targeted questions, a feature at a time.</p>

<h3>Have a test harness</h3>

<p>By starting with tests, not only we are sure that we are going to have tests but also we know that they are going to be more relevant. Indeed, they cover real business needs.
This test harness permits to ensure that our code is protected and that, during refactoring or addition of new features, we are going to be able to detect regressions easily and quickly, unit testing being the least expensive in terms of implementation and allowing to have an extremely short feedback loop.</p>

<h3>Gain of confidence</h3>

<p>By using TDD, I know I develop exactly what I need to, which is not negligible! This allowed me to gain confidence in my developments.</p>

<h3>Avoid bad design</h3>

<p>TDD lets us know when our design is bad. Indeed, if we can&rsquo;t test our code base, it means that our design is no longer adapted or has never been. It is an alarm to encourage us to render it simpler and adapted to our needs of the current time. For example, if we have to mock and fix a behaviour to test another that depends on it but we can&rsquo;t, this probably means that our classes are strongly coupled. This can happen when we invoke a static method in a class, for instance. In this case, classes are strongly linked because we can&rsquo;t easily change the implementation of what is being used. However, classes should be strongly decoupled in order to make the system more maintainable (changeable and extensible by changing implementations easily).</p>

<p>Moreover, I could notice that the design that emerges by using TDD is rather simple. I think this is the result obtained by the overall benefits of TDD: focus on the business, perform one thing at a time and have more self-confidence result in the construction of a clean design.</p>

<h2>Cons</h2>

<p>Currently, I don&rsquo;t see any and I have trouble trying to imagine some. By the way, I am very surprised to see that TDD is regularly misunderstood. It is often seen as a waste of time but I confirmed that this is only a false impression. There is obviously an adjustment period and it may vary depending on the developer. Nevertheless, I think that TDD is a good investment and deserves to be implemented. But how can we set it up ?</p>

<h2>Set up</h2>

<p>It is never easy to try something new, but if we never challenged ourselves and if we never pushed our limits, we would miss many extraordinary things and we would get bored a lot too. I think that the way to set it up in a given project depends on its context, like for everything else in life, and we have to always adapt to it as good as possible. However, I will try to share some ideas on the subject here.</p>

<h3>Start with small goals</h3>

<p>To be ambitious is great but it is hard to climb to the top of the mount Everest, the first time, without stopping. In the same way, during the set up of TDD our goals should be measured and well defined from the beginning. It could be as simple as encouraging all the team members to use TDD sometimes in the week. This way, they can progressively get familiar with the tool.</p>

<h3>Do not rush or be discouraged</h3>

<p>From my personal experience, it is useless to want to assimilate the tool in two minutes and then judge whether it is suitable or not. Indeed, if everybody judged us in two minutes, they would have a perception of us not necessarily relevant nor complete. It is important to take the required time to know the tool, understand it and properly use it.</p>

<h3>Do not consider it as something outside developements</h3>

<p>Like refactoring, TDD should, in my opinion, be a part of our developments. So it should not be something that we should ask the permission for but an integral part of our developments. As a consequence, we must take into account the adjustment period in our potential estimations, hence the importance of having small goals at first. After the adaptation period, it is quite possible that the estimations lower : I think TDD makes you go faster, for the reasons mentioned above, and we will no longer have to take into account the adaptation time.</p>

<h3>Make it a team effort</h3>

<p>I do not think that designating some team members to test the tool is a good idea. The whole team should be equally involved in the process from the start. Otherwise, I think the chances to succeed diminish greatly. Indeed, if only a few members of the team are actually concerned by the tool, the others may lose interest on it. Furthermore, if the communication about the experience is not ideally done, the allocated time to it will be misused (the results may be null, some team members may be discouraged and those who had the &ldquo;official permission&rdquo; to test it may be disappointed). Finally, we risk to miss out on a good collaboration between coworkers and thus better results.</p>

<h3>Have good communication within the team</h3>

<p>Don&rsquo;t hesitate to often talk about it. Different perspectives will enrich the experience. Nevertheless, do not forget my advice n°2 : do not be discouraged!</p>

<h2>Conclusion</h2>

<p>TDD is a development tool that has a lot of advantages. It is not necessarily obvious to see them at first sight but you should not abandon the ship because the journey is really worth it! I hope you enjoyed this story and that it will be helpful to you. See you soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Il était une fois le TDD... et moi]]></title>
    <link href="https://nphumbert.github.io/blog/2016/04/13/il-etait-une-fois-le-tdd-et-moi/"/>
    <updated>2016-04-13T17:27:36+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/04/13/il-etait-une-fois-le-tdd-et-moi</id>
    <content type="html"><![CDATA[<p>Il était une fois une jeune fille pleine de projets, de passions et un chouilla hyperactive.<br/>
Elle n'aime pas particulièrement raconter sa vie et se demande donc fortement comment elle va réussir à faire cet article.<br/>
Parmi ses rêves de gosse se trouvaient d'apprendre plein de choses sur les sciences, notamment les biosciences, et sur l'informatique. Elle a donc démarré avec les biosciences (d'ailleurs c'est méga passionant, rien de plus complexe et de mieux architecturé que le corps humain) puis a décidé d'enchaîner avec l'informatique. Cependant, le cursus suivi en informatique n'a duré qu'un an (moitié cours, moitié stage). Evidemment, il ne s'agissait que d'une porte d'accès au monde qu'elle souhaitait tant découvrir.</p>

<!-- more -->


<p>N'ayant pas beaucoup de connaissances ni d'expériences en informatique, elle était (et elle est toujours) à la recherche de méthodes, d'outils et de bonnes pratiques qui lui permettraient de progresser et de produire du code propre. Parmi ces outils se trouve le TDD.</p>

<p>Le TDD est un outil de développement qui préconise l'écriture des tests avant le code de production. Il a été inventé par Kent Beck. Et vous savez quoi ? C'est un truc de dingue ;-)
Dans cet article, je vais vous parler de mon expérience personnelle concernant le TDD : les débuts, les avantages et inconvénients et quelques idées pour le mettre en place.</p>

<h2>Les débuts</h2>

<p>Au départ, je voyais l'intérêt théorique de cet outil et le concept me passionnait particulièrement (je trouve ça malin). Par contre, en pratique, je trouvais que ça me ralentissait un peu et que c'était un peu compliqué.<br/>
Je l'ai expérimenté pour la première fois vers la fin de ma première année de développement et au sein d'un projet assez complexe en termes de métier, de technologies et d'enjeux. Autant dire que je n'avais pas que le TDD à intégrer dans ma petite tête ! Du coup, j'essayais de le faire quand je n'étais pas débordée et le plus souvent possible. Par ailleurs, la grande majorité des développeurs de ce gros projet n'utilisaient pas cet outil. Il était donc parfois un peu dur de faire du TDD dans ce contexte mais il était hors de question d'abandonner, je voyais le potentiel de cet outil et je savais qu'il fallait persévéver.</p>

<p>Après cette première année d'expérience dans le développement, où j'ai énormément appris, et une petite expérience en TDD, j'ai décidé de dédier du temps à des projets personnels. Et là, tout a changé. Partant d'un projet de zéro, avec toutes les libertés possibles, je pouvais expérimenter encore plus facilement le TDD.</p>

<p>Après une bonne nuit de sommeil, j'ai donc commencé mon projet avec un test. C'était trop beau. A ce moment précis, j'ai compris un certain nombre d'avantages que le TDD peut nous apporter.</p>

<h2>Les avantages</h2>

<h3>Exprimer le besoin plutôt que de réaliser une implémentation</h3>

<p>On se concentre sur le besoin plutôt que sur une implémentation.</p>

<h3>Travailler unitairement et être plus efficace</h3>

<p>On ne fait qu'une chose à la fois donc on est plus efficace.
Contrairement à ce que je pensais au tout début, j'ai rapidement compris que le TDD permettait d'aller plus vite. En effet, on ne se pose pas vingt questions à la fois, voire des questions existentielles pour savoir comment construire le meilleur design. Je ne dis pas qu'il ne faut plus se poser de question. D'ailleurs, je pense qu'il le faut et que cela doit faire partie de notre métier de développeur. Par contre, le TDD permet de se poser des questions encore plus pertinentes et ciblées, sur une fonctionnalité à la fois.</p>

<h3>Disposer d'un harnais de test</h3>

<p>En commençant par les tests, non seulement on est certain d'en avoir mais on est sûr d'avoir des tests pertinents. En effet, ils couvrent de vrais besoins métiers.<br/>
Ce harnais de test permet d'assurer que notre code est protégé et que, lors de refactorings ou ajout de nouvelles fonctionnalités, on pourra facilement et rapidement détecter des régressions, les tests unitaires étant les moins coûteux en terme de réalisation et permettant d'avoir un feedback extrêmement rapide.</p>

<h3>Gagner en confiance</h3>

<p>En faisant du TDD, je sais que je développe ce qu'il faut exactement développer, ce qui n'est pas négligeable ! Ceci m'a permis de gagner en confiance dans mes développements.</p>

<h3>Faire émerger un design propre</h3>

<p>Le TDD permet de se rendre compte quand le design n'est pas correct. En effet, si on n'arrive pas à tester notre code, cela veut dire que notre design n'est plus adapté ou ne l'a jamais été. Il s'agit ainsi d'une alerte pour nous encourager à le rendre plus simple et adapté à notre besoin à un instant T. Par exemple, si on a besoin de mocker et de fixer un comportement pour en tester un autre qui en dépend et qu'on n'y arrive pas, cela veut peut-être dire que nos classes sont trop couplées. Ceci peut arriver quand on fait un appel statique dans une classe. Dans ce cas, les classes sont fortement liées car on ne peut pas changer l'implémentation de ce qui est utilisé. Or, les classes doivent être fortement découplées pour que le système soit plus maintenable (évolutif et extensible en changeant les implémentations facilement).</p>

<p>De plus, j'ai pu constater que le design qui émerge en utilisant du TDD est plutôt simple. Je pense qu'il s'agit du résultat obtenu par l'ensemble des avantages du TDD : se concentrer sur le besoin, réaliser une seule chose à la fois et avoir plus confiance en soi résultent en la construction d'un design propre.</p>

<h2>Les inconvénients</h2>

<p>Actuellement, j'en vois aucun et j'ai du mal à en imaginer.
D'ailleurs, je suis surprise de voir que le TDD est parfois mal perçu dans le monde du travail. Il est souvent vu comme étant une perte de temps mais j'ai pu confirmer qu'il s'agit d'une fausse impression. Il faut évidemment un temps d'adaptation et celui-ci peut varier en fonction des développeurs. Néanmoins, je pense que le TDD serait un bon investissement et mérite d'être mis en place. Oui, mais comment ?</p>

<h2>Mise en place</h2>

<p>Ce n'est jamais facile d'essayer quelque chose de nouveau, mais si on ne se remettait jamais en question et si on ne repoussait jamais nos limites, on passerait à côté de choses extraordinaires et on s'ennuierait beaucoup aussi.<br/>
Mais comment mettre en place cet outil dans une structure ? Je pense que, comme tout, cela dépend du contexte et il faut toujours s'adapter au mieux à celui-ci. Je vais néanmoins essayer de partager quelques idées à ce sujet.</p>

<h3>Commencer avec des petits objectifs</h3>

<p>Etre ambitieux c'est génial mais il est difficile d'arriver au sommet du Mont Blanc, dès la première fois, d'une traite. De la même manière, il faut que nos objectifs, lors de la mise en place du TDD, soient mesurés et bien définis dès le départ. Il pourrait s'agir, par exemple, d'encourager simplement tous les membres de l'équipe à faire du TDD quelques fois dans la semaine. Ainsi, ils peuvent se familiariser petit à petit avec l'outil.</p>

<h3>Ne pas se précipiter, ni se décourager</h3>

<p>D'après mon expérience personnelle, il ne sert à rien de vouloir intégrer l'outil en deux minutes et juger ensuite s'il est adapté ou pas. D'ailleurs, si tout le monde nous jugeait en deux minutes, on aurait certainement toujours une perception pas forcément pertinente ou incomplète de nous. Il est important de prendre le temps nécessaire pour connaître l'outil, le comprendre et bien l'utiliser.</p>

<h3>Ne pas le considérer comme quelque chose en dehors des développements</h3>

<p>Tout comme le refactoring, le TDD doit, selon moi, faire partie de nos développements. Il ne doit donc pas s'agir de quelque chose dont on doit demander la permission mais plus d'une étape intégrante de nos développements. Par conséquent, il faut prendre en compte le temps d'adaptation dans nos éventuels chiffrages, d'où l'importance d'avoir de petits objectifs au début. Une fois le temps d'adaptation passé, il est bien possible que les chiffrages baissent : je pense que le TDD permet d'aller plus vite, pour les raisons évoquées précédémment, et en plus on aura le temps d'adaptation en moins.</p>

<h3>En faire une affaire d'équipe</h3>

<p>Je ne pense pas qu'allouer seulement quelques membres d'une équipe pour tester l'outil soit une bonne idée. Il faut que tous soient concernés au même titre dès le départ. Sinon, je pense que les chances de réussite diminuent considérablement. En effet, si uniquement quelques personnes sont réellement concernées par l'outil, les autres risquent de s'y désintérésser. De plus, si la communication sur l'expérience ne se fait pas idéalement, le temps alloué à celle-ci sera mal utilisé (les résultats peuvent être nuls, certains membres de l'équipe peuvent être découragés et ceux qui ont testé peuvent être déçus). Finalement, on risque de passer à côté d'une belle collaboration entre collègues et donc de meilleurs résultats.</p>

<h3>Avoir une bonne communication au sein de l'équipe</h3>

<p>Il ne faut pas hésiter à en parler entre vous. Les différents points de vue vont enrichir l'expérience. Néanmoins, n'oubliez pas le conseil n°2 : ne vous découragez pas !</p>

<h1>Conclusion</h1>

<p>Le TDD est un outil de développement qui comporte énormément d'avantages. Il n'est pas forcément évident de les voir du premier coup mais il ne faut pas abandonner le navire car le voyage est vraiment superbe ! J'espère que vous avez apprécié cette histoire et qu'elle vous sera utile. A bientôt !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Story of Nano]]></title>
    <link href="https://nphumbert.github.io/blog/2016/03/30/the-story-of-nano/"/>
    <updated>2016-03-30T19:22:26+02:00</updated>
    <id>https://nphumbert.github.io/blog/2016/03/30/the-story-of-nano</id>
    <content type="html"><![CDATA[<p><a href="https://nano.litesln.com">Nano by LiteSln</a> is a free application that allows you to manage your invoices. It also permits you to manage a repository of your customers and products and to monitor your performance through statistics.</p>

<!-- more -->


<h2>Who can use it?</h2>

<p>Nano can be used by anyone who needs to manage invoices.</p>

<h2>Why Nano was created?</h2>

<p><a href="https://nano.litesln.com">Nano</a> was created in order to help Honduran entrepreneurs to adapt to the significant changes that have been made recently to the Honduran legislation.
Indeed, the Honduran law has been quite complexified over the past few years.
As a result, Honduran entrepreneurs are lost and do not know exactly all the changes that have been made to the legislation.
Therefore, many entrepreneurs don&rsquo;t have valid invoices and some of them saw their entreprises closed as a consequence.
Nano was then created to help them.</p>

<h2>How does it work?</h2>

<p>Through a mechanism of strategies, Nano has the ability to adapt to different contexts (legislation, type of company, etc.).
The main goal being to help Honduran entrepreneurs, a specific strategy has been created for Honduras.
There is also a standard strategy giving access to Nano&rsquo;s services to entrepreneurs all over the world.</p>

<h2>What are the main features of Nano?</h2>

<p>The main features of <a href="https://nano.litesln.com">Nano</a> are:</p>

<ul>
<li>Invoice creation and workflow</li>
<li>Customers and products repository management</li>
<li>Standard invoice template and numeration strategy</li>
<li>Honduran specific invoice template and numeration strategy</li>
<li>Unlimited number of customers, products and invoices</li>
<li>Statistics</li>
</ul>


<h2>How much does it cost?</h2>

<p>It is totally <strong>free</strong>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring Is Like Sleeping]]></title>
    <link href="https://nphumbert.github.io/blog/2016/03/10/refactoring-is-like-sleeping/"/>
    <updated>2016-03-10T15:12:42+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/03/10/refactoring-is-like-sleeping</id>
    <content type="html"><![CDATA[<p>Bob is a developer. Bob has been asked to add a brand new feature to the application. Bob would like to take this opportunity to refactor a little bit the code because it doesn&rsquo;t respect the good practices that he learnt from the last Software Craftsmanship meetup. Bob has been told that he couldn&rsquo;t refactor because there is currently not enough time to do it and because he needs to produce. Bob says to himself that there is never enough time anyways&hellip;</p>

<p>Sounds familiar? Indeed, refactoring is often seen as an activity without any value. Other things in life can also seem worthless. There is one that takes almost a third of our lives during which we do literally nothing: <em>sleeping</em>!</p>

<!-- more -->


<p>The number of things that we could do if we didn&rsquo;t sleep! However, after a few days, even hours, unpleasant events would eventually occur. Without sleep, the most trivial tasks can become very difficult to accomplish and weird mistakes can take place (like pouring orange juice into your bowl of cereal). After a while, sleep takes suddenly over, which can lead to accidents (because of drowsy driving, for example).</p>

<p>In the same way, postponing refactoring harms the project. Developments may take much longer than necessary and bugs may occur in features very apart from those that have been modified. Moreover, there is a moment where refactoring imposes itself unexpectedly: code can no longer be modified without risking important regressions. This can happen at a critical time of the project and thus jeopardize it. At this point, the feared verdict may be rendered: &ldquo;everything must be rewritten&rdquo;.</p>

<p>In general, regular refactoring is necessary to the good health of a project, just like sleeping every night is for ours. Thereafter, we are going to define refactoring in this context, when is it good to do it, how to prepare it properly and what to do if time is missing.</p>

<h2>What does refactoring mean?</h2>

<p>According to Michael Feathers, refactoring is &ldquo;the act of improving design without changing its behavior&rdquo;.</p>

<p>It is not necessarily about changing a whole class hierarchy or about implementing a complex design pattern but it could be as simple as renaming a variable, method or class, extracting a private method in an external class, gathering the attributes of a method into an object, etc.</p>

<p>Furthermore, we also consider that adding tests to an existing code base is refactoring. Indeed, a testable code is a first step towards a better design.</p>

<h2>When to refactor?</h2>

<p>The idea is not to try to fix the entire system every time. This would be unproductive and impossible to carry out. Also, it would be difficult to justify causing regressions in a portion of code too unrelated to the one that was supposed to be changed.</p>

<p>Refactoring is very efficient when it is targeted at the code that is related to the development of a feature. Moreover, it is preferable to refactor before adding new code in order to start on good bases.</p>

<h2>How to prepare it?</h2>

<p>The first thing to do before refactoring is to ensure that there are tests that cover the code that is going to be modified. Tests permit to verify that refactoring doesn&rsquo;t generate regression. If tests are missing, they need to be added before starting.</p>

<p>Sometimes it might be impossible to test a portion of code. In this case, you can perform the minimal refactoring required for implementing the tests.</p>

<h2>What to do if time is missing?</h2>

<p>If, like Bob, you lack the time, you must be pragmatic. It can be interesting to do small refactoring for each development. This allows to improve the design without consuming too much time and to prepare the ground for a larger refactoring.</p>

<h2>Conclusion</h2>

<p>Refactoring is essential in a project and should be done regularly. It allows to ensure that new features could be developed within a reasonable time and to limit regressions by improving the design. Furthermore, it allows developers to (re)take pleasure to make the product evolve.</p>

<p>We would like to conclude with the boy scout rule that tells us we should always leave the code in a better condition than when we found it. The application of this rule leads to improving the overall quality of the code and to the reversal of the technical debt.</p>

<hr />

<p><em>This article has been written in collaboration with Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Que faire lorsqu'une méthode privée veut être testée ?]]></title>
    <link href="https://nphumbert.github.io/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee/"/>
    <updated>2016-02-21T11:09:38+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/02/21/que-faire-lorsqu-une-methode-privee-veut-etre-testee</id>
    <content type="html"><![CDATA[<p>Les tests automatisés servent à vérifier le bon comportement d'un objet (ou d'un ensemble d'objets), indépendamment de la manière dont ce comportement est implémenté. Le comportement d'un objet est décrit par son API publique (constructeurs, constantes et méthodes publiques). Les tests ne devraient donc utiliser que cette API.</p>

<p>Les méthodes privées (et <em>protected</em>) ne faisant pas partie de l'API publique d'un objet, elles ne devraient pas être appelées directement par le code de test.</p>

<p>Cet article a pour objectif de montrer comment réagir lorsqu'il paraît nécessaire de tester une méthode privée.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Un projet d'illustration a été créé afin de servir de support pour cet article. Il est disponible sur <a href="https://github.com/nphumbert/demo-private-method-test/">GitHub</a>.</p>

<p>Il s'agit de hasher le mot de passe lors de la création d'un utilisateur. Il faut imaginer que la méthode de hash est plus complexe (utilisation de librairies externes, de nombreuses conditions, etc.) pour donner tout son sens à la suite de l'article.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">login</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">login</span> <span class="o">=</span> <span class="n">login</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">hash</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">MessageDigest</span> <span class="n">md</span> <span class="o">=</span> <span class="n">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;SHA-256&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">md</span><span class="o">.</span><span class="na">digest</span><span class="o">(</span><span class="n">password</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">)));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="o">|</span> <span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode de hash étant considérée comme complexe, le besoin se fait sentir de tester son code en isolation. En effet, en partant de cette hypothèse, il n'est pas facilement possible de le tester complètement en utilisant uniquement des appels à l'API publique.</p>

<h2>Eviter la réflexion</h2>

<p>Parfois, la réflexion est utilisée pour augmenter la visibilité de la méthode privée durant la durée d'un test. Cette méthode peut alors être appelée directement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_hash_password</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">NoSuchMethodException</span><span class="o">,</span> <span class="n">InvocationTargetException</span><span class="o">,</span> <span class="n">IllegalAccessException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;jdoe&quot;</span><span class="o">,</span> <span class="s">&quot;john.doe@gmail.com&quot;</span><span class="o">,</span> <span class="s">&quot;secret&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&quot;hash&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">method</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">hashedPassword</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="s">&quot;secret&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">hashedPassword</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;[43, -72, 13, 83, 123, 29, -93, -29, -117, -45, 3, 97, -86, -123, 86, -122, -67, -32, -22, -51, 113, 98, -2, -10, -94, 95, -23, 123, -11, 39, -94, 91]&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Utiliser la réflexion dans ce cadre est dangereux !</p>

<p>En effet, toutes les actions ci-dessous auront pour effet de faire échouer le test, sans empêcher celui-ci de compiler :</p>

<ul>
<li>Renommer la méthode <code>hash</code>.</li>
<li>Changer l'ordre ou le type des attributs de la méthode <code>hash</code>.</li>
<li>Changer le type de retour de la méthode <code>hash</code>.</li>
<li>Supprimer la méthode <code>hash</code> en intégrant son code dans une autre méthode (ou dans le constructeur).</li>
</ul>


<p>Toutes ces actions sont des décisions d'implémentation qui n'ont aucun lien avec le comportement de la classe. Il n'est donc pas normal qu'un test échoue lorsque l'une de ces actions est effectuée.</p>

<p>Par ailleurs, l'API de réflexion Java manipulant des <code>String</code> et des <code>Object</code>, l'IDE n'est pas capable d'aider à corriger automatiquement le code de test correspondant.</p>

<h2>Déplacer le code dans une dépendance externe</h2>

<p>Selon moi, la meilleure manière de réagir est d'extraire le code, qui doit être testé, dans sa propre classe.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HashProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sha256HashProvider</span> <span class="kd">implements</span> <span class="n">HashProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">MessageDigest</span> <span class="n">md</span> <span class="o">=</span> <span class="n">MessageDigest</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="s">&quot;SHA-256&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">md</span><span class="o">.</span><span class="na">digest</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&quot;UTF-8&quot;</span><span class="o">)));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoSuchAlgorithmException</span> <span class="o">|</span> <span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La classe <code>User</code> de l'exemple est alors transformée comme ci-dessous.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">login</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="n">String</span> <span class="n">login</span><span class="o">,</span> <span class="n">String</span> <span class="n">email</span><span class="o">,</span> <span class="n">String</span> <span class="n">password</span><span class="o">,</span> <span class="n">HashProvider</span> <span class="n">hashProvider</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">login</span> <span class="o">=</span> <span class="n">login</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">hashProvider</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">password</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Par ailleurs, le test se trouve également modifié.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_hash_password_when_create_user</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// given</span>
</span><span class='line'>    <span class="n">HashProvider</span> <span class="n">hashProvider</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">HashProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="n">when</span><span class="o">(</span><span class="n">hashProvider</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="s">&quot;secret&quot;</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;hash&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// when</span>
</span><span class='line'>    <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="s">&quot;jdoe&quot;</span><span class="o">,</span> <span class="s">&quot;john.doe@gmail.com&quot;</span><span class="o">,</span> <span class="s">&quot;secret&quot;</span><span class="o">,</span> <span class="n">hashProvider</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// then</span>
</span><span class='line'>    <span class="n">assertThat</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">password</span><span class="o">(),</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;hash&quot;</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le code respecte désormais le <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"><em>Single Responsibility Principle</em> (SRP)</a>. En effet, chaque classe ne fait qu'une seule chose. Il n'est donc, par exemple, plus nécessaire de modifier la classe <code>User</code> pour changer la logique de hashage.</p>

<p>Le <a href="https://en.wikipedia.org/wiki/Open/closed_principle"><em>Open/Closed Principle</em> (OCP)</a> est aussi mis en application car la classe <code>User</code> ne se préoccupe pas de l'implémentation de <code>HashProvider</code> qu'elle utilise. Il est donc possible de la changer sans que le code de <code>User</code> en soit affecté.</p>

<p>Tout le code est complètement testé en utilisant seulement les API publiques. Cela signifie que seul le comportement est testé, et non plus l'implémentation.</p>

<p>Finalement, le code de production ainsi que celui de test est simplifié.</p>

<h2>Conclusion</h2>

<p>Lorsqu'une méthode privée devient si complexe que le besoin de la tester en isolation se fait sentir, cela signifie que la classe fait trop de choses et que le SRP n'est sûrement pas respecté. Extraire cette méthode dans une classe externe permet de tester complètement ce code tout en améliorant le design en rendant le code plus SOLID.</p>

<p>Dès qu'une méthode privée est créée afin d'effectuer un traitement, il peut être utile de se demander si elle ne devrait pas être extraite, tout en restant pragmatique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactorer, c'est comme dormir]]></title>
    <link href="https://nphumbert.github.io/blog/2016/01/31/refactorer-c-est-comme-dormir/"/>
    <updated>2016-01-31T19:16:09+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/01/31/refactorer-c-est-comme-dormir</id>
    <content type="html"><![CDATA[<p>Robert est un développeur. On a demandé à Robert d'ajouter une nouvelle fonctionnalité à l'application. Robert aimerait bien en profiter pour refactorer un peu le code car il ne respecte pas les bonnes pratiques qu'il a pu voir lors du dernier meetup Software Craftsmanship. On dit alors à Robert qu'il ne peut pas refactorer car, en ce moment, il n'y a pas le temps pour ça et qu'il doit produire. Robert se dit qu'il n'y a de toutes façons jamais le temps&hellip;</p>

<p>Cette histoire vous semble familière ? En effet, le refactoring est souvent perçu comme n'apportant aucune valeur. D'autres choses dans la vie peuvent sembler n'apporter aucune valeur. Il y en a notamment une qui prend près du tiers de la vie d'une personne pendant laquelle cette personne ne fait littéralement rien : <em>dormir</em> !</p>

<!-- more -->


<p>Le nombre de choses que l'on pourrait faire si l'on ne dormait pas ! Cependant, au bout de quelques jours, voire quelques heures, des événements désagréables finiraient par survenir. Sans sommeil, la moindre des tâches peut devenir très longue à effectuer et des erreurs étranges peuvent arriver (comme verser du jus d'orange dans son bol de céréales). Après un certain temps, le sommeil prend le dessus de manière incontrôlée, ce qui peut conduire à des accidents (à cause d'une somnolence au volant par exemple).</p>

<p>De manière similaire, repousser le refactoring nuit au projet. Les développements peuvent prendre beaucoup plus de temps que nécessaire et des bugs peuvent survenir sur des fonctionnalités très éloignées de celles qui sont modifiées. De plus, il arrive un moment où le refactoring s'impose : le code ne peut plus être modifié sans risquer d'importantes régressions. Ceci peut se produire à un moment critique du projet et donc le mettre en péril. A ce moment là, la sentence tant redoutée peut tomber : « il faut tout réécrire ».</p>

<p>De manière globale, refactorer régulièrement est nécessaire à la bonne santé du projet, tout comme dormir chaque nuit l'est pour la notre. Dans la suite de cet article, nous allons définir ce que signifie refactorer dans ce contexte, quand est-il bon de le faire, comment bien le préparer et que faire si le temps manque.</p>

<h2>Que signifie refactorer ?</h2>

<p>Selon Michael Feathers, le refactoring est l'acte d'améliorer le <em>design</em> du code sans changer son comportement.</p>

<p>Il ne s'agit pas forcément de changer toute une hiérarchie de classes ou de mettre en place un <em>design pattern</em> très complexe mais cela peut être aussi simple que de renommer une variable, une méthode, une classe, d'extraire une méthode privée dans une classe externe, de regrouper les attributs d'une méthode dans un objet, etc.</p>

<p>De plus, nous considérons aussi qu'ajouter des tests à du code existant est du refactoring. En effet, un code testable est un premier pas vers un meilleur <em>design</em>.</p>

<h2>Quand faut-il refactorer ?</h2>

<p>L'idée n'est pas d'essayer de corriger l'intégralité du système à chaque fois. Ceci serait contre productif et impossible à mettre en place. De plus, il serait très difficilement justifiable de provoquer des régressions dans une partie du code très éloignée de celle qui est censée être modifiée.</p>

<p>Le refactoring est très efficace lorsqu'il est ciblé sur le code qui est concerné par le développement d'une fonctionnalité. De plus, il nous semble préférable de refactorer avant d'ajouter du nouveau code afin de démarrer sur des bases saines.</p>

<h2>Comment le préparer ?</h2>

<p>La première chose à faire avant de refactorer est de s'assurer qu'il y a des tests en place. Ces tests permettent de vérifier que le refactoring ne génère pas de régression. Si ces tests ne sont pas déjà en place, il faut les ajouter avant de commencer.</p>

<p>Il peut arriver qu'il soit impossible de tester une portion de code. Dans ce cas, il faut effectuer le refactoring minimum nécessaire à la mise en place des tests.</p>

<h2>Que faire si le temps manque ?</h2>

<p>Si, comme Robert, le temps vous manque, il faut faire preuve de pragmatisme. Il peut être intéressant d'effectuer de petits refactoing à chaque développement. Cela permet d'améliorer le <em>design</em> sans consommer trop de temps et de préparer le terrain pour de plus gros refactoring.</p>

<h2>Conclusion</h2>

<p>Le refactoring est essentiel dans un projet et doit être effectué régulièrement. Il permet d'assurer que les nouvelles fonctionnalités pourront être développées dans un temps raisonnable et de limiter les régressions en améliorant le <em>design</em>. Par ailleurs, il permet aussi aux développeurs de (re)prendre du plaisir à faire évoluer le produit.</p>

<p>Nous aimerions conclure avec la règle du boy scout qui indique que l'on doit toujours laisser le code dans un meilleur état que lorsqu'on l'a trouvé. L'application de cette règle conduit à l'amélioration de la qualité globale du code et à l'inversion de la dette technique.</p>

<hr />

<p><em>Cet article a été écrit en collaboration avec Renaud Humbert-Labeaumaz (<a href="https://www.twitter.com/rnowif">@rnowif</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pourquoi ne pas utiliser l'héritage pour éviter la duplication de code ?]]></title>
    <link href="https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code/"/>
    <updated>2016-01-24T11:38:41+01:00</updated>
    <id>https://nphumbert.github.io/blog/2016/01/24/heritage-duplication-code</id>
    <content type="html"><![CDATA[<p>L'héritage est une composante très importante des langages orientés objet tels que Java. Cependant, il doit être utilisé à bon escient afin de respecter les bonnes pratiques de programmation.</p>

<p>Il m'est arrivé de rencontrer des cas où l'héritage était utilisé afin de ne pas dupliquer du code. Le but de cet article est d'illustrer une telle utilisation, d'analyser ses inconvénients et de montrer une manière possible de la corriger.</p>

<!-- more -->


<h2>Contexte</h2>

<p>Un projet d'illustration a été créé afin de servir de support pour cet article. Il est disponible sur <a href="https://github.com/nphumbert/demo-inappropriate-inheritance">GitHub</a>. Ce projet contient deux branches :</p>

<ul>
<li><code>inappropriate-inheritance</code> : contient l'utilisation inappropriée de l'héritage.</li>
<li><code>dependency</code> : contient une proposition de correction en utilisant une dépendance.</li>
</ul>


<p>Il s'agit de deux <em>controllers</em> Spring MVC qui doivent hasher un texte. Dans le cas de l'utilisation inappropriée de l'héritage, le code d'un des <em>controllers</em> est le suivant :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProfileController</span> <span class="kd">extends</span> <span class="n">BaseController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/profile&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">profile</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;profile: &quot;</span> <span class="o">+</span> <span class="n">hash</span><span class="o">(</span><span class="s">&quot;profile&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce <em>controller</em> hérite d'une classe commune qui contient la méthode <code>hash</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseController</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// ...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pourquoi n'est-il pas correct d'utiliser l'héritage ici ?</h2>

<h3>Non respect de la programmation orientée objet (POO)</h3>

<p>Dans ce code, la mécanique de la POO est respectée mais pas sa sémantique. En effet, la classe <code>BaseController</code> n'a pas de raison d'être. Elle ne correspond à aucun concept et ne sert qu'à contenir du code partagé entre les <em>controllers</em>. Ce genre de classe possède souvent un nom flou et générique, ce qui est un signe que le concept associé est mal défini, voire inexistant.</p>

<h3>Difficulté à tester</h3>

<p>La capacité du code à être testé n'est pas une fin en soi. Cependant, un code difficile à tester est un <em>smell</em> qui indique le plus souvent un problème de conception.</p>

<p>Ici, il est obligatoire de passer par un <em>set up</em> assez lourd pour tester en isolation le <em>controller</em>. Une classe privée héritant du <em>controller</em> est créée afin de surcharger la méthode <code>hash</code> et de fixer la valeur de retour. Les tests portent donc sur cette classe au lieu de porter sur le <em>controller</em> initial.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringApplicationConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">InappropriateInheritanceApplication</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProfileControllerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">HASH</span> <span class="o">=</span> <span class="s">&quot;hash&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">class</span> <span class="nc">TestableProfileController</span> <span class="kd">extends</span> <span class="n">ProfileController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">protected</span> <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">HASH</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ProfileController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">TestableProfileController</span><span class="o">();</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">standaloneSetup</span><span class="o">(</span><span class="n">controller</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_get_hash_when_get_profile</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// when</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">contentAsString</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/profile&quot;</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">andReturn</span><span class="o">().</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getContentAsString</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// then</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">contentAsString</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;profile: &quot;</span> <span class="o">+</span> <span class="n">HASH</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La complexité du <em>set up</em> est bien trop importante par rapport au code à tester qui est relativement simple.</p>

<h3>Fort couplage</h3>

<p>L'héritage introduit un fort couplage entre les classes. En effet, tous les <em>controllers</em> doivent hériter de <code>BaseController</code> pour bénéficier de la méthode <code>hash</code>. Ceci implique qu'ils doivent avoir accès à cette classe (soit être dans le même projet, soit avoir une dépendance vers sa librairie).</p>

<p>De plus, l'héritage multiple étant interdit en Java, les <em>controllers</em> ne peuvent pas hériter d'une autre classe qui serait appropriée.</p>

<p>Finalement, si une autre classe avait besoin de la méthode <code>hash</code>, elle devrait forcément hériter de <code>BaseController</code> (ce qui n'a pas de sens s'il ne s'agit pas d'un <em>controller</em>) ou alors dupliquer le code. Ce problème met en évidence le fait que la notion de hashage n'a aucun rapport avec la notion de <em>controller</em>.</p>

<h3>Difficulté à maintenir</h3>

<p>Le couplage fort décrit précédemment rend le code difficile à maintenir. Un changement du besoin entraînerait une modification du code à un endroit où on ne s'y attend pas. Par ailleurs, il pourrait y avoir des effets de bord inattendus sur le reste du code.</p>

<h2>Comment peut-on corriger ce code ?</h2>

<p>La solution proposée pour corriger ce code est d'extraire la méthode de <code>hash</code> dans une dépendance qui sera injectée dans les <em>controllers</em>.</p>

<p>Tout d'abord, une interface <code>HashProvider</code> est créée et implémentée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">HashProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">text</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Component</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sha256HashProvider</span> <span class="kd">implements</span> <span class="n">HashProvider</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">hash</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette implémentation peut alors être injectée dans le <em>controller</em> afin d'être utilisée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RestController</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProfileController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">HashProvider</span> <span class="n">hashProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ProfileController</span><span class="o">(</span><span class="n">HashProvider</span> <span class="n">hashProvider</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">hashProvider</span> <span class="o">=</span> <span class="n">hashProvider</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/profile&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">profile</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;profile: &quot;</span> <span class="o">+</span> <span class="n">hashProvider</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="s">&quot;profile&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Le <em>set up</em> de test de ce <em>controller</em> s'en trouve simplifié car il n'y a plus qu'à <em>mocker</em> l'interface.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RunWith</span><span class="o">(</span><span class="n">SpringJUnit4ClassRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@SpringApplicationConfiguration</span><span class="o">(</span><span class="n">classes</span> <span class="o">=</span> <span class="n">InappropriateInheritanceApplication</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'><span class="nd">@WebAppConfiguration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProfileControllerTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">HashProvider</span> <span class="n">hashProvider</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">hashProvider</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">HashProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ProfileController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ProfileController</span><span class="o">(</span><span class="n">hashProvider</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">standaloneSetup</span><span class="o">(</span><span class="n">controller</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Test</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">should_get_hash_when_get_profile</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// given</span>
</span><span class='line'>        <span class="n">when</span><span class="o">(</span><span class="n">hashProvider</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="s">&quot;profile&quot;</span><span class="o">)).</span><span class="na">thenReturn</span><span class="o">(</span><span class="s">&quot;hash&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// when</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">contentAsString</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/profile&quot;</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">andReturn</span><span class="o">().</span><span class="na">getResponse</span><span class="o">().</span><span class="na">getContentAsString</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// then</span>
</span><span class='line'>        <span class="n">assertThat</span><span class="o">(</span><span class="n">contentAsString</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="s">&quot;profile: hash&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finalement, la logique de hashage est totalement découplée de celle du <em>controller</em>. Ceci rend le code plus simple à maintenir car si le besoin change, il suffit de modifier l'implémentation de <code>HashProvider</code> ou d'en ajouter une nouvelle. Ainsi, le comportement du <em>controller</em> est modifié sans que son code ne change.</p>

<h2>Conclusion</h2>

<p>Il est nécessaire de faire attention à ne pas abuser de l'héritage. Dans cet article, il a été montré qu'il n'est pas approprié pour éviter la duplication de code. Dans ce cas, il est préférable d'utiliser une interface dont une implémentation sera injectée. Ceci a pour principal avantage de rendre le code plus simple et facile à maintenir.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nano, una ayuda para los empresarios de Honduras]]></title>
    <link href="https://nphumbert.github.io/blog/2015/12/15/nano-una-ayuda-para-los-empresarios-de-honduras/"/>
    <updated>2015-12-15T22:46:46+01:00</updated>
    <id>https://nphumbert.github.io/blog/2015/12/15/nano-una-ayuda-para-los-empresarios-de-honduras</id>
    <content type="html"><![CDATA[<p>Han habido diversos cambios en el reglamento de facturación de Honduras que han impactado el trabajo de los empresarios. En efecto, conforme a los artículos 41 y 42 del acuerdo 189-2014 y de la reforma 058-2014, las facturas en Honduras deben contener imperativamente un conjunto de informaciones bien definidas.</p>

<p>El objetivo de este documento es indicar el tipo de datos que deben contener las facturas en Honduras y mostrar las funciones de <a href="https://nano.litesln.com">Nano</a> que facilitan la administración de cuyas facturas y que ayudan a los empresarios de Honduras a diario.</p>

<!-- more -->


<h2>¿ Qué deben contener las facturas en Honduras ?</h2>

<p>Actualmente, los datos siguientes deben aparecer en todas las facturas emitidas en Honduras:</p>

<ul>
<li>La identificación y ubicación del contribuyente;</li>
<li>La denominación del documento: &ldquo;Factura&rdquo; en este caso;</li>
<li>La Clave de Autorización de Impresión (CAI);</li>
<li>La fecha límite de autorización de impresión vigente;</li>
<li>El número correlativo de la factura;</li>
<li>El destino de los ejemplares;</li>
<li>El rango de documentos fiscales autorizado por la DEI;</li>
<li>Los datos del comprador o adquirente. Estos dependen del tipo de comprador o adquirente: contribuyente que requiere sustentar gastos, costos o crédito o consumidor final;</li>
</ul>


<p>Nano facilita la gestión del detalle de las informaciones descritas previamente así como de otras necesarias en ciertos casos excepcionales descritos por la ley.</p>

<h2>¿ Cómo Nano le ayuda todos los días a administrar sus facturas en Honduras ?</h2>

<p><a href="https://nano.litesln.com">Nano</a> de LiteSln permite administrar de manera segura y simple sus facturas asegurándose que sean válidas (todos los datos necesarios a su constitución son indicados). A continuación vamos a describir algunas de las medidas tomadas por Nano para ayudar a los empresarios hondureños.</p>

<p>Nano garantiza que el número de factura se situe en el rango de documentos fiscales autorizado y que no se sobrepasa la fecha límite de autorización de impresión.<br/>
Un recordatorio es dado dos meses antes de esa fecha límite para que el empresario tenga tiempo de procurarse un nuevo rango asociado a una nueva fecha límite de autorización de impresión.
En la fecha límite o cuando el rango se acaba, Nano le invita a actualizar estos datos.</p>

<p><a href="https://nano.litesln.com">Nano</a> de LiteSln permite también identificar las informaciones que faltan para completar sus facturas antes de cada impresión. Si todas las informaciones ya están indicadas, la impresión se lanza sin acción previa necesaria. Sino, Nano propone al usuario completar un formulario con las informaciones que faltan. Al llenar y validar el formulario, la factura impresa contendrá todas las informaciones requiridas por la ley.</p>

<p>Otra ventaja de Nano es que otorga la generación de un número ilimitado de facturas para un número ilimitado de clientes. En efecto, el objetivo de LiteSln es brindar un servicio que sea accesible a todos los empresarios hondureños. De esta forma, el empresario genera y utiliza la cantidad de facturas que necesita.</p>

<p>Otro activo importante de Nano es que se adapta a los cambios fácilmente. Por ejemplo, si hay un cambio de ley, Nano se adapata para generar facturas con la información requerida por la nueva ley. Además, el empresario puede personalizar sus facturas si lo necesita.</p>

<p>Finalmente, Nano provee un conjunto de estadísticas y de gráficos que le permiten monitorear su rendimiento. Puede actualmente visualizar sus ingresos por mes, por cliente y por producto. Otras estadísticas serán añadidas en futuras versiones de Nano.</p>

<h2>Conclusion</h2>

<p><a href="https://nano.litesln.com">Nano</a> asegura una gestión simple y segura de sus facturas. Puede mirar demostraciones de Nano para <a href="https://www.youtube.com/watch?v=Ozo9xQw6vKU">configurar su cuenta</a> y para <a href="https://www.youtube.com/watch?v=EsVpSXKLXgA">crear e imprimir una factura hondureña</a>.</p>

<p>Si tiene preguntas u observaciones, puede ponerse en contacto con nosotros por <a href="mailto:contact@litesln.com">mail</a> o a través la sección de <a href="https://nano.litesln.com/contact">contacto</a> de Nano.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El administrador de facturas Nano disponible]]></title>
    <link href="https://nphumbert.github.io/blog/2015/12/05/el-administrador-de-facturas-nano-esta-disponible/"/>
    <updated>2015-12-05T21:25:20+01:00</updated>
    <id>https://nphumbert.github.io/blog/2015/12/05/el-administrador-de-facturas-nano-esta-disponible</id>
    <content type="html"><![CDATA[<p>Tengo el placer de anunciar la primera versión de <a href="https://nano.litesln.com">Nano</a> de LiteSln. Nano es un sitio web  para administrar facturas de manera segura utilizando una estrategia de numeración que puede ser adaptada a la legislación del país. Nano también permite la edición de facturas según un modelo personalizado y el monitoreo de su rendimiento mediante varias estadísticas.</p>

<p>El objetivo de este artículo es presentar las funciones principales de Nano.</p>

<!-- more -->


<h2>Facturas</h2>

<p>Puede crear y administrar facturas así como productos y clientes utilizando Nano.</p>

<h3>Creación de factura</h3>

<p>Una factura es asociada a un cliente y contiene artículos que corresponden a productos en una dada cantidad. Es igualmente posible agregar diversos honorarios a una factura. Un honorario puede ser fijo o un porcentaje del precio total de la factura (impuestos por ejemplo).</p>

<p>Todas las facturas creadas pueden ser consultadas y acciones pueden ser efectuadas en ellas, dependiendo de su estado  actual.</p>

<h3>Ciclo de vida</h3>

<p>Al principio, una oferta de venta es creada. Esta puede ser emitida y la factura es entonces debida. Una vez que el cliente paga, la factura es marcada como pagada y no puede ser más cancelada.</p>

<p>Par razones de seguridad, los artículos y los honorarios pueden ser únicamente agregados a una oferta de venta.</p>

<h2>Personalización</h2>

<p>Es posible personalizar su experiencia con Nano cambiando la estrategia de numeración y el modelo de impresión por defecto de sus facturas.</p>

<h3>Estrategia de numeración</h3>

<p>Las estrategias de numeración pueden diferir según la legislación que se aplica a su empresa. Por ejemplo, el formato del número de factura o la manera en la que es incrementado pueden ser impuestas por la ley.</p>

<p>Nano trata esta problemática permitiéndole usar una estrategia de numeración personalizada. Para garantizar la coherenncia de la numeración, no puede modificarla una vez la primera factura creada.</p>

<p>Puede migrar facilmente de su sistema de gestión de facturas actual a Nano. En efecto, es posible escoger el número de su primera factura en Nano, a condición de respetar el formato necesario para su estrategia de numeración.</p>

<h3>Modelo de factura</h3>

<p>Un modelo personalizado de factura le permite imprimir las facturas con el formato y la información deseados. El modelo puede ser cambiado en todo momento, aún cuando facturas ya han sido creadas.</p>

<h2>Estadísticas</h2>

<p>Para monitorear su rendimiento, Nano provee un conjunto de estadísticas y de gráficos. Puede actualmente visualizar sus ingresos por mes, por cliente y por producto. Otras estadísticas serán añadidas en futuras versiones de Nano.</p>

<h2>Conclusion</h2>

<p><a href="https://nano.litesln.com">Nano</a> asegura una gestión simple y segura de sus facturas. Puede mirar una demostración de Nano <a href="https://www.youtube.com/watch?v=jWs6Qh3xLKY">aquí</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Invoice Manager Nano Is Released]]></title>
    <link href="https://nphumbert.github.io/blog/2015/12/05/the-invoice-manager-nano-is-released/"/>
    <updated>2015-12-05T19:09:13+01:00</updated>
    <id>https://nphumbert.github.io/blog/2015/12/05/the-invoice-manager-nano-is-released</id>
    <content type="html"><![CDATA[<p>I am pleased to announce the first release of <a href="https://nano.litesln.com">Nano</a> by LiteSln. Nano is a web site that manages invoices and enforce their consistency using a numeration strategy that can be adapted to the country&rsquo;s legislation. It also allows you to edit invoices with your own custom template and to monitor your performance through statistics.</p>

<p>The goal of this article is to introduce the main features of Nano.</p>

<!-- more -->


<h2>Invoices</h2>

<p>You can create and manage invoices as well as products and customers using Nano.</p>

<h3>Invoice creation</h3>

<p>An invoice is associated to a customer and contains articles that correspond to products in a certain quantity.<br/>
It is also possible to add charges to an invoice. A charge may be fixed or a percentage of the invoice&rsquo;s total price (taxes for instance).</p>

<p>All created invoices can be consulted and actions can be performed on them, depending on their current state.</p>

<h3>Workflow</h3>

<p>At first, a sales quote is created. It can be emitted and the invoice is then due. Once the customer pays it, the invoice is marked as paid and cannot be cancelled anymore.</p>

<p>For security purpose, articles and charges can only be added to a sales quote.</p>

<h2>Customization</h2>

<p>It is possible to customize your experience with Nano by changing the default numeration strategy and template to print your invoices.</p>

<h3>Numeration strategy</h3>

<p>Invoices numeration may differ depending on the legislation that applies to your company.
For example, the invoice number format or the way they are incremented can be imposed.</p>

<p>Nano addresses this issue by allowing you to use a custom numeration strategy. In order to guarantee numeration&rsquo;s consistency, you can&rsquo;t modify it once your first invoice is created.</p>

<p>You can easily migrate to Nano from your current invoices management process. Indeed, it is possible to choose the number of your first invoice in Nano, provided that it respects the format required by your numeration strategy.</p>

<h3>Template</h3>

<p>A custom template permits you to print your invoices with the format and the information you wish. The template can be changed even after invoices are created.</p>

<h2>Statistics</h2>

<p>In order to monitor your performance, Nano provides a set of statistics and graphics.
You can currently visualize your revenue per month, per customer and per product. More statistics will be added in future releases.</p>

<h2>Conclusion</h2>

<p><a href="https://nano.litesln.com">Nano</a> aims to ensure a secured management of your invoices in terms of legislation and allows you to do so in a simple way. You can watch a demo of Nano <a href="https://www.youtube.com/watch?v=jWs6Qh3xLKY">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Le gestionnaire de factures Nano est disponible]]></title>
    <link href="https://nphumbert.github.io/blog/2015/12/05/le-gestionnaire-de-factures-nano-est-disponible/"/>
    <updated>2015-12-05T19:09:13+01:00</updated>
    <id>https://nphumbert.github.io/blog/2015/12/05/le-gestionnaire-de-factures-nano-est-disponible</id>
    <content type="html"><![CDATA[<p>Je suis heureuse de vous annoncer la première version de <a href="https://nano.litesln.com">Nano</a> de LiteSln. Nano est un site web de gestion des factures qui assure leur cohérence à l'aide d'une stratégie de numération qui peut être adaptée à la législation du pays. Elle permet également d'imprimer des factures avec votre propre modèle personnalisé et de suivre vos performances grâce à des statistiques.</p>

<p>L'objectif de cet article est d'introduire les principales fonctionnalités de Nano.</p>

<!-- more -->


<h2>Factures</h2>

<p>Vous pouvez créer et gérer des factures ainsi que des produits et des clients à l'aide de Nano.</p>

<h3>Création d'une facture</h3>

<p>Une facture est associée à un client et contient des articles qui correspondent à des produits dans une certaine quantité.<br/>
Il est également possible d'ajouter des charges à une facture. Une charge peut être fixe ou un pourcentage du prix total de la facture (une taxe par exemple).</p>

<p>Toutes les factures créées sont consultables et des actions peuvent y être appliquées, selon leur état.</p>

<h3>Cycle de vie</h3>

<p>Au départ, un devis est créé. Il peut être émis et la facture est alors due. Une fois que le client a payé, la facture est marquée comme payée et ne peut plus être annulée.</p>

<p>Pour des raisons de sécurité, les articles et les charges peuvent seulement être ajoutés à des devis.</p>

<h2>Personnalisation</h2>

<p>Il est possible de personnaliser votre expérience avec Nano en changeant les valeurs par défault pour la stratégie de numération et le modèle d'impression de vos factures.</p>

<h3>Stratégie de numération</h3>

<p>La numération des factures peut varier en fonction de la législation qui s'applique à votre entreprise.
Par exemple, le format des numéros de facture ou la manière dont ils sont incrémentés peuvent être imposés.</p>

<p>Nano traite cette problématique en vous permettant d'utiliser une stratégie de numération personnalisée. Afin de garantir la cohérence dans la numération, vous ne pouvez pas la changer une fois que votre première facture a été créée.</p>

<p>Vous pouvez facilement migrer vers Nano depuis votre système de gestion de factures actuel. En effet, il est possible de choisir le numéro de votre première facture dans Nano, à condition que celui-ci respecte le format requis par votre stratégie de numération.</p>

<h3>Modèle de facture</h3>

<p>Un modèle de facture personnalisé vous permet d'imprimer vos factures avec le format et les informations que vous souhaitez. Ce modèle peut être changé même après la création de plusieurs factures.</p>

<h2>Statistiques</h2>

<p>Afin de suivre vos performances, Nano fourni un ensemble de statistiques et de graphiques.
Actuellement, vous pouvez visualiser vos revenus par mois, par client et par produit. D'autres statistiques seront ajoutées dans de futures versions.</p>

<h2>Conclusion</h2>

<p><a href="https://nano.litesln.com">Nano</a> vise à assurer la gestion sécurisée de vos factures en termes de législation et vous permet de le faire de manière simple. Vous pouvez voir une démo de Nano <a href="https://www.youtube.com/watch?v=jWs6Qh3xLKY">ici</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Spring MVC Controllers]]></title>
    <link href="https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers/"/>
    <updated>2015-10-31T12:54:08+01:00</updated>
    <id>https://nphumbert.github.io/blog/2015/10/31/testing-spring-mvc-controllers</id>
    <content type="html"><![CDATA[<p>Since Spring 3.2 (January, 2013), it is possible to test Spring MVC controllers without an external framework.
The goal of this article is to show how to test Spring MVC controllers using only Spring testing capabilities.</p>

<!-- more -->


<p>To do so, a very simple Spring Boot project will be used as a support. You can find it on <a href="https://github.com/nphumbert/demo-test-spring-mvc">GitHub</a>. The controller to test will first be introduced. Then, explanations will be given on how to test it.</p>

<h2>Controller</h2>

<p>The controller that will be tested is showed below. It permits to do a search in a fruit list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationController</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/fruits&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getFruits</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;search&quot;</span><span class="o">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="n">String</span> <span class="n">search</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">&quot;fruitBowl&quot;</span><span class="o">,</span> <span class="n">search</span><span class="o">(</span><span class="n">search</span><span class="o">));</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;fruits&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">search</span><span class="o">(</span><span class="n">String</span> <span class="n">search</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">search</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nf">fruitBowl</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nf">fruitBowl</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">fruit</span> <span class="o">-&gt;</span> <span class="n">fruit</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="n">search</span><span class="o">))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">fruitBowl</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">asList</span><span class="o">(</span><span class="s">&quot;banana&quot;</span><span class="o">,</span> <span class="s">&quot;orange&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Test</h2>

<p>The test class must be annotated with the following annotations:</p>

<ul>
<li><code>@RunWith(SpringJUnit4ClassRunner.class)</code> to benefit from Spring features in JUnit tests.</li>
<li><code>@SpringApplicationConfiguration(classes = DemoTestSpringMvcApplication.class)</code> to specify the configuration class that will be used during the test.</li>
<li><code>@WebAppConfiguration</code> to indicate that the Spring application context that must be loaded is a <code>WebApplicationContext</code>.</li>
</ul>


<p>The entry point used to perform the tests is the class <code>MockMvc</code>. Thereafter, the usage of this class will be explained.</p>

<h3>Set up</h3>

<p>The set up of the <code>MockMvc</code> class can be done as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ApplicationController</span> <span class="n">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ApplicationController</span><span class="o">();</span> <span class="c1">// 1</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">mockMvc</span> <span class="o">=</span> <span class="n">MockMvcBuilders</span><span class="o">.</span><span class="na">standaloneSetup</span><span class="o">(</span><span class="n">controller</span><span class="o">).</span><span class="na">build</span><span class="o">();</span> <span class="c1">// 2</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, the controller must be instantiated (<code>1</code>). Then, the mock is initialized using the static method <code>MockMvcBuilders.standaloneSetup()</code> (<code>2</code>). At this point, the mock is ready to test the controller.</p>

<h3>Perform</h3>

<p>The method <code>MockMvc.perform()</code> allows to simulate HTTP requests to the controller. For instance, a GET request is done as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span>
</span><span class='line'>    <span class="n">get</span><span class="o">(</span><span class="s">&quot;/fruits&quot;</span><span class="o">)</span> <span class="c1">// 1</span>
</span><span class='line'>        <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&quot;search&quot;</span><span class="o">,</span> <span class="s">&quot;ban&quot;</span><span class="o">)</span> <span class="c1">// 2</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The class <code>MockMvcRequestBuilders</code> provides static methods, such as <code>get</code> or <code>post</code>, to simulate HTTP requests on a particular endpoint of the controller (<code>1</code>). HTTP parameters can be added fluently to the request (<code>2</code>).</p>

<p>Furthermore, other static methods are provided by the <code>MockMvcRequestBuilders</code> class:</p>

<ul>
<li>HTTP verbs like <code>delete</code>, <code>put</code> or <code>patch</code>.</li>
<li><code>fileUpload</code> to upload binary files.</li>
<li>Others (<a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html">documentation</a>).</li>
</ul>


<h3>Assert</h3>

<p>MockMvc permits to add assertions to the controller&rsquo;s response.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;/fruits&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="na">param</span><span class="o">(</span><span class="s">&quot;search&quot;</span><span class="o">,</span> <span class="s">&quot;ban&quot;</span><span class="o">))</span>
</span><span class='line'>    <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span> <span class="c1">// 1</span>
</span><span class='line'>    <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">view</span><span class="o">().</span><span class="na">name</span><span class="o">(</span><span class="s">&quot;fruits&quot;</span><span class="o">))</span> <span class="c1">// 2</span>
</span><span class='line'>    <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">model</span><span class="o">().</span><span class="na">attribute</span><span class="o">(</span><span class="s">&quot;fruitBowl&quot;</span><span class="o">,</span> <span class="n">contains</span><span class="o">(</span><span class="s">&quot;banana&quot;</span><span class="o">)));</span> <span class="c1">// 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assertions are done with the <code>andExpect()</code> method. The class <code>MockMvcResultMatchers</code> provides static methods to do assertions on the HTTP status (<code>1</code>), the view asked by the controller (<code>2</code>) and on the model completed by the controller (<code>3</code>).</p>

<h2>Conclusion</h2>

<p>The Spring test framework is a very powerful, complete and simple way to test Spring MVC controllers. Its fluent API allows to write elegant and yet precise tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exposer des ressources statiques avec Spring MVC]]></title>
    <link href="https://nphumbert.github.io/blog/2015/09/18/exposer-des-ressources-statiques-avec-spring-mvc/"/>
    <updated>2015-09-18T13:59:06+02:00</updated>
    <id>https://nphumbert.github.io/blog/2015/09/18/exposer-des-ressources-statiques-avec-spring-mvc</id>
    <content type="html"><![CDATA[<p>Il est souvent nécessaire d'exposer des ressources statiques telles que des images, des fichiers pdf, des vidéos, etc. dans une application web.
Ces fichiers sont stockés sur le serveur et ne sont donc pas accessibles à l'utilisateur via une URL.</p>

<p>L'objectif de cet article est d'exposer des fichiers stockés sur le serveur via une URL dans une application Spring MVC.</p>

<!-- more -->


<h2>Surcharge de la configuration web</h2>

<p>Pour exposer des ressources statiques, il faut surcharger la configuration web de Spring MVC.
Pour ce faire, une classe de configuration qui hérite de <code>WebMvcConfigurerAdapter</code> doit être implémentée.
Plus précisément, il est nécessaire de surcharger la méthode <code>addResourceHandlers()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">extends</span> <span class="n">WebMvcConfigurerAdapter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DIRECTORY</span> <span class="o">=</span> <span class="s">&quot;/path/to/server/disk/resources&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addResourceHandlers</span><span class="o">(</span><span class="n">ResourceHandlerRegistry</span> <span class="n">registry</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">registry</span><span class="o">.</span><span class="na">addResourceHandler</span><span class="o">(</span><span class="s">&quot;/resources/**&quot;</span><span class="o">)</span> <span class="c1">// 1</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addResourceLocations</span><span class="o">(</span><span class="s">&quot;file:///&quot;</span> <span class="o">+</span> <span class="n">DIRECTORY</span> <span class="o">+</span> <span class="s">&quot;/&quot;</span><span class="o">);</span> <span class="c1">// 2</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode de configuration fournit un objet de type <code>ResourceHandlerRegistry</code> qui permet d'associer une URL (<code>1</code>) à un dossier (<code>2</code>). Ainsi, l'URL <code>http://example.com/resources/file.pdf</code> sera associée au fichier <code>/path/to/server/disk/resources/file.pdf</code>.</p>

<h2>Conclusion</h2>

<p>Pour conclure, Spring permet d'exposer des ressources statiques via des URL de manière simple et rapide.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Transférer des paramètres à travers un redirect avec Spring MVC]]></title>
    <link href="https://nphumbert.github.io/blog/2015/07/25/transferer-des-parametres-a-travers-un-redirect-avec-spring-mvc/"/>
    <updated>2015-07-25T12:06:04+02:00</updated>
    <id>https://nphumbert.github.io/blog/2015/07/25/transferer-des-parametres-a-travers-un-redirect-avec-spring-mvc</id>
    <content type="html"><![CDATA[<p>Dans une application web, il est courant d'effectuer une redirection après la soumission d'un formulaire. Cette redirection permet notamment de rendre l'url <em>bookmarkable</em> et d'empêcher l'utilisateur de resoumettre le formulaire par erreur (suite à un <em>refresh</em>, par exemple).</p>

<p>Il peut être intéressant de passer des paramètres à travers ce redirect. Par exemple, pour indiquer à l'utilisateur que son formulaire a bien été soumis. Pour ce faire, il est possible d'ajouter des paramètres directement dans l'url : <code>redirect:/path/to/endpoint?formSubmitted=true</code>.
Cette solution n'est pas toujours adpatée pour des raisons de confidentialité, de taille d'url ou simplement d'esthétique.</p>

<p>L'objectif de cet article est de démontrer comment transférer des paramètres à travers une redirection avec Spring MVC en utilisant des <em>flash attributes</em>. L'exemple utilisé consistera en un formulaire qui permet d'envoyer un nom. Ce nom s'affichera ensuite une fois le formulaire soumis.</p>

<!-- more -->


<h2>Traitement du formulaire</h2>

<p>Le code suivant décrit la gestion de la soumission du formulaire par un <em>controller</em> Spring MVC :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">post</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">RedirectAttributes</span> <span class="n">redirectAttributes</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">redirectAttributes</span><span class="o">.</span><span class="na">addFlashAttribute</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span> <span class="c1">// 1</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">&quot;redirect:/&quot;</span><span class="o">);</span> <span class="c1">// 2</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Afin d'ajouter un <em>flash attribute</em> à la redirection, il faut utiliser une instance de la classe <code>RedirectAttributes</code> (<code>1</code>). Cette instance est automatiquement injectée par Spring lorsqu'elle est déclarée dans la méthode du <em>controller</em>.</p>

<p>Une fois le <em>flash attribute</em> ajouté, il est possible de faire la redirection (<code>2</code>).</p>

<h2>Traitement de l'affichage</h2>

<p>Le code suivant décrit le traitement de la requête <code>GET</code> par un <em>controller</em> Spring MVC :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&quot;/&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">get</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">ModelAndView</span> <span class="n">modelAndView</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">&quot;default&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="o">?&gt;</span> <span class="n">flashMap</span> <span class="o">=</span> <span class="n">RequestContextUtils</span><span class="o">.</span><span class="na">getInputFlashMap</span><span class="o">(</span><span class="n">request</span><span class="o">);</span> <span class="c1">// 1</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(!</span><span class="n">CollectionUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">flashMap</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">modelAndView</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="n">flashMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">));</span> <span class="c1">// 2</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="n">modelAndView</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pour récupérer la <em>map</em> contenant les <em>flash attributes</em>, il faut utiliser la méthode <code>RequestContextUtils.getInputFlashMap</code> sur la requête <code>HttpServletRequest</code> (<code>1</code>). Cette requête est également injectée par Spring lorsqu'elle est déclarée dans la méthode du <em>controller</em>.</p>

<p>La valeur de l'attribut peut alors être récupérée depuis la <em>map</em> pour être utilisée, ici dans le <code>ModelAndView</code> (<code>2</code>).</p>

<p>Ci-dessous un exemple est donné pour afficher conditionnellement cet attribut dans un template <a href="http://www.thymeleaf.org/">Thymeleaf</a> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;alert alert-success&quot;</span> <span class="n">role</span><span class="o">=</span><span class="s">&quot;alert&quot;</span> <span class="nl">th:</span><span class="k">if</span><span class="o">=</span><span class="s">&quot;${not #strings.isEmpty(name)}&quot;</span><span class="o">&gt;</span>
</span><span class='line'>   <span class="n">Hello</span><span class="o">,</span> <span class="o">&lt;</span><span class="n">span</span> <span class="nl">th:</span><span class="n">text</span><span class="o">=</span><span class="s">&quot;${name}&quot;</span><span class="o">&gt;</span><span class="n">John</span> <span class="n">Doe</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;!</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Les <em>flash attributes</em> de Spring MVC peuvent être utilisés pour transférer des paramètres à travers une redirection. Ce mécanisme permet notamment d'implémenter très facilement une confirmation de soumission de formulaire à l'utilisateur.</p>

<p>Le code source du projet de démonstration peut être trouvé sur <a href="https://github.com/nphumbert/demo-flash-attributes">GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Security et Spring Boot]]></title>
    <link href="https://nphumbert.github.io/blog/2015/06/21/spring-security-et-spring-boot/"/>
    <updated>2015-06-21T11:51:37+02:00</updated>
    <id>https://nphumbert.github.io/blog/2015/06/21/spring-security-et-spring-boot</id>
    <content type="html"><![CDATA[<p>Depuis Spring 3.1, il est possible de configurer Spring en Java.
La configuration Java de Spring Security est supportée depuis sa version 3.2 (<a href="http://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle/#jc">source</a>).</p>

<p>L'objectif de cet article est de montrer comment configurer Spring Security en Java config, dans une application Spring Boot, avec une base de données qui contient les utilisateurs et leur mot de passe hashé. De plus, une authentification HTTP basic sera mise en place.</p>

<!-- more -->


<h2>Créer la classe de configuration</h2>

<p>La classe Java qui doit gérer la configuration doit être munie de l'annotation <code>@Configuration</code> définie par Spring. De plus, elle doit étendre la classe <code>WebSecurityConfigurerAdapter</code>. Spring Boot mettant en place une configuration par défaut, il faut donc finalement utiliser l'annotation <code>@Order</code> afin d'indiquer que la nouvelle configuration doit être utilisée.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@Order</span><span class="o">(</span><span class="n">SecurityProperties</span><span class="o">.</span><span class="na">ACCESS_OVERRIDE_ORDER</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Configurer Spring Security pour utiliser une base de données</h2>

<p>Pour indiquer à Spring la méthode d'authentification, il faut redéfinir la méthode <code>configure(AuthenticationManagerBuilder)</code>. Spring Security offre une API <em>fluent</em> pour configurer une authentification à partir de l'objet <code>AuthenticationManagerBuilder</code>.</p>

<p>Le code ci-dessous permet de configurer l'authentification en utilisant une base de données.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@Order</span><span class="o">(</span><span class="n">SecurityProperties</span><span class="o">.</span><span class="na">ACCESS_OVERRIDE_ORDER</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>    <span class="nd">@Autowired</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">;</span> <span class="c1">// 3</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">auth</span><span class="o">.</span><span class="na">jdbcAuthentication</span><span class="o">()</span> <span class="c1">// 1</span>
</span><span class='line'>                <span class="o">.</span><span class="na">passwordEncoder</span><span class="o">(</span><span class="k">new</span> <span class="nf">ShaPasswordEncoder</span><span class="o">(</span><span class="mi">256</span><span class="o">))</span> <span class="c1">// 6</span>
</span><span class='line'>                <span class="o">.</span><span class="na">dataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">)</span> <span class="c1">// 2</span>
</span><span class='line'>                <span class="o">.</span><span class="na">usersByUsernameQuery</span><span class="o">(</span><span class="s">&quot;SELECT login, password, active FROM user WHERE login=?&quot;</span><span class="o">)</span> <span class="c1">// 4</span>
</span><span class='line'>                <span class="o">.</span><span class="na">authoritiesByUsernameQuery</span><span class="o">(</span><span class="s">&quot;SELECT login, role FROM user WHERE login=?&quot;</span><span class="o">);</span> <span class="c1">// 5</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le cadre de cet article, il s'agit d'une authentification JDBC (<code>1</code>). La base de données à laquelle Spring doit accéder est accessible via une <code>dataSource</code> (<code>2</code>). Elle a été configurée dans l'application (typiquement dans <code>application.properties</code>) et peut donc être directement injectée par Spring grâce à l'annotation <code>@Autowired</code> (<code>3</code>).</p>

<p>La requête pour récupérer un utilisateur à partir de son login est fournie via la méthode <code>usersByUsernameQuery</code> (<code>4</code>) et celle pour récupérer les rôles d'un utilisateur à partir de son login via la méthode <code>authoritiesByUsernameQuery</code> (<code>5</code>). Un utilisateur est caractérisé par un login, un mot de passe et un booléen indiquant s'il est actif. Un rôle est une chaîne de caractères qui correspondra à un profil ayant un ensemble de droits.</p>

<p>Finalement, il est indiqué que les mots de passe dans la base sont hashés à l'aide de l'agorithme SHA-256 (<code>6</code>).</p>

<h2>Configuration de l'authentification HTTP basic</h2>

<p>La méthode d'authentification <a href="https://fr.wikipedia.org/wiki/Authentification_HTTP#M.C3.A9thode_.C2.AB_Basic_.C2.BB">HTTP basic</a> est une méthode d'authentification simple en HTTP et sera utilisée dans cet article.
Cette méthode est indiquée en surchargeant la méthode <code>configure(HTTPSecurity)</code>. De même que dans la section précédente, Spring Security offre une API <em>fluent</em> pour configurer une authentification HTTP à partir de l'objet <code>HTTPSecurity</code>.</p>

<p>Le code ci-dessous permet de configurer l'authentification HTTP basic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">http</span><span class="o">.</span><span class="na">httpBasic</span><span class="o">()</span> <span class="c1">// 1</span>
</span><span class='line'>            <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">,</span> <span class="s">&quot;/css/**&quot;</span><span class="o">,</span> <span class="s">&quot;/js/**&quot;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span> <span class="c1">// 2</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span> <span class="c1">// 3</span>
</span><span class='line'>            <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="s">&quot;/login&quot;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span> <span class="c1">// 4</span>
</span><span class='line'>            <span class="o">.</span><span class="na">and</span><span class="o">()</span>
</span><span class='line'>               <span class="o">.</span><span class="na">logout</span><span class="o">()</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">logoutUrl</span><span class="o">(</span><span class="s">&quot;/logout&quot;</span><span class="o">)</span> <span class="c1">// 5</span>
</span><span class='line'>                   <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="s">&quot;/&quot;</span><span class="o">);</span> <span class="c1">// 6</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>La méthode d'authentification HTTP est précisée avec la méthode <code>httpBasic</code> (<code>1</code>). La racine, les fichiers CSS et javascript sont accessibles à tout le monde (<code>2</code>) tandis que toutes les autres requêtes nécessitent d'être authentifié (<code>3</code>).</p>

<p>L'URL de login est spécifiée via la méthode <code>loginPage</code> (<code>4</code>) et celle de logout via la méthode <code>logoutUrl</code> (<code>5</code>). Après la déconnexion, l'utilisateur est redirigé vers la racine (<code>6</code>).</p>

<p>Le code suivant illustre un formulaire de login et un formulaire de logout.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- Formulaire de login --&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/login&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;username&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Login<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- Formulaire de logout --&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;/logout&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Logout<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>La configuration de Spring Security en Java config est relativement simple et directe. Elle permet de contrôler et de centraliser les accès à toutes les URL de l'application. De plus, il est possible de définir très simplement les URL de login et de logout, Spring Security se chargeant des traitements des requêtes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Injections de dépendances avec Spring]]></title>
    <link href="https://nphumbert.github.io/blog/2015/06/14/injections-de-dependances-avec-spring/"/>
    <updated>2015-06-14T08:35:20+02:00</updated>
    <id>https://nphumbert.github.io/blog/2015/06/14/injections-de-dependances-avec-spring</id>
    <content type="html"><![CDATA[<p>Il existe plusieurs méthodes pour injecter une dépendance dans un objet Java :</p>

<ul>
<li>Injection sur un setter</li>
<li>Injection sur le constructeur</li>
<li>Injection directe sur la déclaration de l'attribut</li>
</ul>


<p>Cet article a pour objectif de définir ces différentes méthodes, de décrire leurs avantages et inconvénients et indiquer leurs cas d'utilisation.</p>

<!-- more -->


<p>Dans la plupart des applications Java d'entreprise, il y a des services ayant besoin de DAO pour accéder à la base de données. Le code suivant est une illustration de ce cas :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="n">User</span> <span class="nf">save</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// NullPointerException car userDao n&#39;est pas injecté.</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dans le cadre de cet article, l'annotation <code>@Autowired</code> de Spring sera utilisée pour injecter <code>userDao</code> dans le service.</p>

<h2>Injection sur un setter</h2>

<p>Il est possible de créer un setter et de l'annoter avec <code>@Autowired</code>. Spring va alors utiliser ce setter pour injecter <code>userDao</code> dans le service.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Autowired</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserDao</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="n">User</span> <span class="nf">save</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// userDao est injecté via le setter annoté.</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette méthode a pour avantage de rendre le <code>userDao</code> facilement injectable dans un test unitaire sans avoir à utiliser de framework particulier. Comme montré dans l'exemple ci-après :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Test</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_save</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// given</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Martin&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UserServiceImpl</span><span class="o">();</span>
</span><span class='line'>      <span class="n">userService</span><span class="o">.</span><span class="na">setUserDao</span><span class="o">(</span><span class="k">new</span> <span class="nf">FakeUserDaoImpl</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// when</span>
</span><span class='line'>      <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// then</span>
</span><span class='line'>      <span class="n">assertThat</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="kd">class</span> <span class="nc">FakeUserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">User</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cependant, elle a pour inconvénient de rendre l'attribut <code>userDao</code> du service modifiable par tous les objets qui disposent d'une instance du service (ils peuvent donc même le rendre <code>null</code>).</p>

<h2>Injection sur le constructeur</h2>

<p>Dans cette méthode d'injection, le <code>userDao</code> est injecté dans le service via son constructeur annoté avec <code>@Autowired</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="kd">final</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Autowired</span>
</span><span class='line'>   <span class="kd">public</span> <span class="nf">UserServiceImpl</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="n">User</span> <span class="nf">save</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// userDao est injecté via le constructeur annoté.</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comme la méthode d'injection à l'aide du setter, celle-ci permet de rendre le <code>userDao</code> facilement injectable dans un test unitaire.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Test</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_save</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// given</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Martin&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UserServiceImpl</span><span class="o">(</span><span class="k">new</span> <span class="nf">FakeUserDaoImpl</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// when</span>
</span><span class='line'>      <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// then</span>
</span><span class='line'>      <span class="n">assertThat</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="kd">class</span> <span class="nc">FakeUserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">User</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>De plus, elle permet également d'assurer que le <code>userDao</code> ne sera jamais modifié. Il suffirait donc de mettre un contrôle de nullité dans le constructeur pour certifier qu'il ne sera jamais <code>null</code>.</p>

<p>Cependant, elle a pour inconvénient d'imposer la création de la dépendance dès l'instanciation du service même si elle n'est pas nécessaire.</p>

<h2>Injection sur la déclaration de l'attribut</h2>

<p>Cette méthode consiste à ajouter l'annotation <code>@Autowired</code> directement sur la déclaration de l'attribut.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Autowired</span>
</span><span class='line'>   <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Override</span>
</span><span class='line'>   <span class="kd">public</span> <span class="n">User</span> <span class="nf">save</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">User</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// userDao est injecté via l&#39;annotation @Autowired.</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cette manière d'injecter a l'avantage d'être simple à utiliser.</p>

<p>Néanmoins, elle n'est pas conseillée car elle force à employer la réfléxion, ce qui la rend notamment plus compliquée à tester (utilisation obligatoire d'un framework de test).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="nd">@Test</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test_save</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// given</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Martin&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">UserService</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">UserServiceImpl</span><span class="o">();</span>
</span><span class='line'>      <span class="n">UserDao</span> <span class="n">fakeUserDao</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">FakeUserDaoImpl</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Utilisation de la classe ReflectionTestUtils de Spring.</span>
</span><span class='line'>      <span class="n">ReflectionTestUtils</span><span class="o">.</span><span class="na">setField</span><span class="o">(</span><span class="n">userService</span><span class="o">,</span> <span class="s">&quot;userDao&quot;</span><span class="o">,</span> <span class="n">fakeUserDao</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// when</span>
</span><span class='line'>      <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// then</span>
</span><span class='line'>      <span class="n">assertThat</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">private</span> <span class="kd">class</span> <span class="nc">FakeUserDaoImpl</span> <span class="kd">implements</span> <span class="n">UserDao</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>      <span class="nd">@Override</span>
</span><span class='line'>      <span class="kd">public</span> <span class="n">User</span> <span class="nf">save</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>De plus, elle rompt le principe de la programmation orientée objet qui stipule que les objets sont responsables de leurs attributs privés. En effet, l'attribut privé est ici manipulé directement par Spring ou le framework de test choisi.</p>

<h2>Conclusion</h2>

<p>L'injection d'un attribut d'un objet peut se faire de différentes manières.
L'injection par setter a pour avantage de rendre le code facilement testable. L'injection par constructeur a, en plus, l'avantage de pouvoir contrôler la nullité de l'attribut. Elle est donc conseilée pour les attributs obligatoires. Finalement, l'injection sur la déclaration de l'attribut est déconseilée car elle rend le code moins facilement testable et crée des dépendances cachées.</p>

<p>La testabilité du code est importante. En effet, un code non testable est signe d'un code qui sera difficile à comprendre et à maintenir.</p>
]]></content>
  </entry>
  
</feed>
